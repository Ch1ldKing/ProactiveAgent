- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - db_query_execute(query)
    - visualization_create(data, type)
    - optimize_sql(query)
    - generate_documentation(code_snippet)
    - perform_statistical_analysis(data, analysis_type)
    description: Daniel Martinez, a data analyst, is working in a modern office cubicle
      equipped with dual monitors. He is focused on analyzing customer transaction
      data to prepare a quarterly financial report. His tasks involve writing SQL
      queries and optimizing them for performance.
    entities:
    - Database Management System (DBMS)
    - Dual Monitor Setup
    - Notebook and Pen
    - Financial Reports
    - Data Team
    - Business Intelligence Software
    events_example:
    - The user opens SQL Server Management Studio and connects to the customer database.
    - The user types 'SELECT AVG(credit_limit) FROM customers' in the query editor.
    - The agent executes the entered SQL query and retrieves the result.
    - The agent suggests an optimized version of the SQL query based on analyzing
      current query performance.
    - The user opens a new browser tab and navigates to a SQL tutorial website.
    - The agent translates the SQL query result into a bar chart using a data visualization
      tool.
    - The user types 'credit limit variations by demographics' in Google search.
    - The agent generates documentation for the SQL query and saves it to a specified
      file path.
    - The user clicks on the web page, types 'SQL average function explanation', and
      presses 'Enter'.
    - The agent encounters an error message stating 'Syntax error near 'FROM'' and
      displays it to the user.
    - The user scrolls through a detailed SQL optimization guide on the tutorial website.
    - The agent performs a statistical analysis on the retrieved data and generates
      a summary report.
    - The user switches to Excel and pastes the query result into a financial model.
    - The agent opens the file 'customer_data.csv' and reads its contents.
    - The user navigates through Google search results for 'improving SQL query performance'.
    - The agent saves the optimized SQL query version in the file '/user/documents/optimized_queries.sql'.
    - The user imports the dataset into a Jupyter notebook and begins exploratory
      data analysis.
    - The agent identifies inconsistencies in the dataset and flags potential discrepancies.
    - The user clicks a tutorial video link on SQL JOIN types and starts watching
      it.
    - The agent opens the file 'visualizations.ppt' and inserts the created bar chart
      slide.
    theme: Data Analysis in Financial Services
  user:
    description: Daniel Martinez is a 29-year-old data analyst at a financial services
      company. He has intermediate SQL skills and is proficient in data visualization
      tools like Tableau. He enjoys optimizing database queries and creating insightful
      financial reports.
    goal: Write an SQL query to calculate and return the average credit limit of all
      customers.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - db_query_execute(query)
    - visualization_create(data, type)
    - optimize_sql(query)
    - generate_documentation(code_snippet)
    - perform_statistical_analysis(data, analysis_type)
    description: Emma Wilson, the founder of a FinTech startup, is working from a
      co-working space. She is focused on integrating financial metrics into business
      models and learning new tools for data insights. Her tasks involve basic SQL
      querying and financial modeling.
    entities:
    - Laptop with SQL Client Software
    - Financial Modeling Tools (e.g., Excel)
    - Whiteboard
    - Startup's Financial Health Metrics
    - Investors
    - Business Advisors/Mentors
    - Competitor Analysis Tools
    events_example:
    - The user opens SQL Server Management Studio and connects to the customer database.
    - The user types 'SELECT AVG(credit_limit) FROM customers' in the query editor.
    - The agent executes the entered SQL query and retrieves the result.
    - The agent suggests an optimized version of the SQL query based on analyzing
      current query performance.
    - The user opens a new browser tab and navigates to a SQL tutorial website.
    - The agent translates the SQL query result into a bar chart using a data visualization
      tool.
    - The user types 'credit limit variations by demographics' in Google search.
    - The agent generates documentation for the SQL query and saves it to a specified
      file path.
    - The user clicks on the web page, types 'SQL average function explanation', and
      presses 'Enter'.
    - The agent encounters an error message stating 'Syntax error near 'FROM'' and
      displays it to the user.
    - The user scrolls through a detailed SQL optimization guide on the tutorial website.
    - The agent performs a statistical analysis on the retrieved data and generates
      a summary report.
    - The user switches to Excel and pastes the query result into a financial model.
    - The agent opens the file 'customer_data.csv' and reads its contents.
    - The user navigates through Google search results for 'improving SQL query performance'.
    - The agent saves the optimized SQL query version in the file '/user/documents/optimized_queries.sql'.
    - The user imports the dataset into a Jupyter notebook and begins exploratory
      data analysis.
    - The agent identifies inconsistencies in the dataset and flags potential discrepancies.
    - The user clicks a tutorial video link on SQL JOIN types and starts watching
      it.
    - The agent opens the file 'visualizations.ppt' and inserts the created bar chart
      slide.
    theme: Startup Financial Analysis
  user:
    description: Emma Wilson is a 34-year-old founder and CEO of a FinTech startup.
      She has basic SQL skills and a strong background in business strategy and financial
      planning. She values straightforward solutions and often works with simplified
      datasets.
    goal: Write an SQL query to calculate and return the average credit limit of all
      customers.
- environment:
    agent_ops:
    - read_text(source)
    - generate_text(prompt, style=None)
    - analyze_image(image_path)
    - code_editor.open(file_path, editor='VSCode')
    - code_editor.insert_snippet(file_path, snippet, position=None)
    - terminal_run(command, capture_output=False)
    - file_system.open(file_path)
    - file_system.save(file_path, content)
    - version_control.commit(file_path, message)
    - browser.open(url, new_tab=True)
    - api_request(endpoint, method='GET', data=None)
    description: Emma Thompson, a front-end developer, is working on a React project
      in her home office. She is building a counter component that allows users to
      increase and decrease the count. The environment includes her MacBook Pro, VSCode,
      and various online resources.
    entities:
    - MacBook Pro
    - VSCode
    - Chrome DevTools
    - GitHub repository
    - Material UI
    - Slack desktop application
    - React documentation
    - Medium article
    - Stack Overflow
    events_example:
    - The agent opens the browser and searches for tutorials on React state management.
    - The agent opens the file `Counter.js` in Visual Studio Code and identifies several
      bugs.
    - The user visited 'https://reactjs.org/docs/state-and-lifecycle.html' in the
      web browser.
    - The user scrolls through content on a web page with six open tabs.
    - The user moved the mouse within the `Counter.js` file in Visual Studio Code.
    - The user clicked and scrolled within the Slack desktop application.
    - The user navigated Google search results for 'React hooks tutorial' and opened
      a Medium article.
    - The user clicked to open Google's search results page for 'useState hook example'
      in Chrome.
    - The user stayed on the 'best practices for React state management' Google search
      results page.
    - The user clicks and types 'keyboard shortcuts for increment' on a search result
      page.
    - The agent generates code for a reset button feature in `Counter.js`.
    - The agent runs `npm start` in the terminal to start the development server.
    - The user navigates to localhost:3000 in the browser to view the web app.
    - The user sets a breakpoint in the `handleIncrement` function in Visual Studio
      Code.
    - The agent reads recent emails and schedules a meeting for the user with the
      team.
    - The agent makes an API request to fetch initial counter value data.
    - The user clicked on a Stack Overflow link about optimizing React components.
    - The user remained focused on `Counter.js` while making multiple edits.
    - The user typed `git commit -m "Add reset button feature" ` in the integrated
      terminal.
    - The agent suggests adding prop types for state management in `Counter.js`.
    - The agent opens a link from CSDN about performance optimization in React.
    - The user creates a new branch named `enhancement/reset-counter` in Git.
    - The agent opens the browser and searches for 'CSS-in-JS libraries' tutorials.
    - The user browsed the documentation on Material-UI for styling components.
    - The agent inserts a code snippet for `useReducer` as an alternative state management
      method in `Counter.js`.
    - The agent debugs the code and identifies that `setCount` is not updating correctly.
    - The user runs unit tests using Jest for the counter component.
    - The user reviews the test results in the terminal.
    - The agent recommends splitting the counter logic into a separate custom hook.
    - The agent outputs the result of running `eslint .` in the terminal, highlighting
      issues.
    theme: React Counter Component Development
  user:
    description: Emma Thompson, a 28-year-old front-end developer with intermediate
      proficiency in React and JavaScript. She works for a tech startup and enjoys
      building interactive UI components. Emma prefers detailed documentation and
      step-by-step guides, and she often experiments with different state management
      libraries.
    goal: Use React's state management to create a counter component that allows users
      to increase and decrease the count.
- environment:
    agent_ops:
    - read_text(source)
    - generate_text(prompt, style=None)
    - analyze_image(image_path)
    - code_editor.open(file_path, editor='WebStorm')
    - code_editor.insert_snippet(file_path, snippet, position=None)
    - terminal_run(command, capture_output=False)
    - file_system.open(file_path)
    - file_system.save(file_path, content)
    - version_control.commit(file_path, message)
    - browser.open(url, new_tab=True)
    - api_request(endpoint, method='GET', data=None)
    description: Jake Martinez, a full-stack developer, is working on a freelance
      project from his home studio. He is enhancing a React counter component using
      advanced state management techniques. The environment includes his custom-built
      PC, WebStorm IDE, and various online resources.
    entities:
    - Custom-built PC
    - WebStorm IDE
    - Multiple monitors
    - Home server
    - GitHub repository
    - MongoDB Atlas
    - Node.js backend services
    - Jenkins CI/CD pipeline
    - React documentation
    - Stack Overflow
    events_example:
    - The agent opens the browser and searches for tutorials on React state management.
    - The agent opens the file `Counter.js` in WebStorm and identifies several bugs.
    - The user visited 'https://reactjs.org/docs/state-and-lifecycle.html' in the
      web browser.
    - The user scrolls through content on a web page with six open tabs.
    - The user moved the mouse within the `Counter.js` file in WebStorm.
    - The user clicked and scrolled within the Slack desktop application.
    - The user navigated Google search results for 'React hooks tutorial' and opened
      a Medium article.
    - The user clicked to open Google's search results page for 'useState hook example'
      in Chrome.
    - The user stayed on the 'best practices for React state management' Google search
      results page.
    - The user clicks and types 'keyboard shortcuts for increment' on a search result
      page.
    - The agent generates code for a reset button feature in `Counter.js`.
    - The agent runs `npm start` in the terminal to start the development server.
    - The user navigates to localhost:3000 in the browser to view the web app.
    - The user sets a breakpoint in the `handleIncrement` function in WebStorm.
    - The agent reads recent emails and schedules a meeting for the user with the
      team.
    - The agent makes an API request to fetch initial counter value data.
    - The user clicked on a Stack Overflow link about optimizing React components.
    - The user remained focused on `Counter.js` while making multiple edits.
    - The user typed `git commit -m "Add reset button feature" ` in the integrated
      terminal.
    - The agent suggests adding prop types for state management in `Counter.js`.
    - The agent opens a link from CSDN about performance optimization in React.
    - The user creates a new branch named `enhancement/reset-counter` in Git.
    - The agent opens the browser and searches for 'CSS-in-JS libraries' tutorials.
    - The user browsed the documentation on Material-UI for styling components.
    - The agent inserts a code snippet for `useReducer` as an alternative state management
      method in `Counter.js`.
    - The agent debugs the code and identifies that `setCount` is not updating correctly.
    - The user runs unit tests using Jest for the counter component.
    - The user reviews the test results in the terminal.
    - The agent recommends splitting the counter logic into a separate custom hook.
    - The agent outputs the result of running `eslint .` in the terminal, highlighting
      issues.
    theme: Advanced React State Management
  user:
    description: Jake Martinez, a 34-year-old full-stack developer with strong proficiency
      in both front-end and back-end development technologies. He runs his own freelance
      business and enjoys mentoring junior developers. Jake prefers working late at
      night and values efficiency and automation.
    goal: Enhance a React counter component using advanced state management techniques.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> Tuple[bool, str, str]'
    - terminal_read_output() -> str
    - 'file_open(file_path: str) -> Tuple[bool, str]'
    - 'file_save(file_path: str, content: str) -> bool'
    - 'file_list_directory(directory_path: str) -> Tuple[bool, List[str]]'
    - 'browser_open(url: str) -> bool'
    - 'browser_search(query: str) -> List[str]'
    - 'browser_scrape_content(url: str) -> Tuple[bool, str]'
    - 'read_text_from_image(image_path: str) -> Tuple[bool, str]'
    - 'generate_text_summary(text: str) -> str'
    - 'generate_code_snippet(description: str, language: str) -> Tuple[bool, str]'
    - 'create_grafana_dashboard(dashboard_config: dict) -> bool'
    - 'configure_jenkins_pipeline(pipeline_config: dict) -> bool'
    - 'deploy_docker_container(container_config: dict) -> bool'
    description: Alice Thompson, a backend developer at a FinTech company, is working
      from her home office to extend a Go script that parses log files from multiple
      sources and generates a summary report of error occurrences by source. She uses
      a dual-monitor setup and often works late into the night.
    entities:
    - Dual-Monitor Setup
    - Tea Mug
    - Notebook
    - Multiple Log Files
    - Summary Report
    - Team Feedback
    - Version Control
    - Company's Performance Metrics
    events_example:
    - The agent opens the file `logfile.log` and reads its content.
    - The agent saves updates to the `log_parser.go` file after the user modifies
      the code.
    - The agent executes the command `go run log_parser.go` in the terminal.
    - The user scrolls through a tutorial on Go file handling on the Go documentation
      website.
    - The user clicks on a GitHub link regarding Go regular expressions and views
      the README file.
    - The agent initiates a search query for optimizing Go log parsing on Google.
    - The agent scrapes content from a blog post on efficient error handling in Go.
    - The agent detects and highlights a syntax error in the `log_parser.go` file.
    - The user switches to a Slack channel to ask colleagues for advice on regex patterns
      in Go.
    - The user types and runs `go mod init logparser` in the terminal to initialize
      a Go module.
    - The agent opens Visual Studio Code and loads the `log_parser.go` file.
    - The agent configures a new Jenkins pipeline for the Go script deployment.
    - The user copies a sample regex pattern from a Stack Overflow answer and pastes
      it into their code.
    - The user visits the Grafana documentation page to read about dashboard configuration.
    - The agent lists files in the `/logs` directory to check available log files.
    - The user clicks on a tutorial video about Go concurrency patterns on YouTube.
    - The agent reads text from an image containing handwritten notes on Go syntax.
    - The user generates a search query for 'Go log file processing best practices'
      on DuckDuckGo.
    - The user scrolls through a Medium article on building efficient log parsers
      in Go.
    - The agent creates a new folder `/log_processing` and moves relevant files into
      it.
    theme: Log File Parsing and Error Counting
  user:
    description: Alice Thompson is a 29-year-old backend developer at a FinTech company.
      She is skilled in Java, Python, Go, SQL, Docker, and Kubernetes. Alice is interested
      in automating routine tasks and optimizing database queries. She often works
      late into the night with a cup of tea at her side.
    goal: Extend the Go script to parse log files from multiple sources and generate
      a summary report of error occurrences by source.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> Tuple[bool, str, str]'
    - terminal_read_output() -> str
    - 'file_open(file_path: str) -> Tuple[bool, str]'
    - 'file_save(file_path: str, content: str) -> bool'
    - 'file_list_directory(directory_path: str) -> Tuple[bool, List[str]]'
    - 'browser_open(url: str) -> bool'
    - 'browser_search(query: str) -> List[str]'
    - 'browser_scrape_content(url: str) -> Tuple[bool, str]'
    - 'read_text_from_image(image_path: str) -> Tuple[bool, str]'
    - 'generate_text_summary(text: str) -> str'
    - 'generate_code_snippet(description: str, language: str) -> Tuple[bool, str]'
    - 'create_grafana_dashboard(dashboard_config: dict) -> bool'
    - 'configure_jenkins_pipeline(pipeline_config: dict) -> bool'
    - 'deploy_docker_container(container_config: dict) -> bool'
    description: Marcus Lee, a senior SRE at a tech startup, is modifying a Go script
      to integrate with Grafana for visualizing error metrics over time from system
      logs. He uses a Grafana dashboard to monitor system performance and often deploys
      at night to minimize user impact.
    entities:
    - Grafana Dashboard
    - Gaming Console
    - System Logs
    - AWS Infrastructure
    - System Alerts
    events_example:
    - The agent opens the file `logfile.log` and reads its content.
    - The agent saves updates to the `log_parser.go` file after the user modifies
      the code.
    - The agent executes the command `go run log_parser.go` in the terminal.
    - The user scrolls through a tutorial on Go file handling on the Go documentation
      website.
    - The user clicks on a GitHub link regarding Go regular expressions and views
      the README file.
    - The agent initiates a search query for optimizing Go log parsing on Google.
    - The agent scrapes content from a blog post on efficient error handling in Go.
    - The agent detects and highlights a syntax error in the `log_parser.go` file.
    - The user switches to a Slack channel to ask colleagues for advice on regex patterns
      in Go.
    - The user types and runs `go mod init logparser` in the terminal to initialize
      a Go module.
    - The agent opens Visual Studio Code and loads the `log_parser.go` file.
    - The agent configures a new Jenkins pipeline for the Go script deployment.
    - The user copies a sample regex pattern from a Stack Overflow answer and pastes
      it into their code.
    - The user visits the Grafana documentation page to read about dashboard configuration.
    - The agent lists files in the `/logs` directory to check available log files.
    - The user clicks on a tutorial video about Go concurrency patterns on YouTube.
    - The agent reads text from an image containing handwritten notes on Go syntax.
    - The user generates a search query for 'Go log file processing best practices'
      on DuckDuckGo.
    - The user scrolls through a Medium article on building efficient log parsers
      in Go.
    - The agent creates a new folder `/log_processing` and moves relevant files into
      it.
    theme: Error Monitoring and Visualization
  user:
    description: Marcus Lee is a 35-year-old senior SRE at a tech startup. He is skilled
      in Go, Bash, Linux System Administration, AWS, Jenkins, Prometheus, and Grafana.
      Marcus is interested in system performance monitoring and automating deployment
      pipelines. He is an avid gamer and enjoys cooking exotic dishes.
    goal: Modify the Go script to integrate with Grafana for visualizing error metrics
      over time from system logs.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, max_length=100)
    - text.analyze_syntax(content)
    - image.read(file_path)
    - image.generate_from_text(text, file_path)
    - terminal.run(command)
    - terminal.read_output()
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - browser.open(url)
    - browser.read_content()
    - browser.perform_search(query)
    description: Emily Chen is working late in her home office, equipped with a high-performance
      workstation and a 27-inch 4K monitor. She is developing a Java algorithm to
      detect if a string is a palindrome, which will be integrated into a fintech
      application for analyzing transaction comments.
    entities:
    - Laptop/Workstation
    - IntelliJ IDEA
    - Whiteboard
    - Smartphone
    - Fintech Application
    - Team Members
    - Project Manager
    - Industry Standards
    - User Feedback
    events_example:
    - The user switches to the browser and types a Google search query 'How to efficiently
      check if a string is palindrome in Java?' and hits enter.
    - The agent reads the search results page for 'How to efficiently check if a string
      is palindrome in Java?'.
    - The user clicks on a link from Stack Overflow's discussion on 'Palindrome detection
      in Java'.
    - The user opens the 'PalindromeChecker.java' file in IntelliJ IDEA.
    - The agent reads the 'PalindromeChecker.java' file and identifies a potential
      off-by-one error.
    - The user right-clicks and clicks several times on the Google search results
      page for 'How to reverse a string in Java', then navigates back to the 'Java
      String Methods' documentation page.
    - The agent runs the 'javac PalindromeChecker.java' command in the terminal and
      reads the output.
    - The user clicks on an IntelliJ IDEA notification for a code syntax issue in
      'PalindromeChecker.java'.
    - The agent saves the 'PalindromeChecker.java' file after fixing the off-by-one
      error.
    - The agent opens the browser and searches for tutorials for Java string manipulation.
    - The user scrolls through a Stack Overflow discussion on 'Best practices for
      string manipulation in Java'.
    - The user types 'palindrome method efficiency java' into the Google search bar
      and presses enter.
    - The user right-clicks on the Google search results for 'Java StringBuilder reverse
      method' and opens a new tab.
    - The agent reads the content of the newly opened tab on 'Java StringBuilder reverse
      method'.
    - The agent generates a text prompt with suggestions to optimize the palindrome
      detection algorithm.
    - The user remains focused on making changes in 'PalindromeChecker.java' within
      IntelliJ IDEA.
    - The agent lists files in the project directory to find any related utility classes.
    - The user types 'charAt palindrome' into the search bar on the Oracle Java Documentation
      site and presses enter.
    - The agent reads the output of a unit test run for 'PalindromeChecker.java' in
      the terminal.
    - The user scrolls through code examples in a blog post on 'Efficient Java Algorithms'.
    theme: Fintech Application Development
  user:
    description: Emily Chen, a 27-year-old software engineer at a fintech company,
      is proficient in Java, Python, and SQL. She has a strong background in algorithms
      and data structures and is currently working on a personal project to enhance
      her skills and contribute to an open-source repository.
    goal: Implement a Java algorithm to detect if a string is a palindrome.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, max_length=100)
    - text.analyze_syntax(content)
    - image.read(file_path)
    - image.generate_from_text(text, file_path)
    - terminal.run(command)
    - terminal.read_output()
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - browser.open(url)
    - browser.read_content()
    - browser.perform_search(query)
    description: Mark Thompson, a college computer science lecturer, is developing
      educational material for his beginner's coding class. He is working in his home
      office with a dual-monitor setup, using Eclipse IDE and a projector for his
      lectures.
    entities:
    - Desktop Computer
    - Eclipse IDE
    - Projector
    - Students
    - Assignments/Exams
    - University Curriculum
    - Academic Board
    - Educational Tools
    events_example:
    - The user switches to the browser and types a Google search query 'How to efficiently
      check if a string is palindrome in Java?' and hits enter.
    - The agent reads the search results page for 'How to efficiently check if a string
      is palindrome in Java?'.
    - The user clicks on a link from Stack Overflow's discussion on 'Palindrome detection
      in Java'.
    - The user opens the 'PalindromeChecker.java' file in IntelliJ IDEA.
    - The agent reads the 'PalindromeChecker.java' file and identifies a potential
      off-by-one error.
    - The user right-clicks and clicks several times on the Google search results
      page for 'How to reverse a string in Java', then navigates back to the 'Java
      String Methods' documentation page.
    - The agent runs the 'javac PalindromeChecker.java' command in the terminal and
      reads the output.
    - The user clicks on an IntelliJ IDEA notification for a code syntax issue in
      'PalindromeChecker.java'.
    - The agent saves the 'PalindromeChecker.java' file after fixing the off-by-one
      error.
    - The agent opens the browser and searches for tutorials for Java string manipulation.
    - The user scrolls through a Stack Overflow discussion on 'Best practices for
      string manipulation in Java'.
    - The user types 'palindrome method efficiency java' into the Google search bar
      and presses enter.
    - The user right-clicks on the Google search results for 'Java StringBuilder reverse
      method' and opens a new tab.
    - The agent reads the content of the newly opened tab on 'Java StringBuilder reverse
      method'.
    - The agent generates a text prompt with suggestions to optimize the palindrome
      detection algorithm.
    - The user remains focused on making changes in 'PalindromeChecker.java' within
      IntelliJ IDEA.
    - The agent lists files in the project directory to find any related utility classes.
    - The user types 'charAt palindrome' into the search bar on the Oracle Java Documentation
      site and presses enter.
    - The agent reads the output of a unit test run for 'PalindromeChecker.java' in
      the terminal.
    - The user scrolls through code examples in a blog post on 'Efficient Java Algorithms'.
    theme: Educational Content Development
  user:
    description: Mark Thompson, a 35-year-old college computer science lecturer, has
      advanced knowledge in Java and C++. He focuses on teaching algorithms and their
      real-world applications, creating interactive lab assignments, and grading student
      projects.
    goal: Develop educational material demonstrating the implementation of a Java
      algorithm to detect if a string is a palindrome.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, max_length=100)
    - text.analyze_syntax(content)
    - image.read(file_path)
    - image.generate_from_text(text, file_path)
    - terminal.run(command)
    - terminal.read_output()
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - browser.open(url)
    - browser.read_content()
    - browser.perform_search(query)
    description: Lisa Rodriguez, a freelance software developer, is working on a cross-platform
      mobile app for text analysis. She is using her powerful notebook and Visual
      Studio Code, testing the app on both a tablet and a smartphone.
    entities:
    - Laptop
    - Visual Studio Code
    - Tablet and Smartphone
    - Mobile App
    - Clients
    - Client Feedback
    - Market Trends
    - Development Community
    events_example:
    - The user switches to the browser and types a Google search query 'How to efficiently
      check if a string is palindrome in Java?' and hits enter.
    - The agent reads the search results page for 'How to efficiently check if a string
      is palindrome in Java?'.
    - The user clicks on a link from Stack Overflow's discussion on 'Palindrome detection
      in Java'.
    - The user opens the 'PalindromeChecker.java' file in IntelliJ IDEA.
    - The agent reads the 'PalindromeChecker.java' file and identifies a potential
      off-by-one error.
    - The user right-clicks and clicks several times on the Google search results
      page for 'How to reverse a string in Java', then navigates back to the 'Java
      String Methods' documentation page.
    - The agent runs the 'javac PalindromeChecker.java' command in the terminal and
      reads the output.
    - The user clicks on an IntelliJ IDEA notification for a code syntax issue in
      'PalindromeChecker.java'.
    - The agent saves the 'PalindromeChecker.java' file after fixing the off-by-one
      error.
    - The agent opens the browser and searches for tutorials for Java string manipulation.
    - The user scrolls through a Stack Overflow discussion on 'Best practices for
      string manipulation in Java'.
    - The user types 'palindrome method efficiency java' into the Google search bar
      and presses enter.
    - The user right-clicks on the Google search results for 'Java StringBuilder reverse
      method' and opens a new tab.
    - The agent reads the content of the newly opened tab on 'Java StringBuilder reverse
      method'.
    - The agent generates a text prompt with suggestions to optimize the palindrome
      detection algorithm.
    - The user remains focused on making changes in 'PalindromeChecker.java' within
      IntelliJ IDEA.
    - The agent lists files in the project directory to find any related utility classes.
    - The user types 'charAt palindrome' into the search bar on the Oracle Java Documentation
      site and presses enter.
    - The agent reads the output of a unit test run for 'PalindromeChecker.java' in
      the terminal.
    - The user scrolls through code examples in a blog post on 'Efficient Java Algorithms'.
    theme: Mobile App Development
  user:
    description: Lisa Rodriguez, a 42-year-old freelance software developer, is skilled
      in Java, JavaScript, and mobile app development. She focuses on producing clean,
      maintainable code and user-centric applications, collaborating closely with
      clients.
    goal: Implement a Java algorithm to detect if a string is a palindrome for a cross-platform
      mobile app.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, max_length=100)
    - text.analyze_syntax(content)
    - image.read(file_path)
    - image.generate_from_text(text, file_path)
    - terminal.run(command)
    - terminal.read_output()
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - browser.open(url)
    - browser.read_content()
    - browser.perform_search(query)
    description: Anil Kumar, a backend developer at an e-commerce company, is working
      on a service that processes customer reviews and feedback. He is using a remote
      server accessed through SSH, IntelliJ IDEA, and an APM tool for performance
      monitoring.
    entities:
    - Server
    - IntelliJ IDEA
    - APM Tool
    - E-commerce Platform
    - API Consumers
    - DevOps Team
    - Company Policies
    - Customer Service Team
    events_example:
    - The user switches to the browser and types a Google search query 'How to efficiently
      check if a string is palindrome in Java?' and hits enter.
    - The agent reads the search results page for 'How to efficiently check if a string
      is palindrome in Java?'.
    - The user clicks on a link from Stack Overflow's discussion on 'Palindrome detection
      in Java'.
    - The user opens the 'PalindromeChecker.java' file in IntelliJ IDEA.
    - The agent reads the 'PalindromeChecker.java' file and identifies a potential
      off-by-one error.
    - The user right-clicks and clicks several times on the Google search results
      page for 'How to reverse a string in Java', then navigates back to the 'Java
      String Methods' documentation page.
    - The agent runs the 'javac PalindromeChecker.java' command in the terminal and
      reads the output.
    - The user clicks on an IntelliJ IDEA notification for a code syntax issue in
      'PalindromeChecker.java'.
    - The agent saves the 'PalindromeChecker.java' file after fixing the off-by-one
      error.
    - The agent opens the browser and searches for tutorials for Java string manipulation.
    - The user scrolls through a Stack Overflow discussion on 'Best practices for
      string manipulation in Java'.
    - The user types 'palindrome method efficiency java' into the Google search bar
      and presses enter.
    - The user right-clicks on the Google search results for 'Java StringBuilder reverse
      method' and opens a new tab.
    - The agent reads the content of the newly opened tab on 'Java StringBuilder reverse
      method'.
    - The agent generates a text prompt with suggestions to optimize the palindrome
      detection algorithm.
    - The user remains focused on making changes in 'PalindromeChecker.java' within
      IntelliJ IDEA.
    - The agent lists files in the project directory to find any related utility classes.
    - The user types 'charAt palindrome' into the search bar on the Oracle Java Documentation
      site and presses enter.
    - The agent reads the output of a unit test run for 'PalindromeChecker.java' in
      the terminal.
    - The user scrolls through code examples in a blog post on 'Efficient Java Algorithms'.
    theme: E-commerce Backend Development
  user:
    description: Anil Kumar, a 31-year-old backend developer at an e-commerce company,
      has expertise in Java, NoSQL databases, API development, and microservices architecture.
      He focuses on designing efficient backend services and improving data retrieval
      times.
    goal: Implement a Java algorithm to detect if a string is a palindrome as part
      of a service that processes customer reviews and feedback.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'text_analysis.analyze_sentiment(text: str) -> str'
    - 'text_generation.generate_response(prompt: str) -> str'
    - 'code_analysis.syntax_check(code: str) -> str'
    - 'code_refactoring.optimize_code(code: str) -> str'
    - 'api_testing.send_request(url: str, params: dict) -> dict'
    - 'api_debugging.log_error(error_message: str) -> None'
    - 'documentation.generate_api_doc(api_description: str) -> str'
    description: Alex Turner, a junior backend developer, is working from his apartment
      in the evening. He is focused on learning Flask by building a simple API that
      takes two numbers as query parameters and returns their sum. He is using a high-performance
      laptop and Visual Studio Code for development. He frequently refers to Flask
      documentation and uses Postman for testing his API.
    entities:
    - Laptop
    - Visual Studio Code
    - Flask Documentation
    - Postman
    - API Server
    - Local Network
    - Mentor
    - Online Coding Community
    events_example:
    - The agent opens the browser and navigates to Flask's official documentation
      page.
    - The user types 'cmd terminal' and runs 'flask run' in Visual Studio Code.
    - The agent opens the file `app.py` and identifies a missing import statement.
    - The agent reads a received email with a query about API integration and logs
      it into a project tracker.
    - The user switches to a Stack Overflow page discussing error handling in Flask
      APIs.
    - The agent analyzes the opened code file and highlights unused variables.
    - The user clicked on a GitHub issue related to Flask route errors.
    - The agent generates a response to the query 'How to validate input in Flask?'
      and provides a code snippet.
    - The user visits 'https://www.postman.com/' to test their Flask API.
    - The agent logs an error encountered during the API run into a specified error
      log file.
    - The user navigated to a search engine and typed 'Flask API input validation
      tutorial'.
    - The agent saves changes to the file 'routes.py' after adding new error handling
      logic.
    - The user interacts with a coding forum by scrolling and responding to a thread
      about Flask best practices.
    - The agent sends a GET request to the user's API endpoint with query parameters
      for testing.
    - The agent checks the syntax of the newly written error handling function in
      'views.py'.
    - The user types 'pip install -U flask' in the terminal within Visual Studio Code.
    - The agent suggests an optimization for the current Flask route implementation.
    - The user opens a YouTube tutorial on designing RESTful APIs with Flask.
    - The agent fetches Flask API documentation and prepares a brief summary for the
      user.
    - The user clicks on a link from Google search results for 'Getting started with
      Flask'.
    - The agent documents the new API endpoint, including parameters and return types
      in 'README.md'.
    - The user scrolled through a blog post on handling exceptions in Python.
    - The agent performs a code refactor on the opened 'app.py' to improve readability.
    - The user visited 'https://pypi.org/project/Flask/' for version details.
    - The agent opens a GitHub repository to fetch sample code for a similar API.
    - The user switches to the terminal and types 'python -m unittest discover' to
      run all tests.
    - The agent identifies security vulnerabilities in the code and suggests fixes.
    - The user scrolls through Flask's documentation to validate their usage of query
      parameters.
    - The agent opens the 'requirements.txt' file and ensures all dependencies are
      up-to-date.
    - The user typed 'Flask API deployment' into the browser's search bar and pressed
      Enter.
    - The agent opens the 'config.py' file to add new configuration settings for the
      Flask app.
    - The user interacts with a coding tutorial by watching a video on handling HTTP
      methods in Flask.
    - The agent scans the project directory and lists all Python files for the user.
    - The user checks a notification from a coding challenge site about available
      Flask exercises.
    theme: Junior Developer Learning Flask
  user:
    description: Alex Turner, a 28-year-old junior backend developer, is working on
      improving his Flask skills by building a simple API. He is using a high-performance
      laptop and Visual Studio Code, frequently referring to Flask documentation and
      using Postman for testing.
    goal: Write a Python code using Flask to create an API that takes two numbers
      as query parameters and returns their sum. Include error handling for non-numeric
      input.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'text_analysis.analyze_sentiment(text: str) -> str'
    - 'text_generation.generate_response(prompt: str) -> str'
    - 'code_analysis.syntax_check(code: str) -> str'
    - 'code_refactoring.optimize_code(code: str) -> str'
    - 'api_testing.send_request(url: str, params: dict) -> dict'
    - 'api_debugging.log_error(error_message: str) -> None'
    - 'documentation.generate_api_doc(api_description: str) -> str'
    description: Maria Sanchez, a data scientist, is working from her modern home
      office in the afternoon. She is integrating her data processing scripts with
      a Flask API to perform arithmetic operations and visualize data. She uses a
      high-end desktop setup with multi-monitor configuration, Jupyter notebooks for
      prototyping, and a front-end dashboard for visualization.
    entities:
    - Desktop Computer
    - Python Scripts
    - Jupyter Notebooks
    - Dashboard Interface
    - Flask API
    - Data Models
    - Visualization Tools
    - Data Science Team
    - Online Data Science Forums and Blogs
    - Family
    events_example:
    - The agent opens the browser and navigates to Flask's official documentation
      page.
    - The user types 'cmd terminal' and runs 'flask run' in Visual Studio Code.
    - The agent opens the file `app.py` and identifies a missing import statement.
    - The agent reads a received email with a query about API integration and logs
      it into a project tracker.
    - The user switches to a Stack Overflow page discussing error handling in Flask
      APIs.
    - The agent analyzes the opened code file and highlights unused variables.
    - The user clicked on a GitHub issue related to Flask route errors.
    - The agent generates a response to the query 'How to validate input in Flask?'
      and provides a code snippet.
    - The user visits 'https://www.postman.com/' to test their Flask API.
    - The agent logs an error encountered during the API run into a specified error
      log file.
    - The user navigated to a search engine and typed 'Flask API input validation
      tutorial'.
    - The agent saves changes to the file 'routes.py' after adding new error handling
      logic.
    - The user interacts with a coding forum by scrolling and responding to a thread
      about Flask best practices.
    - The agent sends a GET request to the user's API endpoint with query parameters
      for testing.
    - The agent checks the syntax of the newly written error handling function in
      'views.py'.
    - The user types 'pip install -U flask' in the terminal within Visual Studio Code.
    - The agent suggests an optimization for the current Flask route implementation.
    - The user opens a YouTube tutorial on designing RESTful APIs with Flask.
    - The agent fetches Flask API documentation and prepares a brief summary for the
      user.
    - The user clicks on a link from Google search results for 'Getting started with
      Flask'.
    - The agent documents the new API endpoint, including parameters and return types
      in 'README.md'.
    - The user scrolled through a blog post on handling exceptions in Python.
    - The agent performs a code refactor on the opened 'app.py' to improve readability.
    - The user visited 'https://pypi.org/project/Flask/' for version details.
    - The agent opens a GitHub repository to fetch sample code for a similar API.
    - The user switches to the terminal and types 'python -m unittest discover' to
      run all tests.
    - The agent identifies security vulnerabilities in the code and suggests fixes.
    - The user scrolls through Flask's documentation to validate their usage of query
      parameters.
    - The agent opens the 'requirements.txt' file and ensures all dependencies are
      up-to-date.
    - The user typed 'Flask API deployment' into the browser's search bar and pressed
      Enter.
    - The agent opens the 'config.py' file to add new configuration settings for the
      Flask app.
    - The user interacts with a coding tutorial by watching a video on handling HTTP
      methods in Flask.
    - The agent scans the project directory and lists all Python files for the user.
    - The user checks a notification from a coding challenge site about available
      Flask exercises.
    theme: Data Scientist Integrating Flask
  user:
    description: Maria Sanchez, a 35-year-old data scientist, is integrating her data
      processing scripts with a Flask API. She is using a high-end desktop setup with
      multi-monitor configuration, Jupyter notebooks for prototyping, and a front-end
      dashboard for visualization.
    goal: Write a Python code using Flask to create an API that takes two numbers
      as query parameters and returns their sum. Include error handling for non-numeric
      input.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'text_analysis.analyze_sentiment(text: str) -> str'
    - 'text_generation.generate_response(prompt: str) -> str'
    - 'code_analysis.syntax_check(code: str) -> str'
    - 'code_refactoring.optimize_code(code: str) -> str'
    - 'api_testing.send_request(url: str, params: dict) -> dict'
    - 'api_debugging.log_error(error_message: str) -> None'
    - 'documentation.generate_api_doc(api_description: str) -> str'
    description: John Miller, a senior software engineer, is working from his corporate
      office in the late morning. He is developing a Flask API for demonstration purposes
      to junior team members, emphasizing best practices in code structure and error
      handling. He uses a high-performance desktop with multiple monitors, advanced
      development tools, and security libraries.
    entities:
    - Workstation
    - Development Tools
    - Security Libraries
    - Testing Tools
    - Flask Application
    - Junior Developers
    - Development Environment
    - Project Requirements
    - Security Compliance Standards
    - Peer Reviews
    events_example:
    - The agent opens the browser and navigates to Flask's official documentation
      page.
    - The user types 'cmd terminal' and runs 'flask run' in Visual Studio Code.
    - The agent opens the file `app.py` and identifies a missing import statement.
    - The agent reads a received email with a query about API integration and logs
      it into a project tracker.
    - The user switches to a Stack Overflow page discussing error handling in Flask
      APIs.
    - The agent analyzes the opened code file and highlights unused variables.
    - The user clicked on a GitHub issue related to Flask route errors.
    - The agent generates a response to the query 'How to validate input in Flask?'
      and provides a code snippet.
    - The user visits 'https://www.postman.com/' to test their Flask API.
    - The agent logs an error encountered during the API run into a specified error
      log file.
    - The user navigated to a search engine and typed 'Flask API input validation
      tutorial'.
    - The agent saves changes to the file 'routes.py' after adding new error handling
      logic.
    - The user interacts with a coding forum by scrolling and responding to a thread
      about Flask best practices.
    - The agent sends a GET request to the user's API endpoint with query parameters
      for testing.
    - The agent checks the syntax of the newly written error handling function in
      'views.py'.
    - The user types 'pip install -U flask' in the terminal within Visual Studio Code.
    - The agent suggests an optimization for the current Flask route implementation.
    - The user opens a YouTube tutorial on designing RESTful APIs with Flask.
    - The agent fetches Flask API documentation and prepares a brief summary for the
      user.
    - The user clicks on a link from Google search results for 'Getting started with
      Flask'.
    - The agent documents the new API endpoint, including parameters and return types
      in 'README.md'.
    - The user scrolled through a blog post on handling exceptions in Python.
    - The agent performs a code refactor on the opened 'app.py' to improve readability.
    - The user visited 'https://pypi.org/project/Flask/' for version details.
    - The agent opens a GitHub repository to fetch sample code for a similar API.
    - The user switches to the terminal and types 'python -m unittest discover' to
      run all tests.
    - The agent identifies security vulnerabilities in the code and suggests fixes.
    - The user scrolls through Flask's documentation to validate their usage of query
      parameters.
    - The agent opens the 'requirements.txt' file and ensures all dependencies are
      up-to-date.
    - The user typed 'Flask API deployment' into the browser's search bar and pressed
      Enter.
    - The agent opens the 'config.py' file to add new configuration settings for the
      Flask app.
    - The user interacts with a coding tutorial by watching a video on handling HTTP
      methods in Flask.
    - The agent scans the project directory and lists all Python files for the user.
    - The user checks a notification from a coding challenge site about available
      Flask exercises.
    theme: Senior Engineer Demonstrating Flask
  user:
    description: John Miller, a 40-year-old senior software engineer, is developing
      a Flask API for demonstration purposes. He is using a high-performance desktop
      with multiple monitors, advanced development tools, and security libraries.
    goal: Write a Python code using Flask to create an API that takes two numbers
      as query parameters and returns their sum. Include error handling for non-numeric
      input.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a shell command in the terminal.
      parameters:
        command: string
      return_values:
        exit_code: integer
        output: string
    - action: file.open
      description: Opens a file at the specified path for reading.
      parameters:
        file_path: string
      return_values:
        file_content: string
    - action: file.save
      description: Saves the provided content to a file at the specified path.
      parameters:
        content: string
        file_path: string
      return_values:
        error: string
        success: boolean
    - action: browser.open
      description: Opens a web page at the specified URL in the default browser.
      parameters:
        url: string
      return_values:
        error: string
        success: boolean
    - action: file.upload
      description: Uploads a file from the local file system to a remote server or
        cloud storage.
      parameters:
        file_path: string
      return_values:
        error: string
        upload_status: string
    - action: image.analyze
      description: Analyzes an image file to extract relevant information.
      parameters:
        image_path: string
      return_values:
        error: string
        object_description: string
        text_content: string
    - action: text.generate
      description: Generates text based on a provided prompt.
      parameters:
        prompt: string
      return_values:
        error: string
        generated_text: string
    - action: code.refactor
      description: Refactors code in the specified file based on provided rules.
      parameters:
        file_path: string
        rules: dictionary
      return_values:
        error: string
        refactored_code: string
    - action: test.run
      description: Runs a suite of tests on the user's code.
      parameters:
        test_suite: string
      return_values:
        error: string
        test_results: string
    - action: code.suggest_improvements
      description: Analyzes the code in the specified file and suggests improvements.
      parameters:
        file_path: string
      return_values:
        error: string
        improvement_suggestions: list of strings
    description: The user is working on developing a fitness app using SwiftUI. The
      environment is a home office setup with a MacBook Pro, Xcode IDE, and various
      online resources. The user is focused on creating an engaging and user-friendly
      interface for presenting fitness tutorials in a list format.
    entities:
    - MacBook Pro (16-inch, M1 Pro)
    - Xcode IDE
    - Apple Developer Documentation
    - Fitness Tutorial Data Source
    - Simulator and Connected iOS Devices
    - Design Tools (Sketch, Figma)
    - Online Coding Communities (Stack Overflow, GitHub)
    events_example:
    - The agent opens the browser to search for tutorials on implementing swipe actions
      in SwiftUI.
    - The user switches back to Xcode and begins typing new properties in the FitnessTutorial
      struct.
    - The agent reads the SwiftUI documentation and highlights the section about creating
      custom List rows.
    - The agent opens the file ContentView.swift and suggests adding an onTapGesture
      modifier to list items.
    - The user stays on the search results page for 'SwiftUI navigation link examples'
      on Google.
    - The agent opens Xcode and runs the swift build command in the terminal.
    - The user pauses coding and switches to Figma to update the fitness app mockup
      design.
    - The agent scans the ContentView.swift file and identifies unused import statements.
    - The user opens a new tab in the web browser and searches for 'SwiftUI image
      resizing'.
    - The agent saves the updated code file ContentView.swift with the added navigation
      links.
    - The user clicked to view a SwiftUI tutorial video on YouTube.
    - The agent extracts data from a JSON file containing fitness tutorial details.
    - The user switches back to Xcode, reviews the preview of the ContentView.swift,
      and notices layout issues.
    - The agent suggests a code snippet for implementing a search bar within the list
      view.
    - The user opens a Stack Overflow page discussing 'SwiftUI list interaction best
      practices'.
    - The agent opens the file ContentModel.swift and identifies a typo in a function
      name.
    - The user navigates to the Apple Developer forums to ask a question about SwiftUI
      animations.
    - The agent highlights best practice code examples for HStack alignment in the
      SwiftUI documentation.
    - The user scrolls through Google search results for 'SwiftUI List item selection'.
    - The agent opens the file DetailView.swift and suggests optimizing an image rendering
      function.
    - The user clicked on a search result titled 'SwiftUI Complex List Examples' on
      Medium.
    - The agent uploads the project file to a remote git repository.
    - The user types a question about integrating Core Data with SwiftUI in a Slack
      channel.
    - The agent checks for syntax errors in the ContentView.swift file and reports
      an unmatched bracket.
    - The user downloads a sample project from GitHub that demonstrates advanced SwiftUI
      layouts.
    - The agent suggests improvements to the data fetching logic in ContentView.swift.
    - The user opens a new tab and searches for 'SwiftUI pull-to-refresh'.
    - The agent schedules a simulated build in Xcode after reviewing the project settings.
    - The user saves a snippet from an online tutorial to their code notes.
    - The agent detects potential performance issues when the user runs the app in
      the simulator.
    theme: SwiftUI Fitness App Development
  user:
    description: The user is an intermediate Swift and SwiftUI developer working on
      a fitness app. They are focused on creating an engaging and user-friendly list
      view for fitness tutorials. The user frequently consults documentation, online
      resources, and design tools to achieve their goal.
    goal: Use SwiftUI to design a user interface that presents fitness tutorials in
      a list format.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_html_css_snippet(requirements)
    - debug_code(code_snippet)
    - search_documentation(query)
    - analyze_design(image_path)
    - extract_text(image_path)
    - compare_designs(image_path_1, image_path_2)
    - generate_css_from_design(image_path)
    - code_review(file_path)
    - create_responsive_menu(requirements)
    description: Alex Johnson is working in his home office in a studio apartment
      in Brooklyn, New York. It's early evening, around 6:30 PM. The environment is
      cozy with a dual-monitor setup, and background music is playing softly. Alex
      is engaged in a freelance project, tasked with creating a complex multi-level
      navigation menu for a client's website.
    entities:
    - VSCode Editor
    - Dual Monitors
    - Smartphone
    - Herbal Tea
    - Client's Website
    - Browser Dev Tools
    - Online Documentation and Forums
    - Client Specifications
    - Online Coding Community
    - Background Music
    events_example:
    - The agent opens a new tab in the browser and navigates to the CSS-Tricks homepage.
    - The agent detects a syntax error in the CSS file and suggests corrections to
      the user.
    - The agent updates the design prototype with new CSS from an analyzed image.
    - The user scrolls through the browser tab displaying MDN documentation on CSS
      transitions.
    - The user types a new JavaScript function to handle dropdown visibility in 'menu.js'
      using VSCode.
    - The user opens the file 'style.css' in VSCode and reviews the current hover
      effect implementations.
    - The agent extracts text from an image containing CSS grid layout examples.
    - The user navigates between open tabs related to responsive web design tutorials.
    - The agent performs a search for best practices in multilevel navigation menu
      accessibility.
    - The user saves changes to the HTML file implementing the navigation structure
      while ensuring proper indentation.
    theme: Freelance Web Developer's Workspace
  user:
    description: Alex Johnson is a 28-year-old freelance web developer with 3 years
      of experience. He has intermediate knowledge of HTML, CSS, and JavaScript, and
      is familiar with frameworks like Bootstrap and Tailwind. He enjoys responsive
      design and user experience, often experimenting with new CSS frameworks. Alex
      prefers using lightweight text editors like VSCode and frequently references
      online documentation and coding forums.
    goal: Design a complex multi-level navigation menu using HTML/CSS with submenus
      and hover effects.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_html_css_snippet(requirements)
    - debug_code(code_snippet)
    - search_documentation(query)
    - analyze_design(image_path)
    - extract_text(image_path)
    - compare_designs(image_path_1, image_path_2)
    - generate_css_from_design(image_path)
    - code_review(file_path)
    - create_responsive_menu(requirements)
    description: Samantha Lee is working in an open office at a tech startup in San
      Francisco, CA. It's morning, around 10:00 AM. The collaborative workspace is
      bustling with team discussions. Samantha has a dual-monitor setup with WebStorm
      on one screen and team communication tools on the other. She is tasked with
      developing a complex multi-level navigation menu using React and CSS Modules.
    entities:
    - WebStorm IDE
    - Dual Monitors
    - Coffee Mug
    - Sketch/Adobe XD
    - "Tech Startup\u2019s Website"
    - React Components
    - Code Repository
    - Team Feedback
    - Project Deadlines
    - Startup Culture
    events_example:
    - The agent opens a new tab in the browser and navigates to the CSS-Tricks homepage.
    - The agent detects a syntax error in the CSS file and suggests corrections to
      the user.
    - The agent updates the design prototype with new CSS from an analyzed image.
    - The user scrolls through the browser tab displaying MDN documentation on CSS
      transitions.
    - The user types a new JavaScript function to handle dropdown visibility in 'menu.js'
      using VSCode.
    - The user opens the file 'style.css' in VSCode and reviews the current hover
      effect implementations.
    - The agent extracts text from an image containing CSS grid layout examples.
    - The user navigates between open tabs related to responsive web design tutorials.
    - The agent performs a search for best practices in multilevel navigation menu
      accessibility.
    - The user saves changes to the HTML file implementing the navigation structure
      while ensuring proper indentation.
    theme: Tech Startup Office
  user:
    description: Samantha Lee is a 35-year-old front-end engineer at a tech startup.
      She has advanced knowledge of HTML, CSS, JavaScript, and React, and is experienced
      in web design and user experience. Samantha has a strong understanding of accessibility
      standards and prefers using IDEs like WebStorm. She enjoys creating interactive
      user interfaces and participates actively in tech meetups and hackathons.
    goal: Develop a complex multi-level navigation menu using React and CSS Modules,
      ensuring modular and maintainable code.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_html_css_snippet(requirements)
    - debug_code(code_snippet)
    - search_documentation(query)
    - analyze_design(image_path)
    - extract_text(image_path)
    - compare_designs(image_path_1, image_path_2)
    - generate_css_from_design(image_path)
    - code_review(file_path)
    - create_responsive_menu(requirements)
    description: Michael Ross is working in a large digital agency office in Chicago,
      IL. It's afternoon, around 2:30 PM. Michael has a large monitor setup with design
      tools open on one screen and a text editor on the other. He is tasked with designing
      and coding a complex, multi-level navigation menu with HTML/CSS, focusing on
      user experience and visual appeal.
    entities:
    - Design Tools (Figma/Sketch)
    - Text Editor (Sublime Text or VSCode)
    - Large Monitor Setup
    - User Testing Devices
    - "Agency\u2019s Client Websites"
    - Prototypes and Wireframes
    - Design Systems
    - User Feedback
    - Client Requirements
    - Industry Trends
    events_example:
    - The agent opens a new tab in the browser and navigates to the CSS-Tricks homepage.
    - The agent detects a syntax error in the CSS file and suggests corrections to
      the user.
    - The agent updates the design prototype with new CSS from an analyzed image.
    - The user scrolls through the browser tab displaying MDN documentation on CSS
      transitions.
    - The user types a new JavaScript function to handle dropdown visibility in 'menu.js'
      using VSCode.
    - The user opens the file 'style.css' in VSCode and reviews the current hover
      effect implementations.
    - The agent extracts text from an image containing CSS grid layout examples.
    - The user navigates between open tabs related to responsive web design tutorials.
    - The agent performs a search for best practices in multilevel navigation menu
      accessibility.
    - The user saves changes to the HTML file implementing the navigation structure
      while ensuring proper indentation.
    theme: Digital Agency Office
  user:
    description: Michael Ross is a 42-year-old senior UX/UI designer at a major digital
      agency. He is an expert in HTML, CSS, Sass, and design tools like Sketch and
      Figma. Michael is proficient in user testing and wireframing and familiar with
      JavaScript frameworks. He enjoys accessibility and inclusive design, color theory
      in web design, and advanced CSS animations and transitions.
    goal: Design and code a complex, multi-level navigation menu with HTML/CSS, focusing
      on user experience and visual appeal.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'file_list(directory_path: str) -> List[str]'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'generate_code(prompt: str) -> str'
    - 'generate_documentation(code_snippet: str) -> str'
    - 'data_clean(data: str, strategy: str = ''default'') -> str'
    - 'data_summary(data: str) -> str'
    - 'collaborate_request(peer: str, code: str) -> str'
    - 'train_model(data: str, model_type: str) -> str'
    - 'visualize_data(data: str, chart_type: str) -> str'
    description: Emily Thompson, a data analyst at a marketing firm, is working on
      cleaning a list of email addresses by removing invalid and duplicate entries.
      She is in her home office on a rainy Saturday morning, using her Dell XPS 15
      laptop and an external monitor. Her desk is organized with sticky notes and
      a standing desk setup.
    entities:
    - Laptop (Dell XPS 15)
    - External Monitor
    - Standing Desk
    - Stationery Organizer
    - Pandas DataFrame
    - SQL Database
    - Excel File
    - Project Management Tool (Trello)
    - Company's Marketing Software
    - Team Chat (Slack)
    events_example:
    - The user opens 'email_cleaner.py' in Visual Studio Code to start editing the
      Python script.
    - The agent searches online for 'regex pattern for validating email addresses'
      using the browser.
    - The user copies a regex pattern from a webpage and pastes it into their code
      file.
    - The user runs the `email_cleaner.py` script in the terminal to test the function.
    - The user encounters a runtime error and examines the console output to determine
      the cause.
    - The agent suggests an alternative library to use for email validation based
      on the error message.
    - The agent saves the modified email list to 'cleaned_emails.csv' after processing.
    - The user checks the contents of 'cleaned_emails.csv' to verify its accuracy.
    - The agent opens the terminal and executes a Git command to commit changes to
      the repository.
    - The user navigates to the team's Slack channel to share the cleaned email function
      with colleagues.
    - The agent automatically sorts the email list in alphabetical order before saving.
    - The user switches to a Python documentation tab in the browser to look up the
      `re` module.
    - The agent highlights a syntax error in VSCode and suggests corrections.
    - The user uploads the cleaned email list to the email marketing tool through
      its web interface.
    - The agent generates documentation comments for the updated function in `email_cleaner.py`.
    - The user opens the VSCode terminal and types `pytest tests/` to run test cases
      on the email cleaner.
    - The agent fetches the latest email list from a database and displays it for
      user review.
    - The user downloads a CSV file from their email containing sample email data
      to be cleaned.
    - The agent logs each invalid email entry in a separate text file for further
      analysis.
    - The user clicks through the search results on 'how to clean email lists' in
      their web browser.
    theme: Data Analyst Email Cleaning
  user:
    description: Emily Thompson, a 29-year-old data analyst at a marketing firm, is
      proficient with Python and data manipulation libraries like Pandas. She is working
      from her home office, focusing on cleaning an email list for a marketing campaign.
    goal: Create a Python function to clean a list of email addresses by removing
      invalid and duplicate entries.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'file_list(directory_path: str) -> List[str]'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'generate_code(prompt: str) -> str'
    - 'generate_documentation(code_snippet: str) -> str'
    - 'data_clean(data: str, strategy: str = ''default'') -> str'
    - 'data_summary(data: str) -> str'
    - 'collaborate_request(peer: str, code: str) -> str'
    - 'train_model(data: str, model_type: str) -> str'
    - 'visualize_data(data: str, chart_type: str) -> str'
    description: Alex Martinez, a full-stack web developer at a tech startup, is tasked
      with integrating an email cleaning function into a Django application. He is
      working from his home office using a MacBook Pro and a mechanical keyboard.
    entities:
    - MacBook Pro
    - Mechanical Keyboard
    - Smartphone (iPhone)
    - Django Framework
    - Automated Testing Tools
    - Version Control System (GitHub)
    - CI/CD Pipeline
    - Web Hosting Service (Heroku)
    - IDE (PyCharm)
    events_example:
    - The user opens 'email_cleaner.py' in Visual Studio Code to start editing the
      Python script.
    - The agent searches online for 'regex pattern for validating email addresses'
      using the browser.
    - The user copies a regex pattern from a webpage and pastes it into their code
      file.
    - The user runs the `email_cleaner.py` script in the terminal to test the function.
    - The user encounters a runtime error and examines the console output to determine
      the cause.
    - The agent suggests an alternative library to use for email validation based
      on the error message.
    - The agent saves the modified email list to 'cleaned_emails.csv' after processing.
    - The user checks the contents of 'cleaned_emails.csv' to verify its accuracy.
    - The agent opens the terminal and executes a Git command to commit changes to
      the repository.
    - The user navigates to the team's Slack channel to share the cleaned email function
      with colleagues.
    - The agent automatically sorts the email list in alphabetical order before saving.
    - The user switches to a Python documentation tab in the browser to look up the
      `re` module.
    - The agent highlights a syntax error in VSCode and suggests corrections.
    - The user uploads the cleaned email list to the email marketing tool through
      its web interface.
    - The agent generates documentation comments for the updated function in `email_cleaner.py`.
    - The user opens the VSCode terminal and types `pytest tests/` to run test cases
      on the email cleaner.
    - The agent fetches the latest email list from a database and displays it for
      user review.
    - The user downloads a CSV file from their email containing sample email data
      to be cleaned.
    - The agent logs each invalid email entry in a separate text file for further
      analysis.
    - The user clicks through the search results on 'how to clean email lists' in
      their web browser.
    theme: Full-Stack Developer Email Cleaning
  user:
    description: Alex Martinez, a 35-year-old full-stack web developer at a tech startup,
      is proficient in Python and web development frameworks like Django. He is working
      from his home office, focusing on integrating and testing an email cleaning
      function.
    goal: Integrate an email cleaning function into a Django application.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'file_list(directory_path: str) -> List[str]'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'generate_code(prompt: str) -> str'
    - 'generate_documentation(code_snippet: str) -> str'
    - 'data_clean(data: str, strategy: str = ''default'') -> str'
    - 'data_summary(data: str) -> str'
    - 'collaborate_request(peer: str, code: str) -> str'
    - 'train_model(data: str, model_type: str) -> str'
    - 'visualize_data(data: str, chart_type: str) -> str'
    description: Ryan Carter, a junior software developer at a fintech company, is
      learning to create a Python function to clean a list of email addresses. He
      is working from his desktop computer with a beginner-friendly Linux distribution.
    entities:
    - Desktop Computer
    - Headset
    - Sticky Notes
    - Learning Platform (Codecademy)
    - Git
    - IDE (Visual Studio Code)
    - Documentation and Tutorials
    - Messaging App (Microsoft Teams)
    events_example:
    - The user opens 'email_cleaner.py' in Visual Studio Code to start editing the
      Python script.
    - The agent searches online for 'regex pattern for validating email addresses'
      using the browser.
    - The user copies a regex pattern from a webpage and pastes it into their code
      file.
    - The user runs the `email_cleaner.py` script in the terminal to test the function.
    - The user encounters a runtime error and examines the console output to determine
      the cause.
    - The agent suggests an alternative library to use for email validation based
      on the error message.
    - The agent saves the modified email list to 'cleaned_emails.csv' after processing.
    - The user checks the contents of 'cleaned_emails.csv' to verify its accuracy.
    - The agent opens the terminal and executes a Git command to commit changes to
      the repository.
    - The user navigates to the team's Slack channel to share the cleaned email function
      with colleagues.
    - The agent automatically sorts the email list in alphabetical order before saving.
    - The user switches to a Python documentation tab in the browser to look up the
      `re` module.
    - The agent highlights a syntax error in VSCode and suggests corrections.
    - The user uploads the cleaned email list to the email marketing tool through
      its web interface.
    - The agent generates documentation comments for the updated function in `email_cleaner.py`.
    - The user opens the VSCode terminal and types `pytest tests/` to run test cases
      on the email cleaner.
    - The agent fetches the latest email list from a database and displays it for
      user review.
    - The user downloads a CSV file from their email containing sample email data
      to be cleaned.
    - The agent logs each invalid email entry in a separate text file for further
      analysis.
    - The user clicks through the search results on 'how to clean email lists' in
      their web browser.
    theme: Junior Developer Email Cleaning
  user:
    description: Ryan Carter, a 23-year-old junior software developer at a fintech
      company, is learning Python and basic coding practices. He is working from his
      desktop computer, focusing on creating and documenting an email cleaning function.
    goal: Create a Python function to clean a list of email addresses by removing
      invalid and duplicate entries.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'file_list(directory_path: str) -> List[str]'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'generate_code(prompt: str) -> str'
    - 'generate_documentation(code_snippet: str) -> str'
    - 'data_clean(data: str, strategy: str = ''default'') -> str'
    - 'data_summary(data: str) -> str'
    - 'collaborate_request(peer: str, code: str) -> str'
    - 'train_model(data: str, model_type: str) -> str'
    - 'visualize_data(data: str, chart_type: str) -> str'
    description: Priya Sharma, a senior data scientist at a healthcare analytics company,
      is incorporating an email cleaning function into an ETL pipeline. She is working
      from her high-performance workstation equipped with multiple CPUs and GPUs.
    entities:
    - High-Performance Workstation
    - Whiteboard
    - Bookshelf
    - ETL Pipeline
    - Machine Learning Models
    - Big Data Tools (Hadoop, Spark)
    - Visualization Tools (Tableau, Seaborn)
    - Cloud Storage (Amazon S3)
    - Jupyter Notebooks
    events_example:
    - The user opens 'email_cleaner.py' in Visual Studio Code to start editing the
      Python script.
    - The agent searches online for 'regex pattern for validating email addresses'
      using the browser.
    - The user copies a regex pattern from a webpage and pastes it into their code
      file.
    - The user runs the `email_cleaner.py` script in the terminal to test the function.
    - The user encounters a runtime error and examines the console output to determine
      the cause.
    - The agent suggests an alternative library to use for email validation based
      on the error message.
    - The agent saves the modified email list to 'cleaned_emails.csv' after processing.
    - The user checks the contents of 'cleaned_emails.csv' to verify its accuracy.
    - The agent opens the terminal and executes a Git command to commit changes to
      the repository.
    - The user navigates to the team's Slack channel to share the cleaned email function
      with colleagues.
    - The agent automatically sorts the email list in alphabetical order before saving.
    - The user switches to a Python documentation tab in the browser to look up the
      `re` module.
    - The agent highlights a syntax error in VSCode and suggests corrections.
    - The user uploads the cleaned email list to the email marketing tool through
      its web interface.
    - The agent generates documentation comments for the updated function in `email_cleaner.py`.
    - The user opens the VSCode terminal and types `pytest tests/` to run test cases
      on the email cleaner.
    - The agent fetches the latest email list from a database and displays it for
      user review.
    - The user downloads a CSV file from their email containing sample email data
      to be cleaned.
    - The agent logs each invalid email entry in a separate text file for further
      analysis.
    - The user clicks through the search results on 'how to clean email lists' in
      their web browser.
    theme: Senior Data Scientist Email Cleaning
  user:
    description: Priya Sharma, a 42-year-old senior data scientist at a healthcare
      analytics company, is an expert in Python and machine learning. She is working
      from her high-performance workstation, focusing on data preprocessing and model
      training.
    goal: Incorporate an email cleaning function into an ETL pipeline.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'file_list(directory_path: str) -> List[str]'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'generate_code(prompt: str) -> str'
    - 'generate_documentation(code_snippet: str) -> str'
    - 'data_clean(data: str, strategy: str = ''default'') -> str'
    - 'data_summary(data: str) -> str'
    - 'collaborate_request(peer: str, code: str) -> str'
    - 'train_model(data: str, model_type: str) -> str'
    - 'visualize_data(data: str, chart_type: str) -> str'
    description: Mark Lee, an IT consultant and freelance developer, is deploying
      an email cleaning function as a serverless function on AWS Lambda. He is working
      from his home office using a multi-monitor setup and an iPad Pro for quick tasks.
    entities:
    - Tablet (iPad Pro)
    - Multi-Monitor Setup
    - External Hard Drive
    - Cloud Platforms (AWS, Azure)
    - Cybersecurity Tools
    - Web Frameworks
    - Client Management Software
    - Serverless Functions (AWS Lambda)
    events_example:
    - The user opens 'email_cleaner.py' in Visual Studio Code to start editing the
      Python script.
    - The agent searches online for 'regex pattern for validating email addresses'
      using the browser.
    - The user copies a regex pattern from a webpage and pastes it into their code
      file.
    - The user runs the `email_cleaner.py` script in the terminal to test the function.
    - The user encounters a runtime error and examines the console output to determine
      the cause.
    - The agent suggests an alternative library to use for email validation based
      on the error message.
    - The agent saves the modified email list to 'cleaned_emails.csv' after processing.
    - The user checks the contents of 'cleaned_emails.csv' to verify its accuracy.
    - The agent opens the terminal and executes a Git command to commit changes to
      the repository.
    - The user navigates to the team's Slack channel to share the cleaned email function
      with colleagues.
    - The agent automatically sorts the email list in alphabetical order before saving.
    - The user switches to a Python documentation tab in the browser to look up the
      `re` module.
    - The agent highlights a syntax error in VSCode and suggests corrections.
    - The user uploads the cleaned email list to the email marketing tool through
      its web interface.
    - The agent generates documentation comments for the updated function in `email_cleaner.py`.
    - The user opens the VSCode terminal and types `pytest tests/` to run test cases
      on the email cleaner.
    - The agent fetches the latest email list from a database and displays it for
      user review.
    - The user downloads a CSV file from their email containing sample email data
      to be cleaned.
    - The agent logs each invalid email entry in a separate text file for further
      analysis.
    - The user clicks through the search results on 'how to clean email lists' in
      their web browser.
    theme: IT Consultant Email Cleaning
  user:
    description: Mark Lee, a 47-year-old IT consultant and freelance developer, is
      proficient in Python and cloud platforms. He is working from his home office,
      focusing on deploying and securing an email cleaning function.
    goal: Deploy an email cleaning function as a serverless function on AWS Lambda.
- environment:
    agent_ops:
    - 'db_query(query: str) -> pandas.DataFrame'
    - 'generate_sql(query_description: str) -> str'
    - 'suggest_optimization(query: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'browser_open(url: str) -> None'
    - 'browser_screenshot(url: str, save_path: str) -> None'
    - 'generate_chart(data: pandas.DataFrame, chart_type: str, save_path: str) ->
      None'
    - 'analyze_trends(data: pandas.DataFrame, column: str) -> dict'
    - 'terminal_run(command: str) -> str'
    - 'api_call(endpoint: str, method: str, headers: dict, data: dict = None) -> dict'
    - 'send_message(destination: str, message: str) -> None'
    - 'schedule_meeting(participants: list, subject: str, date_time: str) -> None'
    description: Emily Johnson, an intermediate data analyst, is working from her
      home office on a monthly sales report. She is focused on identifying the top
      10 best-selling products and calculating their total sales using SQL.
    entities:
    - SQL Client Software
    - Spreadsheets
    - Home Office Equipment
    - E-commerce Database
    - Data Visualization Software
    - Report Management System
    - Manager and Team Feedback
    - Sales Targets and Quarterly Goals
    - Market Insights and Consumer Trends
    events_example:
    - The agent opens the browser and searches for tutorials on complex SQL joins.
    - The user reads a tutorial on advanced SQL aggregate functions on a database
      forum.
    - The agent identifies syntax errors in the SQL query and suggests corrections.
    - The user opens the file `sales_report.sql` and reviews its contents.
    - The agent saves the optimized SQL query to the file `sales_report.sql`.
    - The agent reads through received emails and schedules a meeting with the sales
      department for the user.
    - The user navigates through search results for 'SQL query optimization techniques'
      and reads a blog post from a reputable tech site.
    - "The agent generates a bar chart based on the top 10 products\u2019 sales data\
      \ and saves it as `top_products_chart.png`."
    - The user opens a new tab in the web browser to check the latest market trends.
    - The user scrolls and copies example SQL queries from a Stack Overflow discussion
      about ranking and aggregating data.
    - The agent exports the query result into a pandas DataFrame for further analysis.
    - The user switches between the SQL client and a spreadsheet application to cross-verify
      sales data.
    - The agent runs a terminal command to initiate a scheduled SQL job for monthly
      sales reporting.
    - The user inputs a series of commands including 'ctrl+s' to save changes in the
      `sales_report.sql` file.
    - The agent opens the file `customer_feedback.sql` and identifies areas where
      additional comments should be added for clarity.
    - The user clicks through a data visualization tutorial on YouTube.
    - The agent suggests an alternative query to handle NULL values in the top 10
      sales data.
    - The user navigates Google search results for historical sales trends and opened
      an article on Forbes.
    - The agent opens `main_dashboard.report` in the business intelligence tool to
      include the new sales data.
    - The user opened a terminal window to check the status of the database server.
    - The agent reads the contents of `monthly_sales_report.md` and generates text
      summarizing the key insights.
    - The user scrolled through a discussion thread about data analysis best practices
      on a tech forum.
    - The agent schedules a follow-up meeting with the finance team.
    - The user searches for alternative SQL clients with better performance on large
      datasets.
    - The agent suggests using indexes on the `sales` table columns to improve query
      performance.
    - The user opens the file `promotion_analysis.sql` to incorporate insights on
      promotional impacts on sales.
    - The agent performs a GET request to an API endpoint to fetch the latest sales
      figures.
    - The user switches focuses back to `top_products_query.sql` in their SQL client.
    - The user types a combination of commands to format the SQL query with proper
      indentation.
    - The agent generates a summary of the top 10 products' sales performance for
      the last quarter and saves it as `quarterly_summary.txt`.
    theme: SQL Data Analysis
  user:
    description: Emily Johnson is a 32-year-old intermediate data analyst who prefers
      using SQL for data manipulation and analysis. She is working on a monthly sales
      report from her home office, focusing on e-commerce data analysis.
    goal: Write an SQL query to find the top 10 products with the highest sales and
      calculate their total sales.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> dict'
    - 'file.open(file_path: str) -> dict'
    - 'file.save(file_path: str, content: str) -> dict'
    - 'browser.open(url: str) -> None'
    - 'browser.inspect_element(css_selector: str) -> dict'
    - 'image.recognize_text(image_path: str) -> dict'
    - 'generate_code_snippet(language: str, template: str) -> str'
    - 'browser.screenshot_element(css_selector: str, save_path: str) -> dict'
    description: Alex is a mid-level web developer working from his home office on
      a late Saturday morning. He is updating his portfolio website, focusing on designing
      a responsive navigation bar that converts to a hamburger menu on mobile devices.
    entities:
    - 'Development Environment: Visual Studio Code with customized extensions'
    - 'Browser: Chrome for testing with developer tools'
    - 'Reference Material: MDN Web Docs, W3Schools'
    - 'Mockup Tool: Figma or Adobe XD'
    - 'Mobile Devices: iPhone and tablet for testing'
    events_example:
    - The user opens a new file called 'responsive-nav.html' in Visual Studio Code.
    - The agent searches for 'create hamburger menu with CSS' on Google.
    - The user switches to the browser tab displaying MDN Web Docs.
    - The agent inspects the '#main-nav' element using browser developer tools.
    - The user refreshes the portfolio website to test recent changes.
    - The agent analyzes performance of the URL 'http://localhost:3000' for responsiveness.
    - The user types a CSS media query for max-width in the editor.
    - The agent opens the file 'styles.css' and checks for syntax errors.
    - The user resizes the browser window to test mobile responsiveness.
    - The agent takes a screenshot of the navigation bar and saves it to '/home/user/screenshots/nav-bar.png'.
    theme: Web Development
  user:
    description: Alex, 28, is a mid-level web developer with solid HTML and CSS skills
      and basic JavaScript knowledge. He prefers minimalistic, clean designs and is
      keen on ensuring websites look good on both desktop and mobile devices.
    goal: Design a responsive navigation bar that converts to a hamburger menu on
      mobile devices.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> dict'
    - 'file.open(file_path: str) -> dict'
    - 'file.save(file_path: str, content: str) -> dict'
    - 'browser.open(url: str) -> None'
    - 'browser.inspect_element(css_selector: str) -> dict'
    - 'image.recognize_text(image_path: str) -> dict'
    - 'generate_code_snippet(language: str, template: str) -> str'
    - 'design.propose_changes(image_path: str, suggestions: list) -> dict'
    description: Sam, a 35-year-old graphic designer, is working on his online portfolio.
      He is integrating a responsive navigation bar that transitions smoothly into
      a hamburger menu for mobile viewing.
    entities:
    - 'Graphic Design Tools: Photoshop, Illustrator'
    - 'CSS Framework: Bootstrap'
    - 'Animations Library: Animate.css'
    - 'Collaborative Tools: InVision, Slack'
    events_example:
    - The user opens a new file called 'responsive-nav.html' in Visual Studio Code.
    - The agent searches for 'create hamburger menu with CSS' on Google.
    - The user switches to the browser tab displaying MDN Web Docs.
    - The agent inspects the '#main-nav' element using browser developer tools.
    - The user refreshes the portfolio website to test recent changes.
    - The agent analyzes performance of the URL 'http://localhost:3000' for responsiveness.
    - The user types a CSS media query for max-width in the editor.
    - The agent opens the file 'styles.css' and checks for syntax errors.
    - The user resizes the browser window to test mobile responsiveness.
    - The agent takes a screenshot of the navigation bar and saves it to '/home/user/screenshots/nav-bar.png'.
    theme: Graphic Design Integration
  user:
    description: Sam, 35, is a graphic designer proficient in Photoshop and Illustrator
      with basic HTML and CSS knowledge. He integrates design elements into functional
      websites and ensures brand consistency.
    goal: Design a navigation bar that transitions smoothly into a hamburger menu
      for mobile viewing.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> dict'
    - 'file.open(file_path: str) -> dict'
    - 'file.save(file_path: str, content: str) -> dict'
    - 'browser.open(url: str) -> None'
    - 'browser.inspect_element(css_selector: str) -> dict'
    - 'image.recognize_text(image_path: str) -> dict'
    - 'generate_code_snippet(language: str, template: str) -> str'
    - 'tutorials.recommend(topic: str) -> list'
    description: Rachel, a 23-year-old computer science student, is creating a personal
      website with a focus on responsive design. She aims to ensure the navigation
      bar turns into a hamburger menu on mobile devices.
    entities:
    - 'Text Editor: Sublime Text or Visual Studio Code'
    - 'Learning Platforms: Codecademy, Coursera'
    - 'JavaScript Libraries: jQuery'
    - 'Testing Platforms: BrowserStack'
    events_example:
    - The user opens a new file called 'responsive-nav.html' in Visual Studio Code.
    - The agent searches for 'create hamburger menu with CSS' on Google.
    - The user switches to the browser tab displaying MDN Web Docs.
    - The agent inspects the '#main-nav' element using browser developer tools.
    - The user refreshes the portfolio website to test recent changes.
    - The agent analyzes performance of the URL 'http://localhost:3000' for responsiveness.
    - The user types a CSS media query for max-width in the editor.
    - The agent opens the file 'styles.css' and checks for syntax errors.
    - The user resizes the browser window to test mobile responsiveness.
    - The agent takes a screenshot of the navigation bar and saves it to '/home/user/screenshots/nav-bar.png'.
    theme: Student Project
  user:
    description: Rachel, 23, is a computer science student with strong foundational
      knowledge in HTML, CSS, and JavaScript. She is eager to apply theoretical knowledge
      to practical projects.
    goal: Create a personal website with a responsive navigation bar that converts
      to a hamburger menu on mobile devices.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> dict'
    - 'file.open(file_path: str) -> dict'
    - 'file.save(file_path: str, content: str) -> dict'
    - 'browser.open(url: str) -> None'
    - 'browser.inspect_element(css_selector: str) -> dict'
    - 'image.recognize_text(image_path: str) -> dict'
    - 'generate_code_snippet(language: str, template: str) -> str'
    - 'platform.customize_template(platform: str, template_id: str, customizations:
      dict) -> dict'
    description: Maria, a 41-year-old small business owner, is redesigning her boutique's
      website navigation bar to enhance the mobile shopping experience with a responsive
      design.
    entities:
    - 'Website Builder: WordPress or Shopify'
    - 'Brand Guidelines: Strict set of brand guidelines'
    - 'Customer Feedback: Surveys from mobile shoppers'
    - 'Mobile Testing Tools: Responsinator'
    events_example:
    - The user opens a new file called 'responsive-nav.html' in Visual Studio Code.
    - The agent searches for 'create hamburger menu with CSS' on Google.
    - The user switches to the browser tab displaying MDN Web Docs.
    - The agent inspects the '#main-nav' element using browser developer tools.
    - The user refreshes the portfolio website to test recent changes.
    - The agent analyzes performance of the URL 'http://localhost:3000' for responsiveness.
    - The user types a CSS media query for max-width in the editor.
    - The agent opens the file 'styles.css' and checks for syntax errors.
    - The user resizes the browser window to test mobile responsiveness.
    - The agent takes a screenshot of the navigation bar and saves it to '/home/user/screenshots/nav-bar.png'.
    theme: Small Business Website
  user:
    description: Maria, 41, is a small business owner with a basic understanding of
      HTML and CSS. She uses website builders but wants more control over design elements.
    goal: Redesign the boutique's website navigation bar to enhance the mobile shopping
      experience.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> dict'
    - 'file.open(file_path: str) -> dict'
    - 'file.save(file_path: str, content: str) -> dict'
    - 'browser.open(url: str) -> None'
    - 'browser.inspect_element(css_selector: str) -> dict'
    - 'image.recognize_text(image_path: str) -> dict'
    - 'generate_code_snippet(language: str, template: str) -> str'
    - 'performance.analyze(url: str) -> dict'
    description: Jason, a 29-year-old freelance full-stack developer, is developing
      a client's website. He ensures the navigation bar automatically adapts to different
      screen sizes, converting to a hamburger menu on mobile devices.
    entities:
    - 'Advanced Development Tools: JetBrains WebStorm, Git'
    - 'Performance Testing Tools: Lighthouse, WebPageTest'
    - 'CSS Preprocessors: SASS'
    - 'Client Requirements: Detailed project briefs'
    events_example:
    - The user opens a new file called 'responsive-nav.html' in Visual Studio Code.
    - The agent searches for 'create hamburger menu with CSS' on Google.
    - The user switches to the browser tab displaying MDN Web Docs.
    - The agent inspects the '#main-nav' element using browser developer tools.
    - The user refreshes the portfolio website to test recent changes.
    - The agent analyzes performance of the URL 'http://localhost:3000' for responsiveness.
    - The user types a CSS media query for max-width in the editor.
    - The agent opens the file 'styles.css' and checks for syntax errors.
    - The user resizes the browser window to test mobile responsiveness.
    - The agent takes a screenshot of the navigation bar and saves it to '/home/user/screenshots/nav-bar.png'.
    theme: Client Project
  user:
    description: Jason, 29, is a freelance full-stack developer with advanced knowledge
      of HTML, CSS, JavaScript, and back-end technologies. He focuses on optimizing
      user experience on various devices.
    goal: Develop a client's website with a responsive navigation bar that converts
      to a hamburger menu on mobile devices.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a given command in the terminal.
      function: Run build scripts, start development servers, execute unit tests,
        or install packages.
      parameters:
        command: string
      return_value: string
    - action: file.open
      description: Opens and reads the content of a specified file.
      function: Read configuration files, package.json, or other source files for
        modification and review.
      parameters:
        file_path: string
      return_value: string
    - action: file.save
      description: Saves the specified content to a file at the given path.
      function: Update source code, add new functions, or save configuration changes.
      parameters:
        content: string
        file_path: string
      return_value: string
    - action: browser.open
      description: Opens a web browser and navigates to the specified URL.
      function: Access documentation, forums, or test applications in a live environment.
      parameters:
        url: string
      return_value: None
    - action: code.generate_snippet
      description: Generates a code snippet based on the given description.
      function: Generate boilerplate code, functions, or reusable components.
      parameters:
        description: string
      return_value: string
    - action: code.refactor
      description: Refactors a specified file based on the given transformation description.
      function: Improve code readability, performance, or conform to best practices.
      parameters:
        file_path: string
        transformation_description: string
      return_value: string
    - action: debug.suggest_solution
      description: Analyzes an error message and the current file context to suggest
        possible solutions.
      function: Provide targeted debugging advice, helping to identify and resolve
        errors quickly.
      parameters:
        error_message: string
        file_context: string
      return_value: string
    - action: docs.fetch
      description: Fetches relevant documentation or articles based on the provided
        keyword.
      function: Quickly provide access to official documentation, best practices,
        and examples.
      parameters:
        keyword: string
      return_value: string
    - action: visual.extract_text
      description: Analyzes an image and extracts text from it.
      function: Extract code or URLs from screenshots or error dialogs.
      parameters:
        image_path: string
      return_value: string
    - action: visual.identify_ui_elements
      description: Analyzes an image and identifies UI elements such as buttons, input
        fields, and dropdown menus.
      function: Understand the layout and structure of a form or application interface
        from a screenshot.
      parameters:
        image_path: string
      return_value: string
    description: John is working in his home office on a rainy weekday afternoon.
      He is focused on creating a complex form component in React with dynamic fields
      and form validation. His dual-monitor setup features VS Code on one screen and
      a browser on the other for testing and documentation references.
    entities:
    - React Form Component
    - Development Environment
    - VS Code Extensions
    - Form Validation Libraries
    - API Endpoint
    - Browser Console and Dev Tools
    - Documentation and Online Resources
    - AI Assistant
    - "John\u2019s Tools and Accessories"
    - External Influences
    events_example:
    - The agent opens the browser and searches for documentation on 'Yup validation
      schema examples'.
    - The user switches to editing 'FormComponent.jsx' in the project '/c:/Users/john/dev/client-project'.
    - The agent opens the file 'FormComponent.jsx' and scans for implementation of
      dynamic form fields.
    - The agent reads through several Stack Overflow posts related to 'dynamic form
      fields in React'.
    - The user runs 'npm start' in the terminal to launch the development server.
    - The agent extracts error messages from the browser console.
    - The user scrolled and copied an example of form validation rules from a GitHub
      repository.
    - The agent fetches relevant sections from the Formik documentation.
    - The user typed and executed 'git commit -m "Add initial form validation"' in
      the terminal.
    - The user highlights code lines in 'FormComponent.jsx' and uses the Prettier
      extension for formatting.
    - The agent opens a new tab and searches for 'common issues with Formik Yup integration'.
    - The user refactors the state management in 'FormComponent.jsx' to use React
      hooks.
    - The agent identifies a missing dependency in 'package.json' and suggests a command
      to install it.
    - The user navigates to the network tab in the browser's developer tools to monitor
      an API call.
    - The agent retrieves the latest version of the Formik package from 'npm'.
    - The user scrolls through a React Developer Tools tab to inspect component state.
    - The user clicks 'Save' in VS Code after integrating the validation schema.
    - The agent scans for potential syntax errors in 'FormComponent.jsx' and highlights
      them.
    - The user navigates to an email notification about a code review request.
    - The agent submits a query on Stack Overflow, asking about best practices for
      form validation in React.
    theme: React Form Development
  user:
    description: John, a 29-year-old full-stack developer, is working on a client
      project. He is proficient in JavaScript, React, and TypeScript. John is focused
      on creating a dynamic form component with real-time validation using Formik
      and Yup.
    goal: Create a complex form component in React with dynamic fields and form validation.
- environment:
    agent_ops:
    - terminal.run(command)
    - terminal.get_output()
    - file.open(file_path)
    - file.save(file_path, content)
    - file.create(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - code.analyze(content)
    - code.generate(template, params)
    - task.track(progress)
    - task.suggest_next_step(current_step)
    description: The scene is set in a home office where a developer is working on
      implementing a real-time chat application using Vue.js and WebSocket. The office
      is equipped with dual monitors, a mechanical keyboard, and a well-organized
      desk. The developer is focused on coding, referencing documentation, and testing
      the application.
    entities:
    - Visual Studio Code
    - Postman
    - Desktop Setup with Dual Monitors
    - Mechanical Keyboard and Optical Mouse
    - Slack/Discord
    - WebSocket Server
    - MongoDB Database
    - Git Repository
    - Project Requirements
    - Peer Developers
    - Online Developer Communities
    - Framework and Library Updates
    - Prototype Design Mockups
    events_example:
    - The user opened Visual Studio Code and navigated to Chat.vue file.
    - The user typed npm install vue-websocket in the terminal within Visual Studio
      Code and pressed 'Enter'.
    - The agent opened the browser and searched for 'secure WebSocket connection tutorial'.
    - The user scrolled through a Stack Overflow discussion on 'Vue.js WebSocket implementation'.
    - The user clicked on a link from the search results for 'real-time chat application
      Vue.js WebSocket'.
    - The agent opened the browser and searched for 'JWT authentication Vue.js'.
    - The agent opened the file server.js and identified several bugs in the WebSocket
      configuration.
    - The user clicked on a GitHub issue discussing performance optimizations for
      Vue.js components.
    - The user typed 'vue create new-project' in the terminal and pressed 'Enter'.
    - The agent opened the file NewComponent.vue and identified missing import statements.
    - The user switched back to the browser and read through WebSocket API documentation.
    - The user typed 'npm start' in the terminal within Visual Studio Code and pressed
      'Enter'.
    - The user clicked on a link for a tutorial on 'implementing chat bubbles in Vue.js'.
    - The user copied code from a web page about WebSocket reconnections and pasted
      it into Chat.vue.
    - The agent saved changes to the file Chat.vue after updating the WebSocket connection
      logic.
    - The user scrolled through a blog post on 'Vue.js performance optimizations'.
    - The agent opened the file Auth.js and identified improper use of JWT tokens.
    - The user created a new file named GroupChat.vue within the src/components/ directory.
    - The agent opened the file package.json and checked for WebSocket dependency
      versions.
    - The user clicked on a YouTube video tutorial for 'real-time chat applications
      with WebSocket'.
    - The agent saved changes to the file server.js after fixing WebSocket-related
      bugs.
    - The user switched to the browser and searched for 'WebSocket vs REST API performance'.
    - The user copied text using 'cmd+c' from a Vue.js documentation page on lifecycle
      hooks.
    - The agent ran npm run dev in the terminal to start the development server.
    - The user clicked through different tabs in the browser to compare WebSocket
      libraries.
    - The user typed 'vue router setup' and pressed 'Enter' in the terminal within
      Visual Studio Code.
    - The user scrolled through a tutorial on 'real-time notifications with WebSocket
      and Vue.js'.
    - The agent opened the file main.js and added necessary WebSocket connection code.
    - The user switched back to the 'Code.exe' application again without performing
      any actions.
    - The user clicked on a medium.com article titled 'Integrating WebSocket in a
      Vue.js Project'.
    - The agent opened the file index.html to check for WebSocket polyfill scripts.
    - The user typed 'npm run build' in the terminal to compile the Vue.js application.
    - The user clicked on a link to a GitHub repository for a sample Vue.js chat application.
    - The agent opened the file webpack.config.js and checked WebSocket settings.
    - The user scrolled down a Mozilla Developer Network (MDN) article on WebSocket
      API.
    - The user clicked on a link to a tutorial on 'Implementing JWT authentication
      in a Vue.js app'.
    - The agent saved changes to the file Auth.js after fixing JWT token handling
      issues.
    - The user copied a snippet from a blog post about handling WebSocket reconnection
      attempts.
    - The agent opened the browser and searched for 'Vue.js best practices for handling
      real-time data'.
    - The agent opened the file Chat.vue and highlighted unused variables and imports.
    theme: Real-time Chat Application Development
  user:
    description: The user is an intermediate web developer named Alex Johnson, aged
      29, working from a home office. Alex is focused on setting up a real-time chat
      application, configuring WebSocket connections, and ensuring secure user authentication.
      They are experienced with JavaScript and Vue.js, and regularly engage with online
      developer communities for support and learning.
    goal: Implement a real-time chat application in Vue.js using WebSocket for communication.
- environment:
    agent_ops:
    - read_document(file_path)
    - read_image(file_path)
    - summarize_text(content)
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - browser_scrape(url, data_points)
    - generate_report(template_path, data)
    - generate_presentation(slides_data)
    - generate_summary_report(content)
    - api_request(api_endpoint, parameters)
    - database_query(connection_string, query)
    - schedule_meeting(participants, date_time, agenda)
    - send_email(recipients, subject, body, attachments)
    description: The user is tasked with researching and comparing various remote
      work software tools to recommend the best option for their company. The scene
      is set in a professional workspace, either at home or in an office, equipped
      with modern technology and resources for efficient research and analysis.
    entities:
    - 'Workspace Setup: Dual monitors, ergonomic chairs, customized keyboards, noise-canceling
      headphones, webcam.'
    - 'Reporting and Presentation Tools: Company templates, Microsoft PowerPoint,
      Google Slides, cloud storage services.'
    - 'Communication Channels: Email, instant messaging apps, video conferencing software.'
    - 'Data Collection and Analysis Tools: Spreadsheets, analytics software, survey
      tools.'
    - 'External Input and Resources: Industry reports, expert panels, webinars, peer
      reviews.'
    events_example:
    - The user opens the browser and searches for tutorials on comparing remote work
      software.
    - The agent reads the latest reviews from software comparison websites.
    - The user switches to a Zoom tab to check a scheduled meeting time with the team.
    - The agent accesses and reads a document titled 'Remote Work Tools Analysis.pdf'.
    - The user opens the file 'team_feedback_survey.xlsx' and reviews the collected
      responses.
    - The agent schedules a virtual meeting to present the findings to the management
      team.
    - The user browses through a blog post titled 'Top Remote Work Tools for 2023'.
    - The agent scrapes data from Capterra about user ratings for Slack, Zoom, Trello,
      Monday.com, and Microsoft Teams.
    - The user switches from Google Chrome to Visual Studio Code.
    - The agent generates a preliminary report summarizing key features of remote
      work software.
    - The user opens the file 'comparison_matrix.xlsx' and updates it with the latest
      data.
    - The user moves the mouse and clicks within a Microsoft PowerPoint presentation.
    - The agent sends an email with the subject 'Remote Work Tools Comparison - Initial
      Findings' to key stakeholders.
    - The user inputs 'cmd+c' and 'cmd+v' while editing a document in Google Docs.
    - The agent retrieves cost details and licensing information from each software's
      official site.
    - The user opens a bookmarked page with the title 'How to Choose the Best Remote
      Work Software'.
    - The agent performs a database query to gather historical performance metrics
      of existing software tools.
    - The user clicks and opens a YouTube tutorial video on using Monday.com for project
      management.
    - The agent reads text from a screenshot detailing user testimonials from multiple
      software tools.
    - The user types comments in the 'recommendation_draft.docx' file in Microsoft
      Word.
    - The agent formats the preliminary report according to the company's template.
    - The user scrolls through an extensive forum thread discussing the pros and cons
      of Trello versus Asana.
    - The agent reads a received email with subject 'Feedback on Current Remote Work
      Tools'.
    - The user briefly pauses their activity in Visual Studio Code.
    - The agent analyzes Slack's API documentation for compatibility checks.
    - The user returns to Google to perform a search on 'Remote work software integration
      guide'.
    - The agent accesses the company's internal knowledge base to retrieve previous
      software review reports.
    - The user bookmarks a webpage discussing the security features of Zoom.
    - The agent extracts key data points from a research paper on remote work efficiency.
    - The user pastes ('cmd + v') and clicks the mouse within the ChatGPT tab and
      a Google Search page.
    theme: Remote Work Software Evaluation
  user:
    description: The user is a mid-level manager in a tech company, tasked with evaluating
      remote work software tools to enhance team productivity. They are proficient
      in project management and have a keen interest in technology trends. The user
      operates in a well-equipped workspace and frequently interacts with various
      digital tools and platforms to gather and analyze data.
    goal: Research and compare five popular remote work software tools and recommend
      the best one for the company.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'terminal_read_output_lines(command: str) -> List[str]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_files(directory_path: str) -> List[str]'
    - 'browser.open(url: str) -> None'
    - 'browser.get_screenshot(url: str) -> Image'
    - 'browser.debug_element(url: str, element_selector: str) -> str'
    - 'code.suggest_code(context: str, snippet_type: str) -> str'
    - 'code.explain_code(code_snippet: str) -> str'
    - 'code.review_code(file_path: str) -> List[str]'
    description: A front-end developer is working on a Vue.js project to implement
      real-time event handling and data binding for a personalized welcome message.
      The scene is set in a home office with a dual-monitor setup, where the user
      interacts with various development tools and resources.
    entities:
    - Integrated Development Environment (IDE) like Visual Studio Code
    - Web browsers such as Chrome or Firefox
    - Vue.js official documentation and MDN Web Docs
    - Version control systems like GitHub
    - Plugins and extensions for code quality and live previews
    - External APIs and local storage for data handling
    - Collaborators and mentors for guidance and feedback
    events_example:
    - The agent opens the file `src/components/WelcomeMessage.vue` in Visual Studio
      Code.
    - The user searches on Google for 'real-time event handling Vue.js' and clicks
      'Enter'.
    - The user moves the mouse to the 'Save' icon in Visual Studio Code.
    - The agent lists all files in the directory `src/components`.
    - The agent runs the command `npm install vue-router` in the terminal.
    - The user scrolls through a webpage on MDN Web Docs related to form validation.
    - The user types 'npm run dev' in the terminal and hits 'Enter'.
    - The agent opens `App.vue` and reviews the code for potential improvements.
    - The user copies a code snippet on Vue.js lifecycle hooks from Stack Overflow.
    - The user clicks on the browser's developer tools tab to inspect elements.
    - The agent suggests a code snippet for real-time validation in `WelcomeMessage.vue`.
    - The user switches back to Visual Studio Code and pastes the copied code snippet.
    - The agent opens a screenshot of `http://localhost:8080` and returns the image.
    - The user types 'real-time data binding Vue.js' and browses search results on
      Google.
    - The agent executes `git status` in the terminal to check for changes.
    - The user opens a Vue.js documentation page about computed properties.
    - The agent opens `package.json` to verify installed dependencies.
    - The user adjusts the browser's responsive design mode settings.
    - The agent saves changes to `src/components/ProfilePreview.vue` with new content.
    - The user types 'vue add eslint' into the terminal and presses 'Enter'.
    - The user scrolls and views the page 'example/advanced-state/swiftui-example'.
    - The user inputs 'npm run test' in the terminal and runs the tests.
    - The agent closes the current file and opens `Main.js` in Visual Studio Code.
    - The user searches for 'Vue.js real-time validation examples' on GitHub.
    - The agent reviews the code within `src/components/FormInput.vue` for optimization.
    - The user moves their mouse within `App.vue` file in Visual Studio Code.
    - The agent takes a screenshot of `http://localhost:8080/form` and analyzes it
      for layout issues.
    - The user clicks on a YouTube link to watch a tutorial on Vue.js reactivity.
    - The user types 'cmd+c' to copy text from `src/components/WelcomeMessage.vue`.
    - The agent opens and reads the contents of `src/store/index.js`.
    - The user types 'npm install --save axios' and executes it in the terminal.
    - The user clicks to expand a section on Vue.js official documentation about watchers.
    - The agent debugs the element with ID `#welcomeMessage` on `http://localhost:8080`.
    - The user bookmarks an article on performance optimization in Vue.js.
    - The agent lists all files in the directory `src/assets`.
    - The user switches to another tab in the browser with Vue.js tutorial open.
    - The user moves the mouse to highlight text in `src/components/UserInput.vue`.
    - The agent opens a new file `src/components/NewComponent.vue` for editing.
    - The user modifies a method related to data binding in `App.vue` and saves changes.
    - The agent checks for syntax errors in `src/components/ProfilePreview.vue`.
    - The user types 'npm audit' to check for vulnerabilities in project dependencies.
    - The agent extracts HTML content of the element with class `.usernameInput` from
      the browser.
    - The user scrolls through a blog post on optimizing Vue.js applications.
    - The agent opens a Vue.js project checklist document.
    - The user types 'git add .' and prepares to commit changes in the terminal.
    - The agent suggests a code explanation for `created()` lifecycle method in Vue.js.
    - The user moves to a different file by navigating to `router/index.js`.
    - The agent retrieves and lists all methods declared in `src/components/FormInput.vue`.
    - The user types 'npm outdated' to check for outdated packages.
    - The user pastes new CSS rules into `src/assets/styles.css` for styling improvements.
    theme: Vue.js Development
  user:
    description: Alex Jordan is an intermediate front-end developer with a focus on
      enhancing user experience through interactive elements. Working from a home
      office, Alex is experimenting with Vue.js to build a personalized web app that
      greets users dynamically.
    goal: Use Vue.js to implement real-time event handling and data binding to display
      a personalized welcome message after a user enters their name.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> List[str]'
    - 'code_analyze(code: str) -> Dict[str, Any]'
    - 'code_generate(explanation: str) -> str'
    description: The scene is set in a home office where Alex Johnson, an intermediate
      software developer, is working on a personal project to implement multi-threading
      in a banking application. The environment is equipped with dual monitors, a
      standing desk, and a comfortable chair, creating an ideal setup for coding and
      debugging.
    entities:
    - Bank Account Application
    - Development Environment (IDE)
    - Git Version Control
    - Testing Suites and Profiling Tools
    - Stakeholder Feedback
    events_example:
    - The user opens IntelliJ IDEA and navigates to the project directory containing
      the Java files.
    - The agent opens the file `BankAccount.java` and suggests a code snippet for
      using synchronized methods.
    - The user enters a command in the terminal to compile all Java files in the project
      directory.
    - The agent searches the web for 'best practices for multithreading in Java' and
      compiles a list of useful articles.
    - The user clicks run inside IntelliJ IDEA to execute the multi-threaded banking
      application.
    - The agent opens a new tab in the web browser and directs the user to a StackOverflow
      post on handling race conditions.
    - The user reviews console logs for errors after the application execution and
      opens the file `TransactionManager.java` for editing.
    - The agent reads through the opened file and highlights a potential issue with
      thread synchronization.
    - The user opens the browser and conducts a search for 'ReentrantLock vs synchronized
      Java', reading the first result for detailed comparison.
    - The agent suggests enabling debug mode in IntelliJ IDEA and steps through the
      program execution to catch any deadlocks.
    - The user checks the repository on GitHub for any unresolved pull requests related
      to the banking application.
    - The agent generates a concise summary of code changes made to `BankAccount.java`
      over the past week using file diff tools.
    - The user searches for 'Java concurrent modification exception' on Google and
      reads through a tutorial explaining common causes.
    - The agent opens VisualVM to help the user analyze the performance of the application
      running several threads.
    - The user updates a method in `TransactionManager.java` to handle concurrent
      transactions more efficiently using the agent's recommendations.
    - The agent saves the updated Java file and immediately commits changes to the
      local Git repository for version control.
    - The user clicks on a notification from IntelliJ IDEA about a failed build due
      to synchronization issues.
    - The agent opens a guide on Java concurrency in a new browser tab, detailing
      the use of atomic variables for thread-safe operations.
    - The user inspects the application's thread behavior using a debugger tool and
      adjusts code to improve responsiveness.
    - The agent closes unnecessary browser tabs to free resources for smoother operation
      of the development environment.
    theme: Java Multithreading Development
  user:
    description: Alex Johnson, a 28-year-old software developer with intermediate
      Java skills, is focused on learning advanced topics like concurrent programming.
      He prefers hands-on learning and is working on a personal project to improve
      a banking application by adding multi-threading capabilities.
    goal: Enhance an existing banking application by incorporating multi-threading
      to handle multiple transactions, ensuring no data loss or inconsistency.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.copy(src_file_path: str, dst_file_path: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'fetch_web_data(url: str) -> str'
    - 'fetch_image(url: str) -> Image'
    - 'generate_summary(text: str, num_lines: int) -> str'
    - 'extract_keywords(text: str) -> List[str]'
    - 'image.analyze(content: Image) -> Dict[str, Any]'
    description: Laura Thompson, a Senior Marketing Analyst, is working from her organized
      home office on a rainy Tuesday afternoon. She is using a high-performance desktop
      computer with dual monitors to compile and analyze data for a comparative report
      on three newly released smartphones. The office is cluttered with printouts
      and sticky notes, and soft music plays in the background.
    entities:
    - Desktop Computer and Dual Monitors
    - Personal Smartphone
    - Online Tech Forums
    - E-commerce Platforms
    - Social Media Feeds
    - Coffee Machine and Home Office Appliances
    events_example:
    - The user opens multiple tabs in the web browser to compare smartphone features
      on different e-commerce platforms.
    - The agent extracts user review data from a tech forum and compiles it into a
      readable format.
    - The user takes a screenshot of a performance comparison chart on a benchmark
      site.
    - The agent analyzes an image from a website to extract text data about smartphone
      specifications.
    - The user switches to a spreadsheet application to input price data gathered
      online.
    - The agent generates a summary of user reviews from various tech sites.
    - The user navigates to a social media page and reads through comments under a
      smartphone video review.
    - The agent opens a new browser window and searches for recent news articles about
      smartphone launches.
    - The user copies a product description using 'ctrl+c' from an online store.
    - The agent identifies price changes for a specific smartphone model across multiple
      retail sites and alerts the user.
    - The user prints out a product specification sheet for further analysis.
    - The agent attempts to access a blocked website and logs the failed attempt.
    - The user performs a search for 'smartphone with best camera 2023' on a search
      engine.
    - The agent saves a document containing summarized research data to user's cloud
      storage.
    - The user encounters an error while inputting data into the market analysis tool.
    - The agent schedules a reminder for a team meeting on smartphone trends using
      the user's calendar app.
    - The user bookmarks a tech review blog for future reference.
    - The agent sends an alert to the user about a trending topic related to new smartphone
      features.
    - The user uses the trackpad to zoom in on a detailed image of a smartphone's
      camera module.
    - The agent generates an error report after failing to connect to the price tracking
      API.
    theme: Marketing Analysis
  user:
    description: Laura Thompson is a 29-year-old Senior Marketing Analyst with skills
      in data analytics, market research, and report writing. She has a keen interest
      in consumer electronics and social media trends.
    goal: Conduct a detailed investigation and write a report comparing the performance,
      price, and user reviews of three newly released smartphones.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.copy(src_file_path: str, dst_file_path: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'fetch_web_data(url: str) -> str'
    - 'fetch_image(url: str) -> Image'
    - 'generate_summary(text: str, num_lines: int) -> str'
    - 'extract_keywords(text: str) -> List[str]'
    - 'image.analyze(content: Image) -> Dict[str, Any]'
    description: David Kim, a Technology Journalist, is working from his home office
      equipped with various gadgets and a high-end personal smartphone. He is conducting
      hands-on testing and writing a detailed review of three newly released smartphones.
      His workspace includes a desktop computer, camera equipment, and a cluttered
      desk filled with tech devices.
    entities:
    - Desktop Computer and Dual Monitors
    - Personal Smartphone
    - Online Tech Forums
    - E-commerce Platforms
    - Social Media Feeds
    - Camera Equipment
    events_example:
    - The user opens multiple tabs in the web browser to compare smartphone features
      on different e-commerce platforms.
    - The agent extracts user review data from a tech forum and compiles it into a
      readable format.
    - The user takes a screenshot of a performance comparison chart on a benchmark
      site.
    - The agent analyzes an image from a website to extract text data about smartphone
      specifications.
    - The user switches to a spreadsheet application to input price data gathered
      online.
    - The agent generates a summary of user reviews from various tech sites.
    - The user navigates to a social media page and reads through comments under a
      smartphone video review.
    - The agent opens a new browser window and searches for recent news articles about
      smartphone launches.
    - The user copies a product description using 'ctrl+c' from an online store.
    - The agent identifies price changes for a specific smartphone model across multiple
      retail sites and alerts the user.
    - The user prints out a product specification sheet for further analysis.
    - The agent attempts to access a blocked website and logs the failed attempt.
    - The user performs a search for 'smartphone with best camera 2023' on a search
      engine.
    - The agent saves a document containing summarized research data to user's cloud
      storage.
    - The user encounters an error while inputting data into the market analysis tool.
    - The agent schedules a reminder for a team meeting on smartphone trends using
      the user's calendar app.
    - The user bookmarks a tech review blog for future reference.
    - The agent sends an alert to the user about a trending topic related to new smartphone
      features.
    - The user uses the trackpad to zoom in on a detailed image of a smartphone's
      camera module.
    - The agent generates an error report after failing to connect to the price tracking
      API.
    theme: Tech Journalism
  user:
    description: David Kim is a 35-year-old Technology Journalist with skills in writing,
      tech reviews, photography, and video editing. He has a keen interest in the
      latest gadgets and tech innovations.
    goal: Conduct a detailed investigation and write a report comparing the performance,
      price, and user reviews of three newly released smartphones.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.copy(src_file_path: str, dst_file_path: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'fetch_web_data(url: str) -> str'
    - 'fetch_image(url: str) -> Image'
    - 'generate_summary(text: str, num_lines: int) -> str'
    - 'extract_keywords(text: str) -> List[str]'
    - 'image.analyze(content: Image) -> Dict[str, Any]'
    description: Sarah Martinez, a Procurement Manager at a large corporation, is
      working from her office equipped with corporate procurement software. She is
      assessing the total cost of ownership and evaluating user reviews for three
      newly released smartphones to prepare a procurement justification report for
      the executive team.
    entities:
    - Desktop Computer and Dual Monitors
    - Corporate Procurement Software
    - Online Tech Forums
    - E-commerce Platforms
    - Social Media Feeds
    - Office Printer
    events_example:
    - The user opens multiple tabs in the web browser to compare smartphone features
      on different e-commerce platforms.
    - The agent extracts user review data from a tech forum and compiles it into a
      readable format.
    - The user takes a screenshot of a performance comparison chart on a benchmark
      site.
    - The agent analyzes an image from a website to extract text data about smartphone
      specifications.
    - The user switches to a spreadsheet application to input price data gathered
      online.
    - The agent generates a summary of user reviews from various tech sites.
    - The user navigates to a social media page and reads through comments under a
      smartphone video review.
    - The agent opens a new browser window and searches for recent news articles about
      smartphone launches.
    - The user copies a product description using 'ctrl+c' from an online store.
    - The agent identifies price changes for a specific smartphone model across multiple
      retail sites and alerts the user.
    - The user prints out a product specification sheet for further analysis.
    - The agent attempts to access a blocked website and logs the failed attempt.
    - The user performs a search for 'smartphone with best camera 2023' on a search
      engine.
    - The agent saves a document containing summarized research data to user's cloud
      storage.
    - The user encounters an error while inputting data into the market analysis tool.
    - The agent schedules a reminder for a team meeting on smartphone trends using
      the user's calendar app.
    - The user bookmarks a tech review blog for future reference.
    - The agent sends an alert to the user about a trending topic related to new smartphone
      features.
    - The user uses the trackpad to zoom in on a detailed image of a smartphone's
      camera module.
    - The agent generates an error report after failing to connect to the price tracking
      API.
    theme: Corporate Procurement
  user:
    description: Sarah Martinez is a 42-year-old Procurement Manager with skills in
      negotiation, supplier relations, cost analysis, and budgeting. She has a keen
      interest in corporate procurement strategies and cost-saving technologies.
    goal: Conduct a detailed investigation and write a report comparing the performance,
      price, and user reviews of three newly released smartphones.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.copy(src_file_path: str, dst_file_path: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'fetch_web_data(url: str) -> str'
    - 'fetch_image(url: str) -> Image'
    - 'generate_summary(text: str, num_lines: int) -> str'
    - 'extract_keywords(text: str) -> List[str]'
    - 'image.analyze(content: Image) -> Dict[str, Any]'
    description: Emily Zhang, a Graduate Student in Information Technology, is working
      from her home office equipped with performance analysis tools and statistical
      software. She is conducting a detailed investigation into the performance, price,
      and user reviews of three newly released smartphones for a comparative research
      paper.
    entities:
    - Desktop Computer and Dual Monitors
    - Performance Analysis Tools
    - Statistical Software
    - Online Tech Forums
    - E-commerce Platforms
    - Social Media Feeds
    - Coffee Machine and Home Office Appliances
    events_example:
    - The user opens multiple tabs in the web browser to compare smartphone features
      on different e-commerce platforms.
    - The agent extracts user review data from a tech forum and compiles it into a
      readable format.
    - The user takes a screenshot of a performance comparison chart on a benchmark
      site.
    - The agent analyzes an image from a website to extract text data about smartphone
      specifications.
    - The user switches to a spreadsheet application to input price data gathered
      online.
    - The agent generates a summary of user reviews from various tech sites.
    - The user navigates to a social media page and reads through comments under a
      smartphone video review.
    - The agent opens a new browser window and searches for recent news articles about
      smartphone launches.
    - The user copies a product description using 'ctrl+c' from an online store.
    - The agent identifies price changes for a specific smartphone model across multiple
      retail sites and alerts the user.
    - The user prints out a product specification sheet for further analysis.
    - The agent attempts to access a blocked website and logs the failed attempt.
    - The user performs a search for 'smartphone with best camera 2023' on a search
      engine.
    - The agent saves a document containing summarized research data to user's cloud
      storage.
    - The user encounters an error while inputting data into the market analysis tool.
    - The agent schedules a reminder for a team meeting on smartphone trends using
      the user's calendar app.
    - The user bookmarks a tech review blog for future reference.
    - The agent sends an alert to the user about a trending topic related to new smartphone
      features.
    - The user uses the trackpad to zoom in on a detailed image of a smartphone's
      camera module.
    - The agent generates an error report after failing to connect to the price tracking
      API.
    theme: Academic Research
  user:
    description: Emily Zhang is a 26-year-old Graduate Student in Information Technology
      with skills in research, data analysis, technical writing, and software programming.
      She has a keen interest in mobile technologies and academic research.
    goal: Conduct a detailed investigation and write a report comparing the performance,
      price, and user reviews of three newly released smartphones.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.copy(src_file_path: str, dst_file_path: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'fetch_web_data(url: str) -> str'
    - 'fetch_image(url: str) -> Image'
    - 'generate_summary(text: str, num_lines: int) -> str'
    - 'extract_keywords(text: str) -> List[str]'
    - 'image.analyze(content: Image) -> Dict[str, Any]'
    description: Robert Green, a Small Business Owner of a tech retail shop, is working
      from his store office equipped with a retail inventory management system. He
      is analyzing the performance, price, and user reviews of three newly released
      smartphones to determine which models to stock in his store.
    entities:
    - Desktop Computer and Dual Monitors
    - Retail Inventory Management System
    - Online Tech Forums
    - E-commerce Platforms
    - Social Media Feeds
    - Store Inventory
    events_example:
    - The user opens multiple tabs in the web browser to compare smartphone features
      on different e-commerce platforms.
    - The agent extracts user review data from a tech forum and compiles it into a
      readable format.
    - The user takes a screenshot of a performance comparison chart on a benchmark
      site.
    - The agent analyzes an image from a website to extract text data about smartphone
      specifications.
    - The user switches to a spreadsheet application to input price data gathered
      online.
    - The agent generates a summary of user reviews from various tech sites.
    - The user navigates to a social media page and reads through comments under a
      smartphone video review.
    - The agent opens a new browser window and searches for recent news articles about
      smartphone launches.
    - The user copies a product description using 'ctrl+c' from an online store.
    - The agent identifies price changes for a specific smartphone model across multiple
      retail sites and alerts the user.
    - The user prints out a product specification sheet for further analysis.
    - The agent attempts to access a blocked website and logs the failed attempt.
    - The user performs a search for 'smartphone with best camera 2023' on a search
      engine.
    - The agent saves a document containing summarized research data to user's cloud
      storage.
    - The user encounters an error while inputting data into the market analysis tool.
    - The agent schedules a reminder for a team meeting on smartphone trends using
      the user's calendar app.
    - The user bookmarks a tech review blog for future reference.
    - The agent sends an alert to the user about a trending topic related to new smartphone
      features.
    - The user uses the trackpad to zoom in on a detailed image of a smartphone's
      camera module.
    - The agent generates an error report after failing to connect to the price tracking
      API.
    theme: Retail Business
  user:
    description: Robert Green is a 48-year-old Small Business Owner with skills in
      sales, inventory management, customer relations, and market analysis. He has
      a keen interest in emerging tech products and business growth strategies.
    goal: Conduct a detailed investigation and write a report comparing the performance,
      price, and user reviews of three newly released smartphones.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'terminal_read_log(file_path: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.create(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.extract_text(url: str) -> str'
    - 'browser.capture_screenshot(url: str, file_path: str) -> None'
    - 'code.generate_snippet(task_description: str) -> str'
    - 'code.format_code(file_path: str) -> None'
    - 'help.search(topic: str) -> str'
    - 'help.suggest_improvements(file_path: str) -> str'
    description: Alice Fletcher, a freelance web developer, is working on integrating
      a user authentication system into her Flask application. She is focused on creating
      secure registration, login, and logout functionalities using JWT for authentication.
      Her workspace is set up in her home office, featuring a dual-monitor setup and
      a comfortable coding environment.
    entities:
    - Laptop or Desktop Computer
    - Text Editor/IDE (Visual Studio Code)
    - Browser (Chrome)
    - Virtual Environment Manager
    - API Documentation and Guides
    - Databases (SQLite or PostgreSQL)
    - Local Flask Server
    - Version Control System (Git)
    - Online Tutorials and Stack Overflow
    - Chat Applications (Slack, Discord)
    - Home Office Environment
    - Security Guidelines and Compliance Regulations
    - Personal Schedule and Time Management Apps
    events_example:
    - The user opens their Visual Studio Code and creates a new Python file named
      `app.py`.
    - The user navigates to the Flask documentation page in their browser.
    - The agent opens the terminal and executes the command `pip install flask flask-jwt-extended`.
    - The user switches to their web browser and searches for 'how to set up JWT in
      Flask'.
    - The user visits 'https://flask-jwt-extended.readthedocs.io/en/stable/' to read
      the documentation.
    - The agent opens the file `app.py` and reads its content.
    - The user clicks on a Google search result about 'secure password hashing in
      Flask'.
    - The user scrolls through a Stack Overflow page about handling JWT token expiration
      in Flask.
    - The agent generates a code snippet for creating a user registration route in
      Flask.
    - The user scrolls through the search results for 'SQLAlchemy Flask database setup
      example'.
    - The agent opens a new file named `models.py` and writes the provided code snippet
      for the user model.
    - The user visits 'https://stackoverflow.com/questions/' searching for 'Flask
      token authentication'.
    - The agent formats the code in `app.py` according to Python PEP8 guidelines.
    - The user opens a tab to the Flask security guide and reads about best practices.
    - The agent runs the terminal command `python app.py` to start the Flask server.
    - The user navigates to 'http://127.0.0.1:5000/' to test the running Flask application.
    - The user copies a piece of code related to JWT token validation from an online
      tutorial.
    - The agent suggests improvements to the file `auth.py` to enhance security.
    - The user opens the file `auth.py` and reviews the proposed changes.
    - The agent opens the browser and searches for 'Flask JWT token revocation'.
    - The user types 'Flask JWT' in the search bar and hits enter.
    - The user clicks on a YouTube video tutorial about setting up JWT with Flask.
    - The agent captures a screenshot of the terminal output and saves it to the user's
      project directory.
    - The user scrolls through GitHub search results for example Flask JWT authentication
      projects.
    - The agent opens the file `requirements.txt` and reads its content.
    - The user visits 'https://jinja.palletsprojects.com/' to check the Jinja documentation
      for templates.
    - The agent opens the file `routes.py` and writes the content for user logout
      functionality.
    - The user opens the terminal and executes the command `pip freeze > requirements.txt`.
    - The agent searches for 'Flask SQLAlchemy relationships' in the browser.
    - The user switches back to Visual Studio Code and edits the `models.py`.
    - The agent opens the file `config.py` and reads its content.
    - The user scrolls through the Python documentation for generating secure tokens.
    - The agent writes a function snippet for generating JWT tokens in the file `auth.py`.
    - The user navigates to the Flask extensions page to find additional helpful modules.
    - The agent saves the content of the newly generated user registration route.
    - The user opens the file `auth.py` and pastes the copied code for JWT validation.
    - The agent formats the code in `auth.py` for better readability.
    - The user clicks on a link to a GitHub repository for sample Flask projects with
      authentication.
    - The agent captures a log file and reads it to help debug an issue with JWT validation.
    - The user visits 'https://realpython.com/' to read a detailed guide on using
      Flask.
    theme: Flask Authentication Development
  user:
    description: Alice Fletcher, a 28-year-old freelance web developer with intermediate
      coding skills, is working on a personal project to integrate a user authentication
      system into her Flask application. She is focused on creating secure and efficient
      registration, login, and logout functionalities using JWT for authentication.
      Alice prefers coding in the evenings and often seeks help from online communities
      and documentation to enhance her skills.
    goal: Create a user authentication system in Flask with registration, login, and
      logout functionalities, using JWT for authentication.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes the specified terminal command.
      example: terminal_run('mkdir reports')
      parameters:
        command: A string representing the system command to be executed.
      returns: None
    - action: file_open
      description: Opens and reads the content of the specified file.
      example: file_open('/documents/course_reviews.txt')
      parameters:
        file_path: A string representing the file path.
      returns: A string containing the file content.
    - action: file_save
      description: Saves the specified content to the given file path.
      example: file_save('/documents/analysis_report.txt', report_content)
      parameters:
        content: A string representing the content to be saved.
        file_path: A string representing the file path.
      returns: None
    - action: file_append
      description: Appends the specified content to the given file path.
      example: file_append('/documents/analysis_log.txt', new_log_entry)
      parameters:
        content: A string representing the content to be appended.
        file_path: A string representing the file path.
      returns: None
    - action: browser_open
      description: Opens the specified URL in a web browser.
      example: browser_open('https://www.coursera.org')
      parameters:
        url: A string representing the web address.
      returns: None
    - action: browser_scrape
      description: Scrapes the content of a specified web element from the given URL.
      example: browser_scrape('https://www.udemy.com', '//div[@class='course-review']')
      parameters:
        element: A string representing the HTML element to scrape (e.g., XPath or
          CSS selector).
        url: A string representing the web address.
      returns: A string containing the scraped content.
    - action: browser_click
      description: Navigates to the specified URL and simulates a click on the given
        web element.
      example: browser_click('https://www.edx.org', '//button[@class='join-trial']')
      parameters:
        element: A string representing the HTML element to click (e.g., XPath or CSS
          selector).
        url: A string representing the web address.
      returns: None
    - action: data_analyse
      description: Analyzes the provided textual data based on a specific query.
      example: data_analyse(review_content, 'Sentiment analysis for user reviews')
      parameters:
        content: A string representing the data to be analyzed.
        query: A string representing the specific analysis to perform (e.g., 'Summary
          of key points', 'Sentiment analysis').
      returns: A string containing the analysis result.
    - action: generate_chart
      description: Generates a chart based on the provided data.
      example: generate_chart([('Coursera', 80), ('Udemy', 70)], 'bar')
      parameters:
        chart_type: A string indicating the type of chart to generate (e.g., 'bar',
          'pie').
        data: A list of tuples where each tuple represents (label, value).
      returns: A string representing the file path or URL of the generated chart.
    - action: document_create
      description: Creates a document based on a specified template and fills it with
        the provided content.
      example: document_create('/templates/report_template.docx', report_content)
      parameters:
        content: A string representing the content to fill into the template.
        template: A string representing the template file path.
      returns: A string representing the file path of the created document.
    - action: document_edit
      description: Edits an existing document by applying specified modifications.
      example: 'document_edit(''/documents/analysis_report.docx'', {''introduction'':
        new_intro, ''summary'': updated_summary})'
      parameters:
        edits: A dictionary where keys are strings indicating the parts to edit and
          values are the new content.
        file_path: A string representing the file path.
      returns: None
    - action: send_email
      description: Sends an email with the specified subject, body, and optional attachments
        to the given recipient.
      example: send_email('team@example.com', 'Weekly Report', 'Please find attached
        the latest analysis report.', ['/documents/analysis_report.docx'])
      parameters:
        attachments: An optional list of strings representing file paths to attach.
        body: A string representing the content of the email body.
        recipient: A string representing the email address of the recipient.
        subject: A string representing the email subject.
      returns: None
    - action: schedule_task
      description: Schedules a task for the specified date and time.
      example: schedule_task('Team Meeting', '2023-11-15T10:00:00')
      parameters:
        date_time: A string representing the date and time (ISO 8601 format) to schedule
          the task.
        task_name: A string representing the name of the task to schedule.
      returns: None
    - action: set_reminder
      description: Sets a reminder for the specified date and time.
      example: set_reminder('Prepare for bi-monthly meeting', '2023-11-12T09:00:00')
      parameters:
        date_time: A string representing the date and time (ISO 8601 format) to set
          the reminder.
        reminder_text: A string representing the text of the reminder.
      returns: None
    description: Sarah Martinez, an Educational Content Strategist, is working from
      her modern home office to analyze the course quality, prices, and user experience
      of five popular online learning platforms. She uses various tools and resources,
      including dual monitors, a high-performance laptop, a smartphone, and several
      software applications like Google Sheets, Evernote, and web browsers. The goal
      is to prepare a comprehensive comparison report for an upcoming team meeting.
    entities:
    - Dual Monitors
    - Laptop
    - Smartphone
    - Spreadsheet Tool (Google Sheets)
    - Note-taking Application (Evernote)
    - Online Platform Interfaces (Coursera, Udemy, edX)
    - Educational Blogs and Forums
    - Video Conferencing Software (Zoom)
    - Local Database
    - Presentation Software (PowerPoint, Google Slides)
    - Supervisors and Team Members
    - Industry Experts
    - User Reviews
    - Promotional Emails
    - Educational Technology Publications
    - Competitors
    events_example:
    - The agent opens the browser and searches for reviews of Coursera courses.
    - The agent opens the file 'notes.txt' and copies relevant user feedback on Udemy.
    - The agent reads received emails from Coursera and extracts details about new
      promotions.
    - The agent schedules a reminder for Sarah to compare platform user interfaces.
    - The user returns to browsing various course offerings on edX's website.
    - The user searched a new set of results related to 'online learning platform
      comparisons' on Google.
    - The user continued exploring search result pages in Google with multiple scrolling
      actions and clicking on specific results.
    - The user clicked and moved the mouse to interact with the Udemy course reviews,
      particularly focusing on highly rated comments.
    - The user scrolled through the Coursera course catalog looking for the highest-rated
      courses.
    - The user clicked and moved the mouse to interact with the edX search results,
      particularly focusing on business management courses.
    - The user switches back to Google Sheets from the web browser.
    - The user types 'subscription price comparison' in the input field of Google
      Sheets.
    - The agent opens a new browser tab and navigates to the official website of edX.
    - The agent scrapes pricing information from a Coursera course page.
    - The agent generates a bar chart comparing the average course prices on Udemy
      and Coursera.
    - The agent sends an email to Sarah's supervisor with the initial findings and
      attachment of the analysis report.
    - The agent encounters an error trying to access a restricted document and logs
      the incident.
    - The user adds a new column in the Google Sheets titled 'User Experience Ratings'.
    - The user clicks on 'LinkedIn Learning' from the bookmarks and begins evaluating
      their offerings.
    - The user browses through the latest educational technology blog posts on a popular
      forum.
    - The user joins a webinar on the future of online education and takes notes using
      Evernote.
    - The user receives a notification for an upcoming team meeting and opens the
      calendar application to check the schedule.
    - The user begins drafting a report introduction using a note-taking application.
    - The user logs into a Zoom session with their team members to discuss the current
      analysis.
    - The agent opens an official EdSurge article to extract insights on recent developments
      in online learning.
    - The agent extracts data tables from a PDF report on educational technology trends.
    - The user types 'completion rates' in the Google Sheets and adds corresponding
      data for each platform.
    - The user adds a bookmark to a comparison article found during the Google search.
    - The user updates the analysis report with the latest findings from the forum.
    - The agent opens the terminal and runs the command to sync the local database
      with the cloud storage.
    theme: Online Learning Platform Analysis
  user:
    description: Sarah Martinez, 29 years old, is an Educational Content Strategist
      with expertise in curriculum design, data analysis, and educational technology.
      She works from her modern home office, using various tools and resources to
      prepare a comprehensive comparison report for her team.
    goal: Analyze course quality, prices, and user experience of five popular online
      learning platforms.
- environment:
    agent_ops:
    - browser.open(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - terminal.run(command)
    - image.scan(url)
    - image.analyze(image_path)
    - text.extract_reviews(url)
    - text.compare(features_list)
    - text.summarize(reviews_list)
    - text.generate_report(comparison_data)
    - community.fetch_feedback(query)
    - data.visualize(data)
    description: Emma Collins, a marketing manager and health enthusiast, is in her
      home office researching and comparing features, prices, and user reviews of
      five treadmill models. She uses her laptop and notepad to gather and organize
      information.
    entities:
    - Laptop
    - Notepad
    - Fitness Apps
    - Home Layout
    - Fitness Trainer
    - Social Media Influence
    events_example:
    - The user opens a new tab in the web browser and navigates to a fitness equipment
      retail website.
    - The agent reads the specifications of the first treadmill on the product page.
    - The user writes initial notes on their notepad about the treadmill features.
    - The agent uses the compare feature to list out the key specifications of five
      stationary bikes.
    - The user switches between different product pages to examine another treadmill's
      details.
    - The agent opens a new tab to check for user reviews about the elliptical machine.
    - The user opens a social media page to look at the different reviews left by
      influencers on fitness equipment.
    - The agent summarizes reviews from the selected elliptical machine webpages into
      key points.
    - The user scrolls through the search results for 'best rowing machines under
      $1000' on Google.
    - The agent fetches feedback from online fitness forums regarding the best stationary
      bikes.
    - The user compiles the treadmill specifications into a comparison list on their
      notepad.
    - The agent analyzes the photos of fitness equipment for additional visual cues
      about build quality.
    - The user switches back to the tab containing expert reviews on TechRadar for
      rowing machines.
    - The agent generates a visual report comparing the features and prices of the
      five selected treadmills.
    - The user returns to the web browser to check for seasonal discounts on the elliptical
      machines.
    - The agent opens a community forum to post a query about the best compact treadmills.
    - The user types detailed notes on the convenience features of each elliptical
      machine in a text file.
    - The agent uses text extraction to gather key points from expert reviews for
      a specific rowing machine.
    - The user scrolls through the product images and videos of the second stationary
      bike to better understand its build quality.
    - The agent compiles all the fetched feedback from forums into a readable summary
      for the user.
    theme: Home Fitness Equipment Comparison
  user:
    description: Emma Collins, 34, is a marketing manager with strong analytical skills
      and an intermediate understanding of fitness. She enjoys yoga, running, and
      cooking healthy meals. She is looking to upgrade her home gym setup with a new
      treadmill.
    goal: Compare features, prices, and user reviews of five treadmill models.
- environment:
    agent_ops:
    - browser.open(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - terminal.run(command)
    - image.scan(url)
    - image.analyze(image_path)
    - text.extract_reviews(url)
    - text.compare(features_list)
    - text.summarize(reviews_list)
    - text.generate_report(comparison_data)
    - community.fetch_feedback(query)
    - data.visualize(data)
    description: Jake Turner, a graphic designer, is in his minimalist apartment researching
      and comparing features, prices, and user reviews of five stationary bikes. He
      uses his graphic tablet and smartphone to create infographics and gather community
      feedback.
    entities:
    - Graphic Tablet
    - Smartphone
    - "Home D\xE9cor"
    - Dog
    - Fitness Community
    - Design Blogs
    events_example:
    - The user opens a new tab in the web browser and navigates to a fitness equipment
      retail website.
    - The agent reads the specifications of the first treadmill on the product page.
    - The user writes initial notes on their notepad about the treadmill features.
    - The agent uses the compare feature to list out the key specifications of five
      stationary bikes.
    - The user switches between different product pages to examine another treadmill's
      details.
    - The agent opens a new tab to check for user reviews about the elliptical machine.
    - The user opens a social media page to look at the different reviews left by
      influencers on fitness equipment.
    - The agent summarizes reviews from the selected elliptical machine webpages into
      key points.
    - The user scrolls through the search results for 'best rowing machines under
      $1000' on Google.
    - The agent fetches feedback from online fitness forums regarding the best stationary
      bikes.
    - The user compiles the treadmill specifications into a comparison list on their
      notepad.
    - The agent analyzes the photos of fitness equipment for additional visual cues
      about build quality.
    - The user switches back to the tab containing expert reviews on TechRadar for
      rowing machines.
    - The agent generates a visual report comparing the features and prices of the
      five selected treadmills.
    - The user returns to the web browser to check for seasonal discounts on the elliptical
      machines.
    - The agent opens a community forum to post a query about the best compact treadmills.
    - The user types detailed notes on the convenience features of each elliptical
      machine in a text file.
    - The agent uses text extraction to gather key points from expert reviews for
      a specific rowing machine.
    - The user scrolls through the product images and videos of the second stationary
      bike to better understand its build quality.
    - The agent compiles all the fetched feedback from forums into a readable summary
      for the user.
    theme: Home Fitness Equipment Comparison
  user:
    description: Jake Turner, 28, is a graphic designer with creative thinking skills
      and basic fitness knowledge. He enjoys playing basketball, graphic design, and
      hiking. He is looking to add a stationary bike to his home gym setup.
    goal: Compare features, prices, and user reviews of five stationary bikes.
- environment:
    agent_ops:
    - browser.open(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - terminal.run(command)
    - image.scan(url)
    - image.analyze(image_path)
    - text.extract_reviews(url)
    - text.compare(features_list)
    - text.summarize(reviews_list)
    - text.generate_report(comparison_data)
    - community.fetch_feedback(query)
    - data.visualize(data)
    description: Lisa Martinez, a school teacher, is in her home office researching
      and comparing features, prices, and user reviews of five elliptical machines.
      She uses her tablet and library resources to gather and organize information.
    entities:
    - Tablet
    - Library Card
    - Family Members
    - School Schedule
    - Health Magazines
    - Financial Constraints
    events_example:
    - The user opens a new tab in the web browser and navigates to a fitness equipment
      retail website.
    - The agent reads the specifications of the first treadmill on the product page.
    - The user writes initial notes on their notepad about the treadmill features.
    - The agent uses the compare feature to list out the key specifications of five
      stationary bikes.
    - The user switches between different product pages to examine another treadmill's
      details.
    - The agent opens a new tab to check for user reviews about the elliptical machine.
    - The user opens a social media page to look at the different reviews left by
      influencers on fitness equipment.
    - The agent summarizes reviews from the selected elliptical machine webpages into
      key points.
    - The user scrolls through the search results for 'best rowing machines under
      $1000' on Google.
    - The agent fetches feedback from online fitness forums regarding the best stationary
      bikes.
    - The user compiles the treadmill specifications into a comparison list on their
      notepad.
    - The agent analyzes the photos of fitness equipment for additional visual cues
      about build quality.
    - The user switches back to the tab containing expert reviews on TechRadar for
      rowing machines.
    - The agent generates a visual report comparing the features and prices of the
      five selected treadmills.
    - The user returns to the web browser to check for seasonal discounts on the elliptical
      machines.
    - The agent opens a community forum to post a query about the best compact treadmills.
    - The user types detailed notes on the convenience features of each elliptical
      machine in a text file.
    - The agent uses text extraction to gather key points from expert reviews for
      a specific rowing machine.
    - The user scrolls through the product images and videos of the second stationary
      bike to better understand its build quality.
    - The agent compiles all the fetched feedback from forums into a readable summary
      for the user.
    theme: Home Fitness Equipment Comparison
  user:
    description: Lisa Martinez, 42, is a school teacher with excellent time management
      skills and a keen interest in maintaining health. She enjoys reading, gardening,
      and pilates. She is looking to add an elliptical machine to her home gym setup.
    goal: Compare features, prices, and user reviews of five elliptical machines.
- environment:
    agent_ops:
    - browser.open(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - terminal.run(command)
    - image.scan(url)
    - image.analyze(image_path)
    - text.extract_reviews(url)
    - text.compare(features_list)
    - text.summarize(reviews_list)
    - text.generate_report(comparison_data)
    - community.fetch_feedback(query)
    - data.visualize(data)
    description: Michael Johnson, an IT consultant, is in his home gym researching
      and comparing features, prices, and user reviews of five rowing machines. He
      uses his smartwatch and home gym space to gather and organize information.
    entities:
    - Smartwatch
    - Home Gym Space
    - Travel Schedule
    - Golf Clubs
    - Published Reviews
    - Healthcare Professional
    events_example:
    - The user opens a new tab in the web browser and navigates to a fitness equipment
      retail website.
    - The agent reads the specifications of the first treadmill on the product page.
    - The user writes initial notes on their notepad about the treadmill features.
    - The agent uses the compare feature to list out the key specifications of five
      stationary bikes.
    - The user switches between different product pages to examine another treadmill's
      details.
    - The agent opens a new tab to check for user reviews about the elliptical machine.
    - The user opens a social media page to look at the different reviews left by
      influencers on fitness equipment.
    - The agent summarizes reviews from the selected elliptical machine webpages into
      key points.
    - The user scrolls through the search results for 'best rowing machines under
      $1000' on Google.
    - The agent fetches feedback from online fitness forums regarding the best stationary
      bikes.
    - The user compiles the treadmill specifications into a comparison list on their
      notepad.
    - The agent analyzes the photos of fitness equipment for additional visual cues
      about build quality.
    - The user switches back to the tab containing expert reviews on TechRadar for
      rowing machines.
    - The agent generates a visual report comparing the features and prices of the
      five selected treadmills.
    - The user returns to the web browser to check for seasonal discounts on the elliptical
      machines.
    - The agent opens a community forum to post a query about the best compact treadmills.
    - The user types detailed notes on the convenience features of each elliptical
      machine in a text file.
    - The agent uses text extraction to gather key points from expert reviews for
      a specific rowing machine.
    - The user scrolls through the product images and videos of the second stationary
      bike to better understand its build quality.
    - The agent compiles all the fetched feedback from forums into a readable summary
      for the user.
    theme: Home Fitness Equipment Comparison
  user:
    description: Michael Johnson, 50, is an IT consultant with detail-oriented skills
      and a frequent traveler. He enjoys golfing, reading tech magazines, and traveling.
      He is looking to add a rowing machine to his home gym setup.
    goal: Compare features, prices, and user reviews of five rowing machines.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_text(prompt)
    - read_text(image)
    - analyze_code(code_snippet)
    - visualize_path(maze_grid, path)
    - highlight_code_syntax(code_snippet)
    - display_flowchart(algorithm_steps)
    - fetch_example_code(topic)
    - optimize_code(code_snippet)
    description: Clara is working on a coding challenge in her home office to develop
      a Python function that solves a maze problem. The room is quiet, illuminated
      by a desk lamp, with her laptop and notebook on the desk. She is focused on
      implementing and optimizing maze-solving algorithms.
    entities:
    - Laptop/Computer
    - Notebook/Whiteboard
    - Maze Grid (Input Data)
    - Python Libraries
    - Online Platforms/Coding Competitions
    - Coding Communities/Forums
    - Educational Resources
    - Personal Gadgets
    events_example:
    - The agent opens the browser and searches for tutorials on BFS algorithm in Python.
    - The agent opens the file `maze_solver.py` and identifies several syntax errors.
    - The agent reads recent email notifications about upcoming coding competitions.
    - The agent completes the terminal command to run the script `test_maze_solver.py`.
    - The agent saves the updated maze-solving algorithm in `optimized_maze_solver.py`.
    - The user stays on the search results page for 'A* search algorithm for Python'
      on Google.
    - The user opens a new tab in the web browser to look for code optimization techniques.
    - The user types `def solve_maze(grid):` in the 'maze_solver.py' file in VS Code.
    - The user copies BFS pseudocode from an online tutorial and pastes it into their
      code editor.
    - The user scrolls through Stack Overflow discussions on common pitfalls in maze-solving
      algorithms.
    - The agent generates an explanation for how BFS is used in maze solving.
    - The agent fetches example code for implementing DFS in Python.
    - The agent opens the URL 'https://github.com/python-visualization/folium' to
      access visualization libraries.
    - The user clicks and scrolls within a maze-solving forum for optimized code examples.
    - The user types `python`, executes `cmd+v`, and presses `Enter` in the 'visualize_maze.py'
      file.
    - The user starts working on a file 'generate_random_maze.py' within a Python
      project in Visual Studio Code.
    - The user scrolls and views the page 'example/maze-algorithms/bfs-vs-dfs'.
    - The agent saves the generated visualization of the maze path as an image file.
    - The agent checks for updates in coding competition rules and guidelines on the
      relevant website.
    - The user types and edits code in 'solve_maze.py' in Visual Studio Code.
    - The agent opens the file `example_maze.png` and extracts the maze grid using
      OCR.
    - The agent analyzes the provided 'solve_maze.py' code for potential logical errors.
    - The user clicks and types 'procedural generation maze' in the search bar.
    theme: Maze Solver Development
  user:
    description: Clara is a 29-year-old software developer specializing in web development
      with intermediate experience in Python. She enjoys coding challenges and often
      participates in online competitions. Clara prefers hands-on projects and likes
      to document her code meticulously.
    goal: Write a Python function to solve a maze problem and find the path from start
      to end.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_text(prompt)
    - read_text(image)
    - analyze_code(code_snippet)
    - visualize_path(maze_grid, path)
    - highlight_code_syntax(code_snippet)
    - display_flowchart(algorithm_steps)
    - fetch_example_code(topic)
    - optimize_code(code_snippet)
    description: Ryan is working on optimizing a maze-solving function using the A*
      algorithm in his home office. The room is equipped with a powerful desktop,
      multiple monitors, and a whiteboard filled with algorithmic notes. Ryan is focused
      on enhancing the efficiency of his maze-solving code.
    entities:
    - Laptop/Computer
    - Notebook/Whiteboard
    - Maze Grid (Input Data)
    - Python Libraries
    - Online Platforms/Coding Competitions
    - Coding Communities/Forums
    - Educational Resources
    - Personal Gadgets
    events_example:
    - The agent opens the browser and searches for tutorials on BFS algorithm in Python.
    - The agent opens the file `maze_solver.py` and identifies several syntax errors.
    - The agent reads recent email notifications about upcoming coding competitions.
    - The agent completes the terminal command to run the script `test_maze_solver.py`.
    - The agent saves the updated maze-solving algorithm in `optimized_maze_solver.py`.
    - The user stays on the search results page for 'A* search algorithm for Python'
      on Google.
    - The user opens a new tab in the web browser to look for code optimization techniques.
    - The user types `def solve_maze(grid):` in the 'maze_solver.py' file in VS Code.
    - The user copies BFS pseudocode from an online tutorial and pastes it into their
      code editor.
    - The user scrolls through Stack Overflow discussions on common pitfalls in maze-solving
      algorithms.
    - The agent generates an explanation for how BFS is used in maze solving.
    - The agent fetches example code for implementing DFS in Python.
    - The agent opens the URL 'https://github.com/python-visualization/folium' to
      access visualization libraries.
    - The user clicks and scrolls within a maze-solving forum for optimized code examples.
    - The user types `python`, executes `cmd+v`, and presses `Enter` in the 'visualize_maze.py'
      file.
    - The user starts working on a file 'generate_random_maze.py' within a Python
      project in Visual Studio Code.
    - The user scrolls and views the page 'example/maze-algorithms/bfs-vs-dfs'.
    - The agent saves the generated visualization of the maze path as an image file.
    - The agent checks for updates in coding competition rules and guidelines on the
      relevant website.
    - The user types and edits code in 'solve_maze.py' in Visual Studio Code.
    - The agent opens the file `example_maze.png` and extracts the maze grid using
      OCR.
    - The agent analyzes the provided 'solve_maze.py' code for potential logical errors.
    - The user clicks and types 'procedural generation maze' in the search bar.
    theme: Maze Solver Optimization
  user:
    description: Ryan Mitchell is a 35-year-old Senior Software Engineer with proficiency
      in Python, Java, and C++. He enjoys algorithmic challenges and optimization
      problems, often spending weekends contributing to open-source projects and participating
      in hackathons.
    goal: Optimize a maze-solving function using the A* algorithm.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - generate_text(prompt)
    - read_text(image)
    - analyze_code(code_snippet)
    - visualize_path(maze_grid, path)
    - highlight_code_syntax(code_snippet)
    - display_flowchart(algorithm_steps)
    - fetch_example_code(topic)
    - optimize_code(code_snippet)
    description: David is developing a Python script to visualize maze solutions using
      libraries like Matplotlib or Pygame in his home office. His workspace is filled
      with graphic design tools and a high-resolution monitor. David is focused on
      creating an interactive and visually appealing representation of the maze-solving
      process.
    entities:
    - Laptop/Computer
    - Notebook/Whiteboard
    - Maze Grid (Input Data)
    - Python Libraries
    - Online Platforms/Coding Competitions
    - Coding Communities/Forums
    - Educational Resources
    - Personal Gadgets
    events_example:
    - The agent opens the browser and searches for tutorials on BFS algorithm in Python.
    - The agent opens the file `maze_solver.py` and identifies several syntax errors.
    - The agent reads recent email notifications about upcoming coding competitions.
    - The agent completes the terminal command to run the script `test_maze_solver.py`.
    - The agent saves the updated maze-solving algorithm in `optimized_maze_solver.py`.
    - The user stays on the search results page for 'A* search algorithm for Python'
      on Google.
    - The user opens a new tab in the web browser to look for code optimization techniques.
    - The user types `def solve_maze(grid):` in the 'maze_solver.py' file in VS Code.
    - The user copies BFS pseudocode from an online tutorial and pastes it into their
      code editor.
    - The user scrolls through Stack Overflow discussions on common pitfalls in maze-solving
      algorithms.
    - The agent generates an explanation for how BFS is used in maze solving.
    - The agent fetches example code for implementing DFS in Python.
    - The agent opens the URL 'https://github.com/python-visualization/folium' to
      access visualization libraries.
    - The user clicks and scrolls within a maze-solving forum for optimized code examples.
    - The user types `python`, executes `cmd+v`, and presses `Enter` in the 'visualize_maze.py'
      file.
    - The user starts working on a file 'generate_random_maze.py' within a Python
      project in Visual Studio Code.
    - The user scrolls and views the page 'example/maze-algorithms/bfs-vs-dfs'.
    - The agent saves the generated visualization of the maze path as an image file.
    - The agent checks for updates in coding competition rules and guidelines on the
      relevant website.
    - The user types and edits code in 'solve_maze.py' in Visual Studio Code.
    - The agent opens the file `example_maze.png` and extracts the maze grid using
      OCR.
    - The agent analyzes the provided 'solve_maze.py' code for potential logical errors.
    - The user clicks and types 'procedural generation maze' in the search bar.
    theme: Maze Solver Visualization
  user:
    description: David Park is a 32-year-old Computer Graphics Artist and Programmer
      skilled in Python, JavaScript, and graphic design tools like Blender and Adobe
      Photoshop. He enjoys teaching graphic programming workshops and incorporates
      art into his coding projects.
    goal: Develop a Python script to visualize maze solutions.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.fetch_text(url: str) -> str'
    - 'text_summarize(content: str) -> str'
    - 'text_edit(content: str, instructions: str) -> str'
    - 'image_recognize(file_path: str) -> str'
    description: Jessica, a mid-level dietitian and wellness blogger, is working from
      her home office in Portland, Oregon. She is analyzing three healthy eating apps
      to write a blog post comparing their main features, user feedback, and ratings.
      Her workspace is filled with natural light, and she is surrounded by her laptop,
      notepads, and a mug of green tea.
    entities:
    - Laptop
    - Notepads
    - Smartphone
    - Mug
    - Desk Organizer
    - Healthy Eating Apps
    - Online Review Platforms
    - Editorial Calendar
    - Blog Readers
    - Social Media Feedback
    - Professional Peer Network
    events_example:
    - The agent opens the browser and searches for reviews of three healthy eating
      apps.
    - The agent opens the file `app_comparison_notes.txt` and organizes the notes
      by categories.
    - The agent reads received feedback emails and compiles a summary of user opinions
      on the apps.
    - The user scrolls through multiple review sites in a web browser, reading feedback
      for different apps.
    - The user types 'features of Noom app' in the search bar and clicks on the first
      result.
    - The agent fetches and summarizes user feedback from Google Play and Apple App
      Store for the app MyFitnessPal.
    - The agent opens the document folder and renames the file `blog_draft_v1.docx`
      to `blog_draft_comparison_apps.docx`.
    - The user interacts with an app review page, scrolling down to read more user
      reviews.
    - The agent identifies and highlights key features of each app in a document.
    - The user switches from the document editor to the web browser to check another
      review page.
    - The agent opens the image `screenshot_Noam.png` to analyze the user interface.
    - The user searches for 'MyFitnessPal vs Yazio comparison' on Bing and reviews
      the search results.
    - The agent reads and summarizes a research article on the effectiveness of diet
      tracking apps.
    - The user types 'healthy eating apps feedback analysis' in the web search bar.
    - The agent saves the latest draft of the blog post with included feedback summaries.
    - The user copies text content from a comparison article using `ctrl+c`.
    - The agent opens the browser and retrieves the latest ratings for Yazio from
      the Apple App Store.
    - The agent scans and summarizes user comments from a healthy living forum about
      the app Noom.
    - The user pastes copied text into a document using `ctrl+v`.
    - The agent merges multiple text files containing app feature descriptions into
      a single document.
    - The user clicks on a link to a detailed review page for the MyFitnessPal app.
    - The agent performs a keyword search in the document editor for 'calorie tracker.'
    - The user switches back to the text editor to continue writing the blog post.
    - The agent identifies bugs in a document format and corrects them.
    - The user adjusts formatting settings in the document editor.
    - The agent analyzes an image `user_interface_Yazio.png` and describes the visual
      elements.
    - The agent highlights discrepancies in user feedback across different review
      platforms.
    - The user bookmarks a useful comparison article for later reference.
    - The agent updates the editorial calendar to reflect the new blog post timeline.
    - The user inputs their editorial notes into a document.
    - The agent fetches and displays the top three most common user complaints about
      Noom.
    - The user reopens the document to make final edits.
    - The agent recommends a structured blog post outline based on gathered data.
    - The user uses a text-to-speech app to listen to their draft.
    - The agent performs a final spell check and grammar check on the blog post.
    - The user inputs additional research findings from a newly found resource.
    - The agent copies visual data analysis to incorporate into the blog post.
    - The user clicks the 'save' button in the document editor.
    theme: Blog Post Writing on Healthy Eating Apps
  user:
    description: Jessica is a 32-year-old mid-level dietitian and wellness blogger.
      She is tech-savvy, with expertise in nutritional science and a balanced approach
      to health and wellness. Her blog, 'Nutritious Notes,' is trusted for its practical
      and evidence-based insights. Jessica is focused on delivering high-quality content
      to her readers, who rely on her for honest app reviews and wellness tips.
    goal: Analyze three healthy eating apps and write a blog post comparing their
      main features, user feedback, and ratings.
- environment:
    agent_ops:
    - "terminal_run(command: str) \u2192 dict"
    - "file_open(file_path: str) \u2192 str"
    - "file_save(file_path: str, content: str) \u2192 bool"
    - "browser_open(url: str) \u2192 None"
    - "api_request(method: str, url: str, headers: dict, payload: dict) \u2192 dict"
    - "parse_healthkit_data(file_path: str) \u2192 dict"
    - "generate_code_snippet(requirements: dict) \u2192 str"
    - "analyze_ui_image(image_path: str) \u2192 dict"
    - "suggest_design_improvements(ui_definitions: str) \u2192 list"
    description: Sarah Mitchell is working late at night in her home office, focusing
      on developing a fitness tracking app using SwiftUI. The room is dimly lit with
      a desk lamp, and she is surrounded by her MacBook Pro, dual monitors, and printed
      notes.
    entities:
    - MacBook Pro
    - Xcode IDE
    - HealthKit API
    - Fitness Wearable (Apple Watch)
    - GitHub Repository
    - YouTube Tutorials
    events_example:
    - The agent opens the browser and searches for 'SwiftUI tutorial for beginners.'
    - The agent fetches HealthKit API documentation from Apple's developer website.
    - The agent runs the terminal command `swift build` to compile the current Swift
      project.
    - The user opens 'FitnessApp.swift' in Xcode and begins editing.
    - The user switches to the 'Documentation' tab in their default web browser.
    - The agent analyzes the UI image 'design_mockup.png' for UX feedback.
    - The user sends a code snippet to a mentor via email for feedback.
    - The agent requests step count data from the HealthKit API for a specific date.
    - The user tests the app on an iPhone using the 'Run' button in Xcode.
    - The agent opens 'calories.py' and converts a Python algorithm to Swift code.
    - The user visits 'Stack Overflow' searching for solutions to a SwiftUI layout
      problem.
    - The agent saves changes in 'FitnessApp.swift' and closes the file.
    - The agent parses the HealthKit data from 'step_data.json'.
    - The user opens a Google search result page for 'SwiftUI best practices'.
    - The agent reads the error message from the terminal and provides potential fixes.
    - The user switches back to editing 'FitnessApp.swift' after re-reading the API
      documentation.
    - The agent adds a new entry to 'GitHub' repository's README file explaining the
      step-count feature.
    - The user opens a new tab and browses for 'SwiftUI animations tutorial.'
    - The agent suggests improvements to the calorie calculation algorithm based on
      current inputs.
    - The agent executes `git status` to check the current state of the repository.
    theme: Home Office Late Night Coding
  user:
    description: Sarah Mitchell, 28, is a freelance iOS developer with intermediate
      Swift skills and basic knowledge of SwiftUI. She enjoys working late nights
      from her home office and prefers minimalistic app designs. She is a regular
      fitness enthusiast who loves running and tracking physical activity.
    goal: Design a fitness tracking app in SwiftUI with step counting and calorie
      calculation features.
- environment:
    agent_ops:
    - "terminal_run(command: str) \u2192 dict"
    - "file_open(file_path: str) \u2192 str"
    - "file_save(file_path: str, content: str) \u2192 bool"
    - "browser_open(url: str) \u2192 None"
    - "api_request(method: str, url: str, headers: dict, payload: dict) \u2192 dict"
    - "parse_healthkit_data(file_path: str) \u2192 dict"
    - "generate_code_snippet(requirements: dict) \u2192 str"
    - "analyze_ui_image(image_path: str) \u2192 dict"
    - "suggest_design_improvements(ui_definitions: str) \u2192 list"
    description: "Michael Johnson is working on his fitness tracking app in a quiet\
      \ caf\xE9 early in the morning. The caf\xE9 has soft background music and the\
      \ smell of freshly brewed coffee. He is using his MacBook Pro and iPad Pro with\
      \ Apple Pencil to gather data and sketch out the application flow."
    entities:
    - High-End Windows Laptop
    - iPad Pro with Apple Pencil
    - Firebase Authentication
    - Data Visualization Libraries (e.g., SwiftCharts)
    - Team Communication Tools (e.g., Slack)
    - Co-Working Space Amenities
    events_example:
    - The agent opens the browser and searches for 'SwiftUI tutorial for beginners.'
    - The agent fetches HealthKit API documentation from Apple's developer website.
    - The agent runs the terminal command `swift build` to compile the current Swift
      project.
    - The user opens 'FitnessApp.swift' in Xcode and begins editing.
    - The user switches to the 'Documentation' tab in their default web browser.
    - The agent analyzes the UI image 'design_mockup.png' for UX feedback.
    - The user sends a code snippet to a mentor via email for feedback.
    - The agent requests step count data from the HealthKit API for a specific date.
    - The user tests the app on an iPhone using the 'Run' button in Xcode.
    - The agent opens 'calories.py' and converts a Python algorithm to Swift code.
    - The user visits 'Stack Overflow' searching for solutions to a SwiftUI layout
      problem.
    - The agent saves changes in 'FitnessApp.swift' and closes the file.
    - The agent parses the HealthKit data from 'step_data.json'.
    - The user opens a Google search result page for 'SwiftUI best practices'.
    - The agent reads the error message from the terminal and provides potential fixes.
    - The user switches back to editing 'FitnessApp.swift' after re-reading the API
      documentation.
    - The agent adds a new entry to 'GitHub' repository's README file explaining the
      step-count feature.
    - The user opens a new tab and browses for 'SwiftUI animations tutorial.'
    - The agent suggests improvements to the calorie calculation algorithm based on
      current inputs.
    - The agent executes `git status` to check the current state of the repository.
    theme: "Quiet Caf\xE9 Morning Coding"
  user:
    description: Michael Johnson, 35, is a senior mobile app developer at a tech startup
      with advanced Swift and SwiftUI skills. He prefers working mornings in quiet
      environments and enjoys adding detailed analytics and interactive elements to
      apps. He is interested in integrating apps with health data and providing detailed
      user insights.
    goal: Design a fitness tracking app in SwiftUI with step counting and calorie
      calculation features.
- environment:
    agent_ops:
    - "terminal_run(command: str) \u2192 dict"
    - "file_open(file_path: str) \u2192 str"
    - "file_save(file_path: str, content: str) \u2192 bool"
    - "browser_open(url: str) \u2192 None"
    - "api_request(method: str, url: str, headers: dict, payload: dict) \u2192 dict"
    - "parse_healthkit_data(file_path: str) \u2192 dict"
    - "generate_code_snippet(requirements: dict) \u2192 str"
    - "analyze_ui_image(image_path: str) \u2192 dict"
    - "suggest_design_improvements(ui_definitions: str) \u2192 list"
    description: Emily Chen is sitting at her kitchen table in the afternoon, following
      a beginner's SwiftUI tutorial on her iPad while coding on her MacBook Air. The
      table is cluttered with notes and references as she learns and experiments with
      SwiftUI.
    entities:
    - MacBook Air
    - "Beginner\u2019s SwiftUI Tutorials"
    - Printed Notes and Sketches
    - Online Forums and Communities (e.g., Stack Overflow)
    - Mentor
    - Kitchen Table Workspace
    events_example:
    - The agent opens the browser and searches for 'SwiftUI tutorial for beginners.'
    - The agent fetches HealthKit API documentation from Apple's developer website.
    - The agent runs the terminal command `swift build` to compile the current Swift
      project.
    - The user opens 'FitnessApp.swift' in Xcode and begins editing.
    - The user switches to the 'Documentation' tab in their default web browser.
    - The agent analyzes the UI image 'design_mockup.png' for UX feedback.
    - The user sends a code snippet to a mentor via email for feedback.
    - The agent requests step count data from the HealthKit API for a specific date.
    - The user tests the app on an iPhone using the 'Run' button in Xcode.
    - The agent opens 'calories.py' and converts a Python algorithm to Swift code.
    - The user visits 'Stack Overflow' searching for solutions to a SwiftUI layout
      problem.
    - The agent saves changes in 'FitnessApp.swift' and closes the file.
    - The agent parses the HealthKit data from 'step_data.json'.
    - The user opens a Google search result page for 'SwiftUI best practices'.
    - The agent reads the error message from the terminal and provides potential fixes.
    - The user switches back to editing 'FitnessApp.swift' after re-reading the API
      documentation.
    - The agent adds a new entry to 'GitHub' repository's README file explaining the
      step-count feature.
    - The user opens a new tab and browses for 'SwiftUI animations tutorial.'
    - The agent suggests improvements to the calorie calculation algorithm based on
      current inputs.
    - The agent executes `git status` to check the current state of the repository.
    theme: Kitchen Table Afternoon Learning
  user:
    description: Emily Chen, 23, is a junior iOS developer at a fitness tech company
      with basic Swift skills and familiarity with SwiftUI. She prefers hands-on learning
      and frequent guidance, enjoying vibrant, user-friendly interfaces. She is interested
      in fitness tracking and running marathons.
    goal: Design a fitness tracking app in SwiftUI with step counting and calorie
      calculation features.
- environment:
    agent_ops:
    - "terminal_run(command: str) \u2192 dict"
    - "file_open(file_path: str) \u2192 str"
    - "file_save(file_path: str, content: str) \u2192 bool"
    - "browser_open(url: str) \u2192 None"
    - "api_request(method: str, url: str, headers: dict, payload: dict) \u2192 dict"
    - "parse_healthkit_data(file_path: str) \u2192 dict"
    - "generate_code_snippet(requirements: dict) \u2192 str"
    - "analyze_ui_image(image_path: str) \u2192 dict"
    - "suggest_design_improvements(ui_definitions: str) \u2192 list"
    description: David Lee is working in a co-working space during the late afternoon,
      transitioning from full-stack development to mobile development. He is using
      a Mac Mini to run Xcode and experiment with SwiftUI, surrounded by other developers
      and collaborative tools.
    entities:
    - Mac Mini
    - JavaScript and React Codebases
    - IoT Fitness Devices
    - Networking Libraries (e.g., Alamofire)
    - Collaboration Tools (e.g., Confluence, Trello)
    - Evening Workshops and Meetups
    events_example:
    - The agent opens the browser and searches for 'SwiftUI tutorial for beginners.'
    - The agent fetches HealthKit API documentation from Apple's developer website.
    - The agent runs the terminal command `swift build` to compile the current Swift
      project.
    - The user opens 'FitnessApp.swift' in Xcode and begins editing.
    - The user switches to the 'Documentation' tab in their default web browser.
    - The agent analyzes the UI image 'design_mockup.png' for UX feedback.
    - The user sends a code snippet to a mentor via email for feedback.
    - The agent requests step count data from the HealthKit API for a specific date.
    - The user tests the app on an iPhone using the 'Run' button in Xcode.
    - The agent opens 'calories.py' and converts a Python algorithm to Swift code.
    - The user visits 'Stack Overflow' searching for solutions to a SwiftUI layout
      problem.
    - The agent saves changes in 'FitnessApp.swift' and closes the file.
    - The agent parses the HealthKit data from 'step_data.json'.
    - The user opens a Google search result page for 'SwiftUI best practices'.
    - The agent reads the error message from the terminal and provides potential fixes.
    - The user switches back to editing 'FitnessApp.swift' after re-reading the API
      documentation.
    - The agent adds a new entry to 'GitHub' repository's README file explaining the
      step-count feature.
    - The user opens a new tab and browses for 'SwiftUI animations tutorial.'
    - The agent suggests improvements to the calorie calculation algorithm based on
      current inputs.
    - The agent executes `git status` to check the current state of the repository.
    theme: Co-Working Space Evening Coding
  user:
    description: David Lee, 40, is a full-stack developer transitioning to mobile
      development with extensive experience in JavaScript, React, and Node.js. He
      is keen on learning Swift and SwiftUI, preferring to work in collaborative spaces
      during the evenings. He enjoys incorporating interactivity and connectivity
      in apps, particularly with IoT fitness devices.
    goal: Design a fitness tracking app in SwiftUI with step counting and calorie
      calculation features.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - code_suggest_fix(error_message, code_snippet)
    - doc_search(keyword)
    - code_refactor(code_snippet)
    - api_request(url, params)
    - database_query(query)
    - generate_visualization(data, chart_type)
    - display_message(message)
    - capture_screenshot(window_name)
    - highlight_text_in_editor(file_path, line_number)
    description: Alex is working late at night in his home office, focusing on a small
      Ruby script project. The room is dimly lit with a desk lamp, and instrumental
      jazz music plays softly in the background. He is trying to write a script to
      capitalize the first letter of user-entered names.
    entities:
    - Mechanical Keyboard
    - Multi-Monitor Setup
    - Notebook
    - GitHub Repository
    - Local Database
    - Automated Scripts
    - Online Forums
    - Music Playlist
    - Team Chats
    events_example:
    - The user starts coding a script named 'CapitalizeName.rb' in Visual Studio Code.
    - The agent opens the browser and searches for 'Ruby capitalize method syntax'
      on Google.
    - The user reviews previous GitHub commits to analyze recent script changes.
    - The user switches to the terminal and runs the Ruby script 'CapitalizeName.rb'.
    - The agent scans through the open file 'CapitalizeName.rb' and highlights lines
      with syntax errors.
    - The user scrolls through Ruby documentation for information on string manipulation
      functions.
    - The user switches back to Slack to check team messages about recent script errors.
    - The agent suggests a code snippet to fix the undefined method error in the Ruby
      script.
    - The user switches back to their code editor to implement the suggested fix.
    - The agent initializes a new file in the directory to document the script's change
      history.
    - The user opens an existing file 'UserData.csv' in the spreadsheet application.
    - The agent runs an automated unit test suite on the current Ruby project files.
    - The agent identifies incorrect file paths in the script after inspecting the
      open project files.
    - The user reviews system logs in a text viewer to trace errors encountered during
      script execution.
    - The user tabs through multiple code files currently opened in the editor.
    - The agent generates a report on the success rates of recent task automation
      scripts based on available log data.
    - The user takes a brief pause and checks notification alerts on the desktop.
    - The agent records a new Git commit with comments summarizing changes in 'CapitalizeName.rb'.
    - The user queries the database to verify data processing outcomes after running
      the script.
    - The agent reads through configuration files to verify environment settings for
      script execution.
    theme: Late Night Coding
  user:
    description: Alex, 29, is a software developer at a mid-sized tech company. He
      is proficient in Ruby, JavaScript, and Python. Alex enjoys automating tasks
      and improving code efficiency. He prefers working late at night when it's quiet
      and starts his coding sessions with a cup of herbal tea.
    goal: Write a Ruby script to automatically capitalize the first letter of user-entered
      names.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - code_suggest_fix(error_message, code_snippet)
    - doc_search(keyword)
    - code_refactor(code_snippet)
    - api_request(url, params)
    - database_query(query)
    - generate_visualization(data, chart_type)
    - display_message(message)
    - capture_screenshot(window_name)
    - highlight_text_in_editor(file_path, line_number)
    description: Sarah is working in her home office, focusing on a data analysis
      project. She has a data workstation optimized for processing large datasets
      and uses a combination of Ruby and statistical software. Her office features
      a whiteboard filled with data workflows and brainstorming ideas.
    entities:
    - Data Workstation
    - Statistical Software
    - Whiteboard
    - SQL Database
    - Reporting Tools
    - Excel Files
    - Client Feedback
    - Industry Trends
    - Colleague Input
    events_example:
    - The user starts coding a script named 'CapitalizeName.rb' in Visual Studio Code.
    - The agent opens the browser and searches for 'Ruby capitalize method syntax'
      on Google.
    - The user reviews previous GitHub commits to analyze recent script changes.
    - The user switches to the terminal and runs the Ruby script 'CapitalizeName.rb'.
    - The agent scans through the open file 'CapitalizeName.rb' and highlights lines
      with syntax errors.
    - The user scrolls through Ruby documentation for information on string manipulation
      functions.
    - The user switches back to Slack to check team messages about recent script errors.
    - The agent suggests a code snippet to fix the undefined method error in the Ruby
      script.
    - The user switches back to their code editor to implement the suggested fix.
    - The agent initializes a new file in the directory to document the script's change
      history.
    - The user opens an existing file 'UserData.csv' in the spreadsheet application.
    - The agent runs an automated unit test suite on the current Ruby project files.
    - The agent identifies incorrect file paths in the script after inspecting the
      open project files.
    - The user reviews system logs in a text viewer to trace errors encountered during
      script execution.
    - The user tabs through multiple code files currently opened in the editor.
    - The agent generates a report on the success rates of recent task automation
      scripts based on available log data.
    - The user takes a brief pause and checks notification alerts on the desktop.
    - The agent records a new Git commit with comments summarizing changes in 'CapitalizeName.rb'.
    - The user queries the database to verify data processing outcomes after running
      the script.
    - The agent reads through configuration files to verify environment settings for
      script execution.
    theme: Data Analysis
  user:
    description: Sarah, 34, is a data analyst at a marketing firm. She is experienced
      in Ruby, R, and SQL, and enjoys using Ruby for data manipulation and analysis
      tasks. Sarah works in a home office with a data workstation and a whiteboard
      filled with data workflows.
    goal: Write a Ruby script to automatically capitalize the first letter of user-entered
      names.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - code_suggest_fix(error_message, code_snippet)
    - doc_search(keyword)
    - code_refactor(code_snippet)
    - api_request(url, params)
    - database_query(query)
    - generate_visualization(data, chart_type)
    - display_message(message)
    - capture_screenshot(window_name)
    - highlight_text_in_editor(file_path, line_number)
    description: Mike is in his office at a manufacturing company, managing the IT
      infrastructure. He uses a server rack, monitoring dashboard, and command terminal
      to ensure systems run efficiently and securely. He is focused on writing scripts
      to automate backups and analyze log files.
    entities:
    - Server Rack
    - Monitoring Dashboard
    - Command Terminal
    - Log Files
    - Backup Solutions
    - Network Devices
    - Management Directives
    - System Alerts
    - Security Policies
    events_example:
    - The user starts coding a script named 'CapitalizeName.rb' in Visual Studio Code.
    - The agent opens the browser and searches for 'Ruby capitalize method syntax'
      on Google.
    - The user reviews previous GitHub commits to analyze recent script changes.
    - The user switches to the terminal and runs the Ruby script 'CapitalizeName.rb'.
    - The agent scans through the open file 'CapitalizeName.rb' and highlights lines
      with syntax errors.
    - The user scrolls through Ruby documentation for information on string manipulation
      functions.
    - The user switches back to Slack to check team messages about recent script errors.
    - The agent suggests a code snippet to fix the undefined method error in the Ruby
      script.
    - The user switches back to their code editor to implement the suggested fix.
    - The agent initializes a new file in the directory to document the script's change
      history.
    - The user opens an existing file 'UserData.csv' in the spreadsheet application.
    - The agent runs an automated unit test suite on the current Ruby project files.
    - The agent identifies incorrect file paths in the script after inspecting the
      open project files.
    - The user reviews system logs in a text viewer to trace errors encountered during
      script execution.
    - The user tabs through multiple code files currently opened in the editor.
    - The agent generates a report on the success rates of recent task automation
      scripts based on available log data.
    - The user takes a brief pause and checks notification alerts on the desktop.
    - The agent records a new Git commit with comments summarizing changes in 'CapitalizeName.rb'.
    - The user queries the database to verify data processing outcomes after running
      the script.
    - The agent reads through configuration files to verify environment settings for
      script execution.
    theme: IT Management
  user:
    description: Mike, 42, is an IT manager at a manufacturing company. He is knowledgeable
      in Ruby, Bash scripting, and network administration. Mike focuses on maintaining
      and improving the IT infrastructure, including automating backups and analyzing
      log files.
    goal: Write a Ruby script to automatically capitalize the first letter of user-entered
      names.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - code_suggest_fix(error_message, code_snippet)
    - doc_search(keyword)
    - code_refactor(code_snippet)
    - api_request(url, params)
    - database_query(query)
    - generate_visualization(data, chart_type)
    - display_message(message)
    - capture_screenshot(window_name)
    - highlight_text_in_editor(file_path, line_number)
    description: Linda is working from her home office as a freelance web developer.
      She uses a powerful laptop, a development server, and a tablet for testing.
      Linda is focused on writing scripts to validate user input forms and generate
      dynamic content for her personal website.
    entities:
    - Laptop
    - Development Server
    - Tablet
    - Web Browsers
    - Content Management System (CMS)
    - APIs
    - Client Requirements
    - SEO Best Practices
    - Personal Projects
    events_example:
    - The user starts coding a script named 'CapitalizeName.rb' in Visual Studio Code.
    - The agent opens the browser and searches for 'Ruby capitalize method syntax'
      on Google.
    - The user reviews previous GitHub commits to analyze recent script changes.
    - The user switches to the terminal and runs the Ruby script 'CapitalizeName.rb'.
    - The agent scans through the open file 'CapitalizeName.rb' and highlights lines
      with syntax errors.
    - The user scrolls through Ruby documentation for information on string manipulation
      functions.
    - The user switches back to Slack to check team messages about recent script errors.
    - The agent suggests a code snippet to fix the undefined method error in the Ruby
      script.
    - The user switches back to their code editor to implement the suggested fix.
    - The agent initializes a new file in the directory to document the script's change
      history.
    - The user opens an existing file 'UserData.csv' in the spreadsheet application.
    - The agent runs an automated unit test suite on the current Ruby project files.
    - The agent identifies incorrect file paths in the script after inspecting the
      open project files.
    - The user reviews system logs in a text viewer to trace errors encountered during
      script execution.
    - The user tabs through multiple code files currently opened in the editor.
    - The agent generates a report on the success rates of recent task automation
      scripts based on available log data.
    - The user takes a brief pause and checks notification alerts on the desktop.
    - The agent records a new Git commit with comments summarizing changes in 'CapitalizeName.rb'.
    - The user queries the database to verify data processing outcomes after running
      the script.
    - The agent reads through configuration files to verify environment settings for
      script execution.
    theme: Freelance Web Development
  user:
    description: Linda, 26, is a freelance web developer skilled in Ruby, Ruby on
      Rails, HTML/CSS, and JavaScript. She loves creating clean, responsive web applications
      and is focused on validating user input forms and generating dynamic content
      for her personal website.
    goal: Write a Ruby script to automatically capitalize the first letter of user-entered
      names.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - code_suggest_fix(error_message, code_snippet)
    - doc_search(keyword)
    - code_refactor(code_snippet)
    - api_request(url, params)
    - database_query(query)
    - generate_visualization(data, chart_type)
    - display_message(message)
    - capture_screenshot(window_name)
    - highlight_text_in_editor(file_path, line_number)
    description: John is working in his office at an educational institution, ensuring
      systems are running smoothly and securely. He uses a high-performance workstation
      PC, network tools, and backup drives. John is focused on writing scripts to
      automate system maintenance tasks and perform security audits.
    entities:
    - Workstation PC
    - Network Tools
    - Backup Drives
    - System Config Files
    - Asset Management System
    - Security Scanners
    - Institution Policies
    - Tech Support Requests
    - Compliance Requirements
    events_example:
    - The user starts coding a script named 'CapitalizeName.rb' in Visual Studio Code.
    - The agent opens the browser and searches for 'Ruby capitalize method syntax'
      on Google.
    - The user reviews previous GitHub commits to analyze recent script changes.
    - The user switches to the terminal and runs the Ruby script 'CapitalizeName.rb'.
    - The agent scans through the open file 'CapitalizeName.rb' and highlights lines
      with syntax errors.
    - The user scrolls through Ruby documentation for information on string manipulation
      functions.
    - The user switches back to Slack to check team messages about recent script errors.
    - The agent suggests a code snippet to fix the undefined method error in the Ruby
      script.
    - The user switches back to their code editor to implement the suggested fix.
    - The agent initializes a new file in the directory to document the script's change
      history.
    - The user opens an existing file 'UserData.csv' in the spreadsheet application.
    - The agent runs an automated unit test suite on the current Ruby project files.
    - The agent identifies incorrect file paths in the script after inspecting the
      open project files.
    - The user reviews system logs in a text viewer to trace errors encountered during
      script execution.
    - The user tabs through multiple code files currently opened in the editor.
    - The agent generates a report on the success rates of recent task automation
      scripts based on available log data.
    - The user takes a brief pause and checks notification alerts on the desktop.
    - The agent records a new Git commit with comments summarizing changes in 'CapitalizeName.rb'.
    - The user queries the database to verify data processing outcomes after running
      the script.
    - The agent reads through configuration files to verify environment settings for
      script execution.
    theme: System Administration
  user:
    description: John, 38, is a system administrator at an educational institution.
      He is proficient in Ruby, Perl, and Bash scripting. John ensures systems are
      running smoothly and securely, focusing on automating system maintenance tasks
      and performing security audits.
    goal: Write a Ruby script to automatically capitalize the first letter of user-entered
      names.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> list[str]'
    - 'browser.scrape_content(url: str) -> dict'
    - 'browser.collect_reviews(url: str) -> list[dict]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_directory(directory_path: str) -> list[str]'
    - 'text.summarize(content: str, length: int) -> str'
    - 'text.generate(content_type: str, **kwargs) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.extract_tables(file_path: str) -> list[pd.DataFrame]'
    - 'data.visualize(df: pd.DataFrame, chart_type: str, **kwargs) -> None'
    - 'data.compare_sets(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame'
    - 'urban.collect_transport_data(city: str) -> dict'
    description: Alex, an urban planner, is working from his home office on a sunny
      Wednesday afternoon. Surrounded by urban planning books, multiple monitors,
      and a whiteboard filled with notes, he is focused on gathering data and writing
      a detailed report on bike-sharing services.
    entities:
    - Laptop/PC
    - Urban Planning Books and Journals
    - Whiteboard
    - Coffee Mug
    - Ergonomic Chair and Desk
    - Online Databases
    - Data Visualization Tools
    - Digital Note-Taking Apps
    - Virtual Meetings
    - Colleagues and Supervisors
    - Urban Planning Community
    - Local Government Reports
    events_example:
    - The agent opens the browser and searches for reviews of the Citi Bike service
      in New York City.
    - The agent opens the file `BikeSharingReportDraft.docx` and identifies missing
      sections in the fee analysis.
    - The user reads transport policies from the official Amsterdam city website and
      takes notes on service provider regulations.
    - The agent compiles data from multiple Excel files into a single spreadsheet.
    - The user types 'Frequent issues in bike-sharing services' and presses 'Enter'
      in a Google search page.
    - The agent opens a PDF file titled `Paris_BikeSharePerformance2020.pdf` and extracts
      tables for user comparison.
    - 'The user scrolls through social media posts on Instagram tagged with #BikeSharingExperiences.'
    - The agent saves summarized user reviews from Yelp about bike-sharing services
      in San Francisco into a text document.
    - The user inputs 'ctrl+s' to save updates in an academic research paper on Microsoft
      Word.
    - The agent visualizes bike-sharing usage data with a bar chart in Tableau.
    theme: Urban Planner's Research
  user:
    description: Alex is a 28-year-old urban planner with a Master's degree in Urban
      Studies. He is tech-savvy, proficient in data analysis, and has a strong interest
      in sustainable transportation. Alex is detail-oriented and enjoys deep-diving
      into research topics, often utilizing various digital tools to gather and analyze
      data.
    goal: "Study service providers, fee structures, and user reviews from other cities\u2019\
      \ bike-sharing services and write a detailed report."
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> list[str]'
    - 'browser.scrape_content(url: str) -> dict'
    - 'browser.collect_reviews(url: str) -> list[dict]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_directory(directory_path: str) -> list[str]'
    - 'text.summarize(content: str, length: int) -> str'
    - 'text.generate(content_type: str, **kwargs) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.extract_tables(file_path: str) -> list[pd.DataFrame]'
    - 'data.visualize(df: pd.DataFrame, chart_type: str, **kwargs) -> None'
    - 'data.compare_sets(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame'
    - 'socialmedia.monitor_hashtags(hashtags: list[str]) -> list[dict]'
    description: Emily, a travel blogger, is in her cozy studio apartment in Portland
      on a rainy Saturday evening. Surrounded by travel magazines and notebooks, she
      is working on her laptop to create a blog post about bike-sharing services in
      various cities.
    entities:
    - Laptop/Tablet
    - Travel Magazines and Notebooks
    - Camera
    - Smartphone
    - Herbal Tea
    - Social Media Platforms
    - Travel Blogs and Forums
    - Content Management System
    - Photo Editing Software
    - Followers and Readers
    - Other Travel Bloggers
    - Tourism Boards and Travel Agencies
    events_example:
    - The agent opens the browser and searches for reviews of the Citi Bike service
      in New York City.
    - The agent opens the file `BikeSharingReportDraft.docx` and identifies missing
      sections in the fee analysis.
    - The user reads transport policies from the official Amsterdam city website and
      takes notes on service provider regulations.
    - The agent compiles data from multiple Excel files into a single spreadsheet.
    - The user types 'Frequent issues in bike-sharing services' and presses 'Enter'
      in a Google search page.
    - The agent opens a PDF file titled `Paris_BikeSharePerformance2020.pdf` and extracts
      tables for user comparison.
    - 'The user scrolls through social media posts on Instagram tagged with #BikeSharingExperiences.'
    - The agent saves summarized user reviews from Yelp about bike-sharing services
      in San Francisco into a text document.
    - The user inputs 'ctrl+s' to save updates in an academic research paper on Microsoft
      Word.
    - The agent visualizes bike-sharing usage data with a bar chart in Tableau.
    theme: Travel Blogger's Content Creation
  user:
    description: Emily is a 35-year-old travel blogger who specializes in eco-friendly
      and sustainable travel. She has a large following on social media and runs a
      popular blog. Emily is an experienced writer but not very tech-savvy. She often
      relies on readily available information and her personal experiences to create
      content.
    goal: "Study service providers, fee structures, and user reviews from other cities\u2019\
      \ bike-sharing services and write a detailed report."
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> list[str]'
    - 'browser.scrape_content(url: str) -> dict'
    - 'browser.collect_reviews(url: str) -> list[dict]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_directory(directory_path: str) -> list[str]'
    - 'text.summarize(content: str, length: int) -> str'
    - 'text.generate(content_type: str, **kwargs) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.extract_tables(file_path: str) -> list[pd.DataFrame]'
    - 'data.visualize(df: pd.DataFrame, chart_type: str, **kwargs) -> None'
    - 'data.compare_sets(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame'
    - 'academic.citation_assist(citations: list[str], format: str) -> list[str]'
    description: Sam, a college student, is in his university library late on a Tuesday
      night. Surrounded by textbooks and printed articles, he is working on his laptop
      to complete a research project on bike-sharing services.
    entities:
    - Laptop
    - Textbooks and Printed Articles
    - Notebooks
    - Highlighters and Sticky Notes
    - Snacks and Water Bottle
    - University Library Database
    - Survey Tools
    - Citation Tools
    - Study Group Members
    - Professors and Advisors
    - Academic Peers
    - University Policies and Deadlines
    events_example:
    - The agent opens the browser and searches for reviews of the Citi Bike service
      in New York City.
    - The agent opens the file `BikeSharingReportDraft.docx` and identifies missing
      sections in the fee analysis.
    - The user reads transport policies from the official Amsterdam city website and
      takes notes on service provider regulations.
    - The agent compiles data from multiple Excel files into a single spreadsheet.
    - The user types 'Frequent issues in bike-sharing services' and presses 'Enter'
      in a Google search page.
    - The agent opens a PDF file titled `Paris_BikeSharePerformance2020.pdf` and extracts
      tables for user comparison.
    - 'The user scrolls through social media posts on Instagram tagged with #BikeSharingExperiences.'
    - The agent saves summarized user reviews from Yelp about bike-sharing services
      in San Francisco into a text document.
    - The user inputs 'ctrl+s' to save updates in an academic research paper on Microsoft
      Word.
    - The agent visualizes bike-sharing usage data with a bar chart in Tableau.
    theme: College Student's Research
  user:
    description: Sam is a 21-year-old college student majoring in Environmental Science.
      He is moderately tech-savvy, comfortable using research databases and basic
      data analysis tools. Sam is passionate about sustainability and green transportation
      solutions. He is diligent in his studies but can get overwhelmed with large
      amounts of data.
    goal: "Study service providers, fee structures, and user reviews from other cities\u2019\
      \ bike-sharing services and write a detailed report."
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> list[str]'
    - 'browser.scrape_content(url: str) -> dict'
    - 'browser.collect_reviews(url: str) -> list[dict]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_directory(directory_path: str) -> list[str]'
    - 'text.summarize(content: str, length: int) -> str'
    - 'text.generate(content_type: str, **kwargs) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.extract_tables(file_path: str) -> list[pd.DataFrame]'
    - 'data.visualize(df: pd.DataFrame, chart_type: str, **kwargs) -> None'
    - 'data.compare_sets(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame'
    - 'market.analysis_review_trends(product: str) -> dict'
    description: Charlie, a small business owner, is in his bike shop on a busy weekday
      afternoon. He is using his desktop computer to research competing bike-sharing
      services and plan how to integrate a small-scale bike-sharing service into his
      business.
    entities:
    - Desktop Computer
    - Customer Feedback Forms
    - Inventory Management Software
    - Business Plan Documents
    - Competing Bike-Sharing Services
    - Customer Relationship Management (CRM) System
    - Digital Marketing Tools
    - Local Community Groups
    - Customers
    - Local Business Network
    - Suppliers and Partners
    events_example:
    - The agent opens the browser and searches for reviews of the Citi Bike service
      in New York City.
    - The agent opens the file `BikeSharingReportDraft.docx` and identifies missing
      sections in the fee analysis.
    - The user reads transport policies from the official Amsterdam city website and
      takes notes on service provider regulations.
    - The agent compiles data from multiple Excel files into a single spreadsheet.
    - The user types 'Frequent issues in bike-sharing services' and presses 'Enter'
      in a Google search page.
    - The agent opens a PDF file titled `Paris_BikeSharePerformance2020.pdf` and extracts
      tables for user comparison.
    - 'The user scrolls through social media posts on Instagram tagged with #BikeSharingExperiences.'
    - The agent saves summarized user reviews from Yelp about bike-sharing services
      in San Francisco into a text document.
    - The user inputs 'ctrl+s' to save updates in an academic research paper on Microsoft
      Word.
    - The agent visualizes bike-sharing usage data with a bar chart in Tableau.
    theme: Small Business Owner's Market Analysis
  user:
    description: Charlie is a 40-year-old owner of a local bike shop. He has skills
      in business management, customer service, and basic marketing. Charlie is interested
      in cycling, community engagement, and local business networking. He is planning
      to integrate a small-scale bike-sharing service into his existing business model.
    goal: "Study service providers, fee structures, and user reviews from other cities\u2019\
      \ bike-sharing services and write a detailed report."
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> list[str]'
    - 'browser.scrape_content(url: str) -> dict'
    - 'browser.collect_reviews(url: str) -> list[dict]'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.list_directory(directory_path: str) -> list[str]'
    - 'text.summarize(content: str, length: int) -> str'
    - 'text.generate(content_type: str, **kwargs) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.extract_tables(file_path: str) -> list[pd.DataFrame]'
    - 'data.visualize(df: pd.DataFrame, chart_type: str, **kwargs) -> None'
    - 'data.compare_sets(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame'
    - 'policy.compare_city_policies(cities: list[str], policy_type: str) -> pd.DataFrame'
    description: Diana, a government research analyst, is in her office at the local
      transportation department. She is using her work computer to review policies
      related to bike-sharing services and prepare a detailed policy recommendation
      report for city officials.
    entities:
    - Work Computer
    - Government Reports and Documents
    - Presentation Software
    - Desktop Filing System
    - Internal Databases
    - Public Engagement Platforms
    - Statistical Software
    - Policy Review Teams
    - City Officials and Decision Makers
    - Public Feedback
    - Interdepartmental Collaboration
    events_example:
    - The agent opens the browser and searches for reviews of the Citi Bike service
      in New York City.
    - The agent opens the file `BikeSharingReportDraft.docx` and identifies missing
      sections in the fee analysis.
    - The user reads transport policies from the official Amsterdam city website and
      takes notes on service provider regulations.
    - The agent compiles data from multiple Excel files into a single spreadsheet.
    - The user types 'Frequent issues in bike-sharing services' and presses 'Enter'
      in a Google search page.
    - The agent opens a PDF file titled `Paris_BikeSharePerformance2020.pdf` and extracts
      tables for user comparison.
    - 'The user scrolls through social media posts on Instagram tagged with #BikeSharingExperiences.'
    - The agent saves summarized user reviews from Yelp about bike-sharing services
      in San Francisco into a text document.
    - The user inputs 'ctrl+s' to save updates in an academic research paper on Microsoft
      Word.
    - The agent visualizes bike-sharing usage data with a bar chart in Tableau.
    theme: Government Research Analyst's Policy Review
  user:
    description: Diana is a 32-year-old research analyst for a local government transportation
      department. She has skills in policy analysis, statistical analysis, and public
      presentations. Diana is interested in public policy, urban mobility, and smart
      city initiatives. She is responsible for reviewing policies and preparing detailed
      reports for city officials.
    goal: "Study service providers, fee structures, and user reviews from other cities\u2019\
      \ bike-sharing services and write a detailed report."
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'browser_open(url: str) -> None'
    - 'image_recognition(image: str) -> dict'
    - 'text_summarization(text: str) -> str'
    - 'text_generation(prompt: str) -> str'
    - 'generate_chart(data: dict, chart_type: str) -> str'
    - 'aggregate_reviews(sources: list) -> dict'
    - 'set_reminder(time: str, message: str) -> None'
    - 'send_notification(device: str, message: str) -> None'
    - 'generate_comparison_table(data: dict) -> str'
    - 'fetch_financial_options(vehicle: str) -> dict'
    description: Alex Johnson is in his home office in Seattle, WA, equipped with
      multiple monitors, a high-performance laptop, a smart speaker, and a digital
      notepad. The room is well-lit with natural light and designed for efficient
      multitasking.
    entities:
    - Laptop and Multi-Monitor Setup
    - Smart Speaker
    - Stylus and Digital Notepad
    events_example:
    - The agent opens the browser and searches for reviews on Tesla Model 3.
    - The user clicks the mouse to open a tab on car comparison features.
    - The agent reads the received emails and identifies a newsletter from an automotive
      review site.
    - The user searches for 'Toyota Prius latest model safety ratings' on Google.
    - The agent opens the file on the desktop labeled 'car_specs.xlsx' to retrieve
      feature data.
    - The user types in the search bar, 'family-friendly electric cars 2023'.
    - The user clicks to expand the charging time section of a Ford Mustang Mach-E
      review.
    - The agent generates a chart comparing the charging times of Tesla, Ford, and
      Toyota cars.
    - "The user selects an option to schedule a test drive on a Tesla dealership\u2019\
      s website."
    - The agent tries to open a webpage but encounters a 404 error.
    - The user scrolls through a financial comparison website detailing car loans.
    - The agent saves a summarized document on car safety features to the file 'car_comparison.docx'.
    - The user switches back to a video review of the Toyota bZ4X to watch more details.
    - The agent schedules a reminder for the user to check back on financing options
      at 5 PM.
    - The user opens a new email from a car dealership offering special discounts.
    - The agent reads through forum posts about user experiences with after-sales
      service for the Mustang Mach-E.
    - The user views a price comparison chart in one of the open browser tabs.
    - The agent generates an aggregated review of Tesla Model Y from multiple sources.
    - The user shifts focus to their tablet to show car interiors to family members.
    - The agent sets up a notification for the user about a newly published car safety
      report.
    theme: Tech-Savvy Car Comparison
  user:
    description: Alex Johnson, a 35-year-old software developer from Seattle, WA,
      is tech-savvy and detail-oriented. He values in-depth research and is environmentally
      conscious, looking for an electric vehicle that meets his high standards for
      technology and sustainability.
    goal: Compare the features and prices of the latest models of Tesla, Ford, and
      Toyota to make an informed purchase decision.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'browser_open(url: str) -> None'
    - 'image_recognition(image: str) -> dict'
    - 'text_summarization(text: str) -> str'
    - 'text_generation(prompt: str) -> str'
    - 'generate_chart(data: dict, chart_type: str) -> str'
    - 'aggregate_reviews(sources: list) -> dict'
    - 'set_reminder(time: str, message: str) -> None'
    - 'send_notification(device: str, message: str) -> None'
    - 'generate_family_friendly_report(data: dict) -> str'
    - 'schedule_test_drive(dealer_info: dict) -> None'
    description: Emma Thompson is in her living room in San Francisco, CA, working
      on a lightweight laptop while her children play nearby. The room is cozy and
      filled with family-oriented gadgets, including a family-use tablet and wireless
      headphones for focused work.
    entities:
    - Laptop
    - Family Tablet
    - Wireless Headphones
    events_example:
    - The agent opens the browser and searches for reviews on Tesla Model 3.
    - The user clicks the mouse to open a tab on car comparison features.
    - The agent reads the received emails and identifies a newsletter from an automotive
      review site.
    - The user searches for 'Toyota Prius latest model safety ratings' on Google.
    - The agent opens the file on the desktop labeled 'car_specs.xlsx' to retrieve
      feature data.
    - The user types in the search bar, 'family-friendly electric cars 2023'.
    - The user clicks to expand the charging time section of a Ford Mustang Mach-E
      review.
    - The agent generates a chart comparing the charging times of Tesla, Ford, and
      Toyota cars.
    - "The user selects an option to schedule a test drive on a Tesla dealership\u2019\
      s website."
    - The agent tries to open a webpage but encounters a 404 error.
    - The user scrolls through a financial comparison website detailing car loans.
    - The agent saves a summarized document on car safety features to the file 'car_comparison.docx'.
    - The user switches back to a video review of the Toyota bZ4X to watch more details.
    - The agent schedules a reminder for the user to check back on financing options
      at 5 PM.
    - The user opens a new email from a car dealership offering special discounts.
    - The agent reads through forum posts about user experiences with after-sales
      service for the Mustang Mach-E.
    - The user views a price comparison chart in one of the open browser tabs.
    - The agent generates an aggregated review of Tesla Model Y from multiple sources.
    - The user shifts focus to their tablet to show car interiors to family members.
    - The agent sets up a notification for the user about a newly published car safety
      report.
    theme: Family-Friendly Car Research
  user:
    description: Emma Thompson, a 42-year-old marketing manager from San Francisco,
      CA, is practical and time-efficient. She values user experience and design,
      and is looking for a family-friendly electric vehicle that meets her family's
      needs.
    goal: Research family-friendly electric cars from Tesla, Ford, and Toyota to find
      the best option for her family.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> None'
    - 'browser_open(url: str) -> None'
    - 'image_recognition(image: str) -> dict'
    - 'text_summarization(text: str) -> str'
    - 'text_generation(prompt: str) -> str'
    - 'generate_chart(data: dict, chart_type: str) -> str'
    - 'aggregate_reviews(sources: list) -> dict'
    - 'set_reminder(time: str, message: str) -> None'
    - 'send_notification(device: str, message: str) -> None'
    - 'generate_environmental_impact_report(data: dict) -> str'
    - 'compare_sustainability_features(cars: list) -> dict'
    description: David Li is at his kitchen table in Denver, CO, surrounded by environmental
      research papers and a tablet. The space is organized and filled with eco-friendly
      gadgets, including a solar-powered calculator and documents on sustainable practices.
    entities:
    - Tablet
    - Outdoor Research Documents
    - Eco-Friendly Calculator
    events_example:
    - The agent opens the browser and searches for reviews on Tesla Model 3.
    - The user clicks the mouse to open a tab on car comparison features.
    - The agent reads the received emails and identifies a newsletter from an automotive
      review site.
    - The user searches for 'Toyota Prius latest model safety ratings' on Google.
    - The agent opens the file on the desktop labeled 'car_specs.xlsx' to retrieve
      feature data.
    - The user types in the search bar, 'family-friendly electric cars 2023'.
    - The user clicks to expand the charging time section of a Ford Mustang Mach-E
      review.
    - The agent generates a chart comparing the charging times of Tesla, Ford, and
      Toyota cars.
    - "The user selects an option to schedule a test drive on a Tesla dealership\u2019\
      s website."
    - The agent tries to open a webpage but encounters a 404 error.
    - The user scrolls through a financial comparison website detailing car loans.
    - The agent saves a summarized document on car safety features to the file 'car_comparison.docx'.
    - The user switches back to a video review of the Toyota bZ4X to watch more details.
    - The agent schedules a reminder for the user to check back on financing options
      at 5 PM.
    - The user opens a new email from a car dealership offering special discounts.
    - The agent reads through forum posts about user experiences with after-sales
      service for the Mustang Mach-E.
    - The user views a price comparison chart in one of the open browser tabs.
    - The agent generates an aggregated review of Tesla Model Y from multiple sources.
    - The user shifts focus to their tablet to show car interiors to family members.
    - The agent sets up a notification for the user about a newly published car safety
      report.
    theme: Eco-Conscious Car Selection
  user:
    description: David Li, a 29-year-old environmental scientist from Denver, CO,
      is passionate about sustainability and values comprehensive and transparent
      data. He is looking for an electric vehicle that has the least environmental
      impact.
    goal: Choose the most eco-friendly electric car between Tesla, Ford, and Toyota.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a given command in a terminal environment.
      parameters:
        command: String
      return_value: Output from the terminal (String), including any error messages.
    - action: file_open
      description: Opens and reads the content of a specified file.
      parameters:
        file_path: String
      return_value: Content of the file (String).
    - action: file_save
      description: Saves or overwrites content to a specified file.
      parameters:
        content: String
        file_path: String
      return_value: Success message or error details (String).
    - action: file_list
      description: Lists all files and directories at a specified path.
      parameters:
        directory_path: String
      return_value: List of files and directories (List of Strings).
    - action: browser_open
      description: Opens a specified URL in the web browser.
      parameters:
        url: String
      return_value: Page content (String) or screenshot (Image).
    - action: browser_inspect
      description: Inspects a particular HTML element on the webpage.
      parameters:
        element_selector: String
      return_value: Element details (String), including HTML and computed CSS.
    - action: code_review
      description: Analyzes the provided code to identify errors, inefficiencies,
        or areas for improvement.
      parameters:
        content: String
      return_value: Review feedback (String), including potential issues and suggestions
        for enhancement.
    - action: code_generate
      description: Generates a code snippet based on a given description of functionality.
      parameters:
        description: String
      return_value: Generated code snippet (String).
    - action: design_preview
      description: Previews a design by opening an image file to simulate how it would
        look in a browser or application.
      parameters:
        image_path: String
      return_value: Preview content (Image) or rendering details (String).
    - action: search_tutorial
      description: Searches online for tutorials related to the given query.
      parameters:
        query: String
      return_value: List of tutorial links and summaries (List of Strings).
    - action: recommend_library
      description: Suggests JavaScript libraries based on the required feature or
        functionality.
      parameters:
        feature: String
      return_value: List of recommended libraries with descriptions and usage examples
        (List of Strings).
    description: Alex is working from a cozy home office, equipped with a dual-monitor
      setup to increase productivity. It's a midweek evening around 7 PM, and ambient
      lo-fi music plays softly in the background to maintain focus. Alex is revamping
      the personal portfolio website to include interactive elements that make the
      site more engaging.
    entities:
    - Code Editor (e.g., VS Code)
    - Web Browser (e.g., Chrome, Firefox)
    - Design Mockup Tool (e.g., Figma, Adobe XD)
    - Website Portfolio
    - Version Control System (e.g., GitHub)
    - Online Tutorials and Forums
    - Peers/Colleagues
    - Uptrend Design Influences (e.g., Trends from Behance or Dribbble)
    - Time Constraints
    - AI Assistants (e.g., Code Review Tools, Chatbots)
    - Client Expectations
    events_example:
    - The user opens the file 'animations.js' in Visual Studio Code.
    - The agent searches online for 'how to create JavaScript hover animations'.
    - The agent opens the browser to the URL 'https://www.w3schools.com/jsref/event_onmouseover.asp'.
    - The user types and edits code within the opened 'animations.js' file.
    - The agent searches for JavaScript libraries for animations, listing alternatives
      like GSAP and Anime.js.
    - The user clicks the 'Run' button in Visual Studio Code to execute the script.
    - The agent inspects the button element on the locally hosted website.
    - The user scrolls through a Mozilla Developer Network article on JavaScript event
      listeners.
    - The agent opens the command terminal and runs 'npm install animejs' to add the
      Anime.js library.
    - The user saves changes to 'animations.js' and reloads the browser to test the
      effects.
    - The agent inspects the CSS properties of the button element using the browser
      dev tools.
    - The user pauses at a Stack Overflow page discussing JavaScript hover animations.
    - The agent opens the style.css file to review the button's CSS class.
    - The user scrolls and copies JavaScript code from an online tutorial.
    - The agent identifies potential errors in the 'fadeOut' function within 'animations.js'.
    - The user clicks on a link from the search results page for 'smooth CSS transitions'.
    - The agent reviews the combined CSS and JavaScript code for the button animations.
    - The user switches between the code editor and browser multiple times to test
      changes.
    - The agent lists files in the project directory.
    - The user navigates the 'Visual Studio Code Marketplace' to find relevant extensions
      for JavaScript animations.
    theme: Intermediate Web Development
  user:
    description: Alex is an intermediate web developer with a strong background in
      HTML and CSS. They are currently improving their JavaScript skills to enhance
      the interactivity of web applications. Alex is comfortable with basic scripting
      but occasionally consults references for more advanced functions. They enjoy
      experimenting with UI/UX design in their spare time, often incorporating new
      animation techniques into personal projects.
    goal: Write a JavaScript script to implement a fade-in and fade-out animation
      effect for buttons on hover.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - read_text(content)
    - generate_text(prompt)
    - read_image(image_path)
    - generate_html(content)
    - email_send(to, subject, body, attachments=[])
    - smtp_config(server, port, username, password, use_tls)
    - api_request(url, method, headers={}, data={})
    - config_set(key, value)
    - log_data(message, level)
    description: Alice Thompson is working late at night in her home office, trying
      to write a Ruby script to automatically generate and send personalized thank-you
      emails with HTML content for new customers.
    entities:
    - Laptop
    - Visual Studio Code
    - Notebook
    - Email Server
    - GitHub Repository
    - Team Leader
    - Online Ruby Community
    events_example:
    - The agent opens the terminal and runs the command `gem install mail` to install
      the Ruby email gem.
    - The user opens a browser and searches for 'SMTP settings for Ruby on Rails'.
    - The agent reads the error log from the file `email_script_errors.log` and identifies
      an uninitialized constant.
    - The user opens the `email_template.html` file in VS Code and adjusts the header
      text color.
    - The agent configures the SMTP settings by setting the server to `smtp.example.com`,
      port to `587`, and enabling TLS.
    - The user right-clicks and clicks several times on the Google search results
      page for 'ruby generate email with attachment'.
    - The agent saves updates to the `email_script.rb` file with improved attachment
      handling logic.
    - The user switches back to the 'Code.exe' application without performing any
      actions.
    - The agent logs the message 'Email sent successfully' at the INFO level in the
      application's log file.
    - The user scrolls through the responses in a StackOverflow thread about Ruby
      email automation issues.
    - The agent retrieves configuration details from a file named `config.yml` and
      updates the email retries setting to 3.
    - The user types 'ruby how to send email with pdf attachment' into a Google search
      and presses 'Enter'.
    - The agent opens a new browser tab and navigates to `https://github.com/mikel/mail`.
    - The user typed 'smtp settings for Gmail' in the chat application and shared
      the query in a programming forum.
    - The agent reads the text content from the file `email_body.txt` and integrates
      it into the email script.
    - The user switches to view the Mail gem documentation page but does not perform
      any further action.
    - The agent sends an email to `test@example.com` with the subject `Test Email`
      and logs the operation success.
    - The user clicks on a tutorial link from a blog post on automating emails using
      Ruby.
    - The agent opens the browser and searches for the solution to 'ruby email attachment
      not working'.
    - The user scrolls through the API documentation for the Mail gem on GitHub.
    theme: Junior Developer Email Automation
  user:
    description: Alice Thompson, 29 years old, is a Junior Web Developer at a tech
      startup. She has basic Ruby, HTML/CSS, and JavaScript skills, and is learning
      Test-Driven Development (TDD). She prefers working late at night, enjoys using
      VS Code, and likes to keep her code clean and well-documented.
    goal: Write a Ruby script to automatically generate and send personalized thank-you
      emails with HTML content for new customers.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - read_text(content)
    - generate_text(prompt)
    - read_image(image_path)
    - generate_html(content)
    - email_send(to, subject, body, attachments=[])
    - smtp_config(server, port, username, password, use_tls)
    - api_request(url, method, headers={}, data={})
    - config_set(key, value)
    - log_data(message, level)
    description: Benjamin Carter is developing a Ruby script to automate periodic
      reports to stakeholders with PDF attachments, ensuring compatibility with the
      non-profit's cloud infrastructure and secure data transfer.
    entities:
    - Desktop Workstation
    - Security Software
    - Cloud Server Dashboard
    - Stakeholder Emails
    - IT Team
    - Board of Directors
    - Industry Regulations
    events_example:
    - The agent opens the terminal and runs the command `gem install mail` to install
      the Ruby email gem.
    - The user opens a browser and searches for 'SMTP settings for Ruby on Rails'.
    - The agent reads the error log from the file `email_script_errors.log` and identifies
      an uninitialized constant.
    - The user opens the `email_template.html` file in VS Code and adjusts the header
      text color.
    - The agent configures the SMTP settings by setting the server to `smtp.example.com`,
      port to `587`, and enabling TLS.
    - The user right-clicks and clicks several times on the Google search results
      page for 'ruby generate email with attachment'.
    - The agent saves updates to the `email_script.rb` file with improved attachment
      handling logic.
    - The user switches back to the 'Code.exe' application without performing any
      actions.
    - The agent logs the message 'Email sent successfully' at the INFO level in the
      application's log file.
    - The user scrolls through the responses in a StackOverflow thread about Ruby
      email automation issues.
    - The agent retrieves configuration details from a file named `config.yml` and
      updates the email retries setting to 3.
    - The user types 'ruby how to send email with pdf attachment' into a Google search
      and presses 'Enter'.
    - The agent opens a new browser tab and navigates to `https://github.com/mikel/mail`.
    - The user typed 'smtp settings for Gmail' in the chat application and shared
      the query in a programming forum.
    - The agent reads the text content from the file `email_body.txt` and integrates
      it into the email script.
    - The user switches to view the Mail gem documentation page but does not perform
      any further action.
    - The agent sends an email to `test@example.com` with the subject `Test Email`
      and logs the operation success.
    - The user clicks on a tutorial link from a blog post on automating emails using
      Ruby.
    - The agent opens the browser and searches for the solution to 'ruby email attachment
      not working'.
    - The user scrolls through the API documentation for the Mail gem on GitHub.
    theme: IT Director Report Automation
  user:
    description: Benjamin Carter, 45 years old, is the IT Director at a non-profit
      organization. He has advanced skills in Ruby, Python, and Cloud Computing, with
      a strong background in system automation. He is responsible for ensuring secure
      and efficient report delivery to stakeholders.
    goal: Develop a Ruby script to automate periodic reports to stakeholders with
      PDF attachments.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - read_text(content)
    - generate_text(prompt)
    - read_image(image_path)
    - generate_html(content)
    - email_send(to, subject, body, attachments=[])
    - smtp_config(server, port, username, password, use_tls)
    - api_request(url, method, headers={}, data={})
    - config_set(key, value)
    - log_data(message, level)
    description: Chloe Ramirez is creating a Ruby script to send client invoices with
      HTML-formatted details and attachments of receipts, while implementing an error
      logging system and optimizing for batch processing.
    entities:
    - Tablet
    - Mail API Client
    - Client Data Repository
    - Web Hosting Service
    - Freelance Community Network
    - E-commerce Trends
    events_example:
    - The agent opens the terminal and runs the command `gem install mail` to install
      the Ruby email gem.
    - The user opens a browser and searches for 'SMTP settings for Ruby on Rails'.
    - The agent reads the error log from the file `email_script_errors.log` and identifies
      an uninitialized constant.
    - The user opens the `email_template.html` file in VS Code and adjusts the header
      text color.
    - The agent configures the SMTP settings by setting the server to `smtp.example.com`,
      port to `587`, and enabling TLS.
    - The user right-clicks and clicks several times on the Google search results
      page for 'ruby generate email with attachment'.
    - The agent saves updates to the `email_script.rb` file with improved attachment
      handling logic.
    - The user switches back to the 'Code.exe' application without performing any
      actions.
    - The agent logs the message 'Email sent successfully' at the INFO level in the
      application's log file.
    - The user scrolls through the responses in a StackOverflow thread about Ruby
      email automation issues.
    - The agent retrieves configuration details from a file named `config.yml` and
      updates the email retries setting to 3.
    - The user types 'ruby how to send email with pdf attachment' into a Google search
      and presses 'Enter'.
    - The agent opens a new browser tab and navigates to `https://github.com/mikel/mail`.
    - The user typed 'smtp settings for Gmail' in the chat application and shared
      the query in a programming forum.
    - The agent reads the text content from the file `email_body.txt` and integrates
      it into the email script.
    - The user switches to view the Mail gem documentation page but does not perform
      any further action.
    - The agent sends an email to `test@example.com` with the subject `Test Email`
      and logs the operation success.
    - The user clicks on a tutorial link from a blog post on automating emails using
      Ruby.
    - The agent opens the browser and searches for the solution to 'ruby email attachment
      not working'.
    - The user scrolls through the API documentation for the Mail gem on GitHub.
    theme: Freelance Invoice Automation
  user:
    description: Chloe Ramirez, 35 years old, is a Freelance Software Engineer with
      intermediate skills in Ruby, Mail APIs, and SQLite. She has experience in building
      client-side applications and is focused on automating her freelance invoice
      dispatch.
    goal: Create a Ruby script to send client invoices with HTML-formatted details
      and attachments of receipts.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - read_text(content)
    - generate_text(prompt)
    - read_image(image_path)
    - generate_html(content)
    - email_send(to, subject, body, attachments=[])
    - smtp_config(server, port, username, password, use_tls)
    - api_request(url, method, headers={}, data={})
    - config_set(key, value)
    - log_data(message, level)
    description: Daniel Nguyen is guiding a coding class on building an email automation
      project using Ruby with HTML content, developing example scripts, and conducting
      review sessions.
    entities:
    - Whiteboard
    - Scripting Guides
    - Classroom Tools
    - Course Management System
    - Student Feedback
    - Educational Standards
    events_example:
    - The agent opens the terminal and runs the command `gem install mail` to install
      the Ruby email gem.
    - The user opens a browser and searches for 'SMTP settings for Ruby on Rails'.
    - The agent reads the error log from the file `email_script_errors.log` and identifies
      an uninitialized constant.
    - The user opens the `email_template.html` file in VS Code and adjusts the header
      text color.
    - The agent configures the SMTP settings by setting the server to `smtp.example.com`,
      port to `587`, and enabling TLS.
    - The user right-clicks and clicks several times on the Google search results
      page for 'ruby generate email with attachment'.
    - The agent saves updates to the `email_script.rb` file with improved attachment
      handling logic.
    - The user switches back to the 'Code.exe' application without performing any
      actions.
    - The agent logs the message 'Email sent successfully' at the INFO level in the
      application's log file.
    - The user scrolls through the responses in a StackOverflow thread about Ruby
      email automation issues.
    - The agent retrieves configuration details from a file named `config.yml` and
      updates the email retries setting to 3.
    - The user types 'ruby how to send email with pdf attachment' into a Google search
      and presses 'Enter'.
    - The agent opens a new browser tab and navigates to `https://github.com/mikel/mail`.
    - The user typed 'smtp settings for Gmail' in the chat application and shared
      the query in a programming forum.
    - The agent reads the text content from the file `email_body.txt` and integrates
      it into the email script.
    - The user switches to view the Mail gem documentation page but does not perform
      any further action.
    - The agent sends an email to `test@example.com` with the subject `Test Email`
      and logs the operation success.
    - The user clicks on a tutorial link from a blog post on automating emails using
      Ruby.
    - The agent opens the browser and searches for the solution to 'ruby email attachment
      not working'.
    - The user scrolls through the API documentation for the Mail gem on GitHub.
    theme: Coding Tutor Email Project
  user:
    description: Daniel Nguyen, 60 years old, is a retired Software Architect and
      part-time coding tutor. He is an expert in Ruby, Java, and design patterns,
      with experience in enterprise applications. He enjoys mentoring junior developers
      and focuses on teaching best practices.
    goal: Guide a coding class on building an email automation project using Ruby
      with HTML content.
- environment:
    agent_ops:
    - terminal_run(command)
    - file_open(file_path)
    - file_save(file_path, content)
    - browser_open(url)
    - read_text(content)
    - generate_text(prompt)
    - read_image(image_path)
    - generate_html(content)
    - email_send(to, subject, body, attachments=[])
    - smtp_config(server, port, username, password, use_tls)
    - api_request(url, method, headers={}, data={})
    - config_set(key, value)
    - log_data(message, level)
    description: Emily Zhang is writing a Ruby script to schedule and send research
      updates via email with HTML and data visualization attachments, experimenting
      with different libraries to enhance email styling.
    entities:
    - Research Database
    - IDE
    - University Network
    - Research Supervisors
    - Collaborative Platform
    - Conferences and Workshops
    events_example:
    - The agent opens the terminal and runs the command `gem install mail` to install
      the Ruby email gem.
    - The user opens a browser and searches for 'SMTP settings for Ruby on Rails'.
    - The agent reads the error log from the file `email_script_errors.log` and identifies
      an uninitialized constant.
    - The user opens the `email_template.html` file in VS Code and adjusts the header
      text color.
    - The agent configures the SMTP settings by setting the server to `smtp.example.com`,
      port to `587`, and enabling TLS.
    - The user right-clicks and clicks several times on the Google search results
      page for 'ruby generate email with attachment'.
    - The agent saves updates to the `email_script.rb` file with improved attachment
      handling logic.
    - The user switches back to the 'Code.exe' application without performing any
      actions.
    - The agent logs the message 'Email sent successfully' at the INFO level in the
      application's log file.
    - The user scrolls through the responses in a StackOverflow thread about Ruby
      email automation issues.
    - The agent retrieves configuration details from a file named `config.yml` and
      updates the email retries setting to 3.
    - The user types 'ruby how to send email with pdf attachment' into a Google search
      and presses 'Enter'.
    - The agent opens a new browser tab and navigates to `https://github.com/mikel/mail`.
    - The user typed 'smtp settings for Gmail' in the chat application and shared
      the query in a programming forum.
    - The agent reads the text content from the file `email_body.txt` and integrates
      it into the email script.
    - The user switches to view the Mail gem documentation page but does not perform
      any further action.
    - The agent sends an email to `test@example.com` with the subject `Test Email`
      and logs the operation success.
    - The user clicks on a tutorial link from a blog post on automating emails using
      Ruby.
    - The agent opens the browser and searches for the solution to 'ruby email attachment
      not working'.
    - The user scrolls through the API documentation for the Mail gem on GitHub.
    theme: Graduate Student Research Updates
  user:
    description: Emily Zhang, 25 years old, is a Graduate Student in Computer Science.
      She is proficient in Ruby, API development, and data analysis, and is an active
      contributor to open-source projects. She is focused on automating the dissemination
      of her research updates.
    goal: Write a Ruby script to schedule and send research updates via email with
      HTML and data visualization attachments.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.scrape_content(url)
    - image.read(image_path)
    - document.read(file_path)
    - document.generate(content, format)
    - document.append(file_path, additional_content)
    - generate.text_prompt(prompt)
    - data.visualize(table_data, chart_type)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.append(file_path, content)
    - terminal_run(command)
    - email.send(to, subject, body, attachments)
    - chat.message(contact, content)
    description: 'Emily Johnson, a freelance journalist, is working from her home
      office to research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands: EcoChic, GreenThreads, and PlanetWear.
      Her workspace includes a laptop, digital planner, and various reference books.
      She uses multiple online tools and resources to gather and organize information.'
    entities:
    - Laptop
    - Digital Planner
    - External Hard Drive
    - Books and Journals
    - Internet Browser
    - Professional Network
    - Online Forums
    - News Feeds
    events_example:
    - The agent opens the browser and searches for 'sustainable fashion brand comparisons.'
    - The user types into Google Docs and creates a new document titled 'EcoChic Research.'
    - The agent analyzes an image featuring a product catalog from GreenThreads and
      extracts text descriptions.
    - The user scrolls through EcoChic's website, focusing on the 'Materials Used'
      section.
    - The agent generates a bar chart comparing price ranges of EcoChic, GreenThreads,
      and PlanetWear.
    - The user clicks on a tab to open a review article about sustainable fashion
      trends.
    - The agent scrapes product descriptions and pricing information from PlanetWear's
      website.
    - The user uses 'ctrl+c' to copy text from an academic journal on sustainable
      materials.
    - The agent saves a draft document titled 'Sustainable Fashion Article Draft 1'
      with recent edits.
    - The agent sends an email to a colleague requesting feedback on a comparison
      chart.
    - The user switches tabs in the web browser to check a competitor's analysis of
      GreenThreads.
    - The agent reads a social media post analyzing customer feedback about EcoChic.
    - The user highlights text in a PDF about environmental certifications in the
      fashion industry.
    - The agent identifies and lists the latest promotional campaigns run by PlanetWear.
    - The user moves the mouse to select text in a brand impact report within Microsoft
      Word.
    - The agent reviews a spreadsheet containing historical price data for sustainable
      fashion items.
    - The user opens a bookmarked page on ethical fashion statistics for further reading.
    - The agent converts extracted brand data into a PDF report for the user to review.
    - The agent operates terminal commands to organize downloaded files by brand and
      date.
    - The user clicks to zoom in on a product image while browsing PlanetWear's online
      store.
    theme: Freelance Journalist Research
  user:
    description: Emily Johnson is a 32-year-old freelance journalist with intermediate
      writing and editing skills. She values sustainability and ethical consumerism,
      often promoting these topics in her writing. Emily prefers clear, concise, and
      fact-checked information, and she uses a distraction-free environment to organize
      her work efficiently.
    goal: Research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands and write an article.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.scrape_content(url)
    - image.read(image_path)
    - document.read(file_path)
    - document.generate(content, format)
    - document.append(file_path, additional_content)
    - generate.text_prompt(prompt)
    - data.visualize(table_data, chart_type)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.append(file_path, content)
    - terminal_run(command)
    - email.send(to, subject, body, attachments)
    - chat.message(contact, content)
    description: 'Mark Lewis, a content creator and blogger, is working from his home
      office to research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands: EcoChic, GreenThreads, and PlanetWear.
      His workspace includes a high-powered desktop with dual monitors, a graphic
      tablet, and various SEO tools. He uses multiple online tools and resources to
      gather and organize information.'
    entities:
    - Desktop Computer
    - Graphic Tablet
    - Social Media Accounts
    - SEO Tools
    - WordPress Dashboard
    - Followers and Audience
    - Marketing Tools
    - Competitor Blogs
    events_example:
    - The agent opens the browser and searches for 'sustainable fashion brand comparisons.'
    - The user types into Google Docs and creates a new document titled 'EcoChic Research.'
    - The agent analyzes an image featuring a product catalog from GreenThreads and
      extracts text descriptions.
    - The user scrolls through EcoChic's website, focusing on the 'Materials Used'
      section.
    - The agent generates a bar chart comparing price ranges of EcoChic, GreenThreads,
      and PlanetWear.
    - The user clicks on a tab to open a review article about sustainable fashion
      trends.
    - The agent scrapes product descriptions and pricing information from PlanetWear's
      website.
    - The user uses 'ctrl+c' to copy text from an academic journal on sustainable
      materials.
    - The agent saves a draft document titled 'Sustainable Fashion Article Draft 1'
      with recent edits.
    - The agent sends an email to a colleague requesting feedback on a comparison
      chart.
    - The user switches tabs in the web browser to check a competitor's analysis of
      GreenThreads.
    - The agent reads a social media post analyzing customer feedback about EcoChic.
    - The user highlights text in a PDF about environmental certifications in the
      fashion industry.
    - The agent identifies and lists the latest promotional campaigns run by PlanetWear.
    - The user moves the mouse to select text in a brand impact report within Microsoft
      Word.
    - The agent reviews a spreadsheet containing historical price data for sustainable
      fashion items.
    - The user opens a bookmarked page on ethical fashion statistics for further reading.
    - The agent converts extracted brand data into a PDF report for the user to review.
    - The agent operates terminal commands to organize downloaded files by brand and
      date.
    - The user clicks to zoom in on a product image while browsing PlanetWear's online
      store.
    theme: Content Creator and Blogger Research
  user:
    description: Mark Lewis is a 28-year-old content creator and blogger with skills
      in SEO and content marketing. He is proficient in using graphic design tools
      and content management systems. Mark has strong analytical skills for understanding
      market trends and engages with his followers to shape his content strategy.
    goal: Research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands and write an article.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.scrape_content(url)
    - image.read(image_path)
    - document.read(file_path)
    - document.generate(content, format)
    - document.append(file_path, additional_content)
    - generate.text_prompt(prompt)
    - data.visualize(table_data, chart_type)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.append(file_path, content)
    - terminal_run(command)
    - email.send(to, subject, body, attachments)
    - chat.message(contact, content)
    description: 'Sarah Kim, a PR specialist, is working from her office to research
      and compare the product ranges, prices, and market positioning of three sustainable
      fashion brands: EcoChic, GreenThreads, and PlanetWear. Her workspace includes
      a smartphone, PR software, and various document templates. She uses multiple
      online tools and resources to gather and organize information.'
    entities:
    - Smartphone
    - PR Software
    - Email Manager
    - Brand Ambassadors
    - Document Templates
    - Editorial Guidelines
    - Media Contacts
    - Industry Events
    events_example:
    - The agent opens the browser and searches for 'sustainable fashion brand comparisons.'
    - The user types into Google Docs and creates a new document titled 'EcoChic Research.'
    - The agent analyzes an image featuring a product catalog from GreenThreads and
      extracts text descriptions.
    - The user scrolls through EcoChic's website, focusing on the 'Materials Used'
      section.
    - The agent generates a bar chart comparing price ranges of EcoChic, GreenThreads,
      and PlanetWear.
    - The user clicks on a tab to open a review article about sustainable fashion
      trends.
    - The agent scrapes product descriptions and pricing information from PlanetWear's
      website.
    - The user uses 'ctrl+c' to copy text from an academic journal on sustainable
      materials.
    - The agent saves a draft document titled 'Sustainable Fashion Article Draft 1'
      with recent edits.
    - The agent sends an email to a colleague requesting feedback on a comparison
      chart.
    - The user switches tabs in the web browser to check a competitor's analysis of
      GreenThreads.
    - The agent reads a social media post analyzing customer feedback about EcoChic.
    - The user highlights text in a PDF about environmental certifications in the
      fashion industry.
    - The agent identifies and lists the latest promotional campaigns run by PlanetWear.
    - The user moves the mouse to select text in a brand impact report within Microsoft
      Word.
    - The agent reviews a spreadsheet containing historical price data for sustainable
      fashion items.
    - The user opens a bookmarked page on ethical fashion statistics for further reading.
    - The agent converts extracted brand data into a PDF report for the user to review.
    - The agent operates terminal commands to organize downloaded files by brand and
      date.
    - The user clicks to zoom in on a product image while browsing PlanetWear's online
      store.
    theme: PR Specialist Research
  user:
    description: Sarah Kim is a 25-year-old PR specialist with excellent communication
      and writing skills. She has experience in brand management and public relations
      and is skilled in using PR monitoring tools. Sarah is proficient in crafting
      press releases and media statements, ensuring professional and consistent formats.
    goal: Research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands and write an article.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.scrape_content(url)
    - image.read(image_path)
    - document.read(file_path)
    - document.generate(content, format)
    - document.append(file_path, additional_content)
    - generate.text_prompt(prompt)
    - data.visualize(table_data, chart_type)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.append(file_path, content)
    - terminal_run(command)
    - email.send(to, subject, body, attachments)
    - chat.message(contact, content)
    description: 'David Martinez, an environmental scientist and part-time writer,
      is working from his home office to research and compare the product ranges,
      prices, and market positioning of three sustainable fashion brands: EcoChic,
      GreenThreads, and PlanetWear. His workspace includes research software, environmental
      databases, and various scientific journals. He uses multiple online tools and
      resources to gather and organize information.'
    entities:
    - Research Software
    - Environmental Databases
    - Scientific Journals
    - University Access
    - Environmental Testing Kits
    - Research Community
    - Academic Advisors
    - Funding Bodies
    events_example:
    - The agent opens the browser and searches for 'sustainable fashion brand comparisons.'
    - The user types into Google Docs and creates a new document titled 'EcoChic Research.'
    - The agent analyzes an image featuring a product catalog from GreenThreads and
      extracts text descriptions.
    - The user scrolls through EcoChic's website, focusing on the 'Materials Used'
      section.
    - The agent generates a bar chart comparing price ranges of EcoChic, GreenThreads,
      and PlanetWear.
    - The user clicks on a tab to open a review article about sustainable fashion
      trends.
    - The agent scrapes product descriptions and pricing information from PlanetWear's
      website.
    - The user uses 'ctrl+c' to copy text from an academic journal on sustainable
      materials.
    - The agent saves a draft document titled 'Sustainable Fashion Article Draft 1'
      with recent edits.
    - The agent sends an email to a colleague requesting feedback on a comparison
      chart.
    - The user switches tabs in the web browser to check a competitor's analysis of
      GreenThreads.
    - The agent reads a social media post analyzing customer feedback about EcoChic.
    - The user highlights text in a PDF about environmental certifications in the
      fashion industry.
    - The agent identifies and lists the latest promotional campaigns run by PlanetWear.
    - The user moves the mouse to select text in a brand impact report within Microsoft
      Word.
    - The agent reviews a spreadsheet containing historical price data for sustainable
      fashion items.
    - The user opens a bookmarked page on ethical fashion statistics for further reading.
    - The agent converts extracted brand data into a PDF report for the user to review.
    - The agent operates terminal commands to organize downloaded files by brand and
      date.
    - The user clicks to zoom in on a product image while browsing PlanetWear's online
      store.
    theme: Environmental Scientist Research
  user:
    description: David Martinez is a 35-year-old environmental scientist and part-time
      writer with strong research skills focused on sustainability and environmental
      impact. He is proficient in technical writing and data analysis and familiar
      with academic journals and scientific publications. David occasionally uses
      environmental testing kits for empirical data.
    goal: Research and compare the product ranges, prices, and market positioning
      of three sustainable fashion brands and write an article.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(image_path: str) -> dict'
    - 'text.generate(prompt: str, max_length: int=250) -> str'
    - 'database.query(query: str) -> list'
    - 'spreadsheet.create(data: dict, template: str) -> str'
    description: Jason Turner, a Strategic Product Development Manager, is working
      in his office to analyze the competitive landscape of electric vehicle batteries
      and charging infrastructure. His workspace includes a desktop computer, industry
      reports, and a whiteboard for strategic planning.
    entities:
    - Desktop Computer
    - Industry Reports
    - Whiteboard
    - Market Research Firm
    - Engineering Team
    - Senior Management
    - Competitor Companies
    - Industry Conferences
    - Economic Indicators
    events_example:
    - The agent opens the browser and searches for the latest electric vehicle market
      trends.
    - The agent opens a document titled 'EV_Battery_Technologies.docx' and extracts
      the section on lithium-ion advancements.
    - The agent reads received emails from industry experts and summarizes their key
      points.
    - The user presses 'ctrl+f' to find specific data within an industry report file.
    - The user types 'top EV manufacturers 2023' in the browser's search bar and scans
      through the search results.
    - The agent accesses a market research database and retrieves a report on consumer
      preferences for EVs in Europe.
    - The user clicks the mouse and performs multiple 'cmd+v' actions to paste statistical
      data into an Excel spreadsheet.
    - The agent analyzes an image of EV sales charts and identifies a rising trend
      in Asia.
    - The user types 'Interview with Tesla's CEO 2023' into the browser's search bar
      and opens the interview transcript.
    - The agent summarizes a lengthy PDF on government incentives for EVs into a one-page
      brief.
    theme: Market Analysis of Electric Vehicle Components
  user:
    description: Jason Turner, 42, is a Strategic Product Development Manager at an
      automotive components company. He has extensive knowledge in automotive engineering,
      strategic planning, and market analysis, focusing on identifying profitable
      component trends in electric vehicles.
    goal: Analyze the competitive landscape of electric vehicle batteries and charging
      infrastructure.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(image_path: str) -> dict'
    - 'text.generate(prompt: str, max_length: int=250) -> str'
    - 'interview.transcribe(audio_path: str) -> str'
    - 'document.summarize(text: str, max_length: int=100) -> str'
    description: Maria Lopez, a Freelance Journalist, is working in her home office
      to write a feature article on emerging EV technologies. Her workspace includes
      a laptop, a voice recorder, and various notes and clippings from past research
      and interviews.
    entities:
    - Laptop
    - Voice Recorder
    - Notes and Clippings
    - Automotive Manufacturers
    - Industry Experts and Analysts
    - Magazines and Blogs
    - Editors
    - Readers and Subscribers
    - Tech Corporations
    events_example:
    - The agent opens the browser and searches for the latest electric vehicle market
      trends.
    - The agent opens a document titled 'EV_Battery_Technologies.docx' and extracts
      the section on lithium-ion advancements.
    - The agent reads received emails from industry experts and summarizes their key
      points.
    - The user presses 'ctrl+f' to find specific data within an industry report file.
    - The user types 'top EV manufacturers 2023' in the browser's search bar and scans
      through the search results.
    - The agent accesses a market research database and retrieves a report on consumer
      preferences for EVs in Europe.
    - The user clicks the mouse and performs multiple 'cmd+v' actions to paste statistical
      data into an Excel spreadsheet.
    - The agent analyzes an image of EV sales charts and identifies a rising trend
      in Asia.
    - The user types 'Interview with Tesla's CEO 2023' into the browser's search bar
      and opens the interview transcript.
    - The agent summarizes a lengthy PDF on government incentives for EVs into a one-page
      brief.
    theme: Writing a Feature Article on Emerging EV Technologies
  user:
    description: Maria Lopez, 29, is a Freelance Journalist specializing in technology
      and automotive industries. She has strong writing and investigative skills,
      proficient in interviewing and synthesizing complex technical information into
      accessible content.
    goal: Write a feature article on emerging EV technologies.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(image_path: str) -> dict'
    - 'text.generate(prompt: str, max_length: int=250) -> str'
    - 'market.trends(topic: str, timeframe: str) -> dict'
    - 'campaign.analyze(performance_data: dict) -> dict'
    description: Priya Nair, a Marketing Consultant, is working in a co-working space
      to develop a marketing strategy for an electric vehicle startup. Her workspace
      includes a tablet, marketing software, and a mood board.
    entities:
    - Tablet
    - Marketing Software
    - Mood Board
    - Startup Founders
    - Marketing Team
    - Focus Groups
    - Marketing Trends
    - Economic Conditions
    - Regulatory Environment
    events_example:
    - The agent opens the browser and searches for the latest electric vehicle market
      trends.
    - The agent opens a document titled 'EV_Battery_Technologies.docx' and extracts
      the section on lithium-ion advancements.
    - The agent reads received emails from industry experts and summarizes their key
      points.
    - The user presses 'ctrl+f' to find specific data within an industry report file.
    - The user types 'top EV manufacturers 2023' in the browser's search bar and scans
      through the search results.
    - The agent accesses a market research database and retrieves a report on consumer
      preferences for EVs in Europe.
    - The user clicks the mouse and performs multiple 'cmd+v' actions to paste statistical
      data into an Excel spreadsheet.
    - The agent analyzes an image of EV sales charts and identifies a rising trend
      in Asia.
    - The user types 'Interview with Tesla's CEO 2023' into the browser's search bar
      and opens the interview transcript.
    - The agent summarizes a lengthy PDF on government incentives for EVs into a one-page
      brief.
    theme: Developing a Marketing Strategy for an Electric Vehicle Startup
  user:
    description: Priya Nair, 31, is a Marketing Consultant for green technology startups.
      She has expertise in market research, digital marketing strategies, and consumer
      behavior analysis, focusing on helping startups convey their sustainable value
      propositions to environmentally conscious consumers.
    goal: Develop a marketing strategy for an electric vehicle startup.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(image_path: str) -> dict'
    - 'text.generate(prompt: str, max_length: int=250) -> str'
    - 'policy.compare(countries: list, policy_type: str) -> dict'
    - 'simulation.run(params: dict) -> dict'
    description: Dr. Robert Liu, a Senior Policy Advisor, is working in his government
      office to draft a policy proposal for new government incentives for electric
      vehicle adoption. His workspace includes policy briefs, economic models, and
      official reports.
    entities:
    - Policy Briefs
    - Economic Models
    - Official Reports
    - Legislators
    - Environmental Groups
    - Public Opinion
    - Lobbyists
    - International Policies
    - Economic Advisers
    events_example:
    - The agent opens the browser and searches for the latest electric vehicle market
      trends.
    - The agent opens a document titled 'EV_Battery_Technologies.docx' and extracts
      the section on lithium-ion advancements.
    - The agent reads received emails from industry experts and summarizes their key
      points.
    - The user presses 'ctrl+f' to find specific data within an industry report file.
    - The user types 'top EV manufacturers 2023' in the browser's search bar and scans
      through the search results.
    - The agent accesses a market research database and retrieves a report on consumer
      preferences for EVs in Europe.
    - The user clicks the mouse and performs multiple 'cmd+v' actions to paste statistical
      data into an Excel spreadsheet.
    - The agent analyzes an image of EV sales charts and identifies a rising trend
      in Asia.
    - The user types 'Interview with Tesla's CEO 2023' into the browser's search bar
      and opens the interview transcript.
    - The agent summarizes a lengthy PDF on government incentives for EVs into a one-page
      brief.
    theme: Policy Proposal for Government Incentives in the EV Sector
  user:
    description: Dr. Robert Liu, 55, is a Senior Policy Advisor for the Department
      of Energy. He has expertise in policy development, economic analysis, and strategic
      advisory, advocating for policies that support clean energy solutions and reduce
      carbon emissions.
    goal: Draft a policy proposal for new government incentives for electric vehicle
      adoption.
- environment:
    agent_ops:
    - 'terminal.run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(image_path: str) -> dict'
    - 'text.generate(prompt: str, max_length: int=250) -> str'
    - 'presentation.create(slides: list) -> str'
    - 'survey.analyze(responses: list) -> dict'
    description: Susan Kim, an Urban Planner, is organizing a workshop for city planners
      to address the integration of EV infrastructure into urban landscapes. Her workspace
      includes a projector, presentation slides, maps, and urban plans.
    entities:
    - Projector and Presentation Slides
    - Maps and Urban Plans
    - Feedback Forms
    - City Planners and Officials
    - Environmental Scientists
    - Infrastructure Companies
    - Community Leaders
    - Transportation Agencies
    - Funding Bodies
    events_example:
    - The agent opens the browser and searches for the latest electric vehicle market
      trends.
    - The agent opens a document titled 'EV_Battery_Technologies.docx' and extracts
      the section on lithium-ion advancements.
    - The agent reads received emails from industry experts and summarizes their key
      points.
    - The user presses 'ctrl+f' to find specific data within an industry report file.
    - The user types 'top EV manufacturers 2023' in the browser's search bar and scans
      through the search results.
    - The agent accesses a market research database and retrieves a report on consumer
      preferences for EVs in Europe.
    - The user clicks the mouse and performs multiple 'cmd+v' actions to paste statistical
      data into an Excel spreadsheet.
    - The agent analyzes an image of EV sales charts and identifies a rising trend
      in Asia.
    - The user types 'Interview with Tesla's CEO 2023' into the browser's search bar
      and opens the interview transcript.
    - The agent summarizes a lengthy PDF on government incentives for EVs into a one-page
      brief.
    theme: Conducting a Workshop on Electric Vehicle Impact on Urban Planning
  user:
    description: Susan Kim, 37, is an Urban Planner and Environmental Consultant.
      She has expertise in urban design, sustainability practices, and stakeholder
      engagement, interested in how electric vehicles can be integrated into urban
      planning to reduce congestion and pollution.
    goal: Organize a workshop for city planners on integrating EV infrastructure into
      urban landscapes.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> List[SearchResult]'
    - 'text.extract(url: str) -> str'
    - 'text.summarize(content: str, max_sentences: int) -> str'
    - 'image.capture(screen_area: tuple) -> Image'
    - 'image.recognize_text(image: Image) -> str'
    - 'file.open(file_path: str) -> FileHandler'
    - 'file.save(file_handler: FileHandler, content: str) -> None'
    - 'file.export_to(format: str, file_path: str) -> None'
    - 'automation.perform_task(action_sequence: List[str]) -> TaskResult'
    - 'assistant.generate_recommendation(criteria: UserPreferences) -> Recommendation'
    description: Alex Martinez is in their small but cozy kitchen in a suburban apartment.
      The kitchen is well-organized with modern appliances and decorated with potted
      herbs on the windowsill. It's Tuesday evening, around 7 PM. Alex has just finished
      their day job as a graphic designer and is now looking to compare meal kit services
      to decide on a subscription for the upcoming month. Alex is seated at the small
      breakfast nook, their laptop open to a webpage with multiple tabs related to
      meal kit delivery services. They have a notepad and pen ready to jot down notes.
      A cup of herbal tea steams next to them.
    entities:
    - Laptop
    - Spreadsheet Software
    - Phone
    - Cooking Tools
    - AI Assistant
    - Social Media Platforms
    events_example:
    - The agent opens a new browser tab and searches for 'best meal kit delivery service
      2023'.
    - The user reviews the list of meal kit services on their spreadsheet for accurate
      data entry.
    - The agent reads a popular food blog and extracts key points about user experiences
      with meal kits.
    - The user checks notifications on their phone for new discounts on meal kit subscriptions.
    - The agent opens an image containing text about meal kit pricing plans and extracts
      the relevant information.
    - The user updates their budget app with potential costs of each meal kit service
      they are considering.
    - The agent encounters a broken link while trying to access a meal kit service
      website.
    - The user toggles to the browser and bookmarks a meal kit review page for later
      reference.
    - The agent captures a screenshot of a promotional email highlighting a discount
      code for meal kits.
    - The user examines the ingredients list of a meal kit option displayed on a comparison
      website.
    theme: Meal Kit Comparison in a Cozy Kitchen
  user:
    description: Alex Martinez is a 32-year-old graphic designer with intermediate
      cooking skills. They enjoy trying new recipes and cuisines, particularly Mediterranean
      and Asian. Alex prefers quick and healthy meal options that can be prepared
      in under 30 minutes, with a focus on organic and sustainably sourced ingredients.
      They often cook in the evenings to unwind and share photos of their meals on
      social media. Alex is tech-savvy and organized, frequently using spreadsheets
      and apps to manage their tasks.
    goal: Compare the features, pricing, and user reviews of five popular meal kit
      delivery services.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> List[SearchResult]'
    - 'text.extract(url: str) -> str'
    - 'text.summarize(content: str, max_sentences: int) -> str'
    - 'image.capture(screen_area: tuple) -> Image'
    - 'image.recognize_text(image: Image) -> str'
    - 'file.open(file_path: str) -> FileHandler'
    - 'file.save(file_handler: FileHandler, content: str) -> None'
    - 'file.export_to(format: str, file_path: str) -> None'
    - 'automation.perform_task(action_sequence: List[str]) -> TaskResult'
    - 'assistant.generate_recommendation(criteria: UserPreferences) -> Recommendation'
    description: Sarah Lee is seated on the couch in her airy living room, with a
      tablet in hand. It's Saturday morning, around 11 AM. Sarah is a 28-year-old
      teacher who is looking to compare meal kit services to find a budget-friendly
      option that fits her dietary preferences. She uses her tablet for a more portable
      research experience, often sitting on the couch or at the dining table. Sarah
      has a note-taking app open to jot down insights and price comparisons. A cup
      of coffee sits on the side table next to her.
    entities:
    - Tablet
    - Budgeting App
    - Family Calendar
    - Coupons and Discount Codes
    - Cooking and Shopping Planner
    events_example:
    - The agent opens a new browser tab and searches for 'best meal kit delivery service
      2023'.
    - The user reviews the list of meal kit services on their spreadsheet for accurate
      data entry.
    - The agent reads a popular food blog and extracts key points about user experiences
      with meal kits.
    - The user checks notifications on their phone for new discounts on meal kit subscriptions.
    - The agent opens an image containing text about meal kit pricing plans and extracts
      the relevant information.
    - The user updates their budget app with potential costs of each meal kit service
      they are considering.
    - The agent encounters a broken link while trying to access a meal kit service
      website.
    - The user toggles to the browser and bookmarks a meal kit review page for later
      reference.
    - The agent captures a screenshot of a promotional email highlighting a discount
      code for meal kits.
    - The user examines the ingredients list of a meal kit option displayed on a comparison
      website.
    theme: Meal Kit Comparison in a Cozy Living Room
  user:
    description: Sarah Lee is a 28-year-old teacher with beginner cooking skills.
      She enjoys budgeting and planning, and is looking for meal kit services that
      offer student discounts and budget-friendly options. Sarah prefers meals that
      fit her dietary restrictions, such as gluten-free or vegetarian options. She
      uses social media to see which meal kit delivery services are trending and reads
      blog posts and recommendations from influencers.
    goal: Compare the features, pricing, and user reviews of five popular meal kit
      delivery services.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> List[SearchResult]'
    - 'text.extract(url: str) -> str'
    - 'text.summarize(content: str, max_sentences: int) -> str'
    - 'image.capture(screen_area: tuple) -> Image'
    - 'image.recognize_text(image: Image) -> str'
    - 'file.open(file_path: str) -> FileHandler'
    - 'file.save(file_handler: FileHandler, content: str) -> None'
    - 'file.export_to(format: str, file_path: str) -> None'
    - 'automation.perform_task(action_sequence: List[str]) -> TaskResult'
    - 'assistant.generate_recommendation(criteria: UserPreferences) -> Recommendation'
    description: Michael Thompson is in his high-tech home office, seated at a powerful
      desktop setup with dual monitors. It's Sunday afternoon, around 2 PM. Michael
      is a 45-year-old software engineer who enjoys detailed planning and experimenting
      with new recipes. He is looking to compare meal kit services to find one that
      offers high-quality ingredients and customization options. Michael uses specialized
      software to create detailed comparison matrices and has a nutritional tracking
      app open to ensure the meal kits meet his dietary requirements.
    entities:
    - Desktop Computer
    - Smartphone
    - Smart Home Devices
    - Nutritional Tracking App
    - Customer Service
    events_example:
    - The agent opens a new browser tab and searches for 'best meal kit delivery service
      2023'.
    - The user reviews the list of meal kit services on their spreadsheet for accurate
      data entry.
    - The agent reads a popular food blog and extracts key points about user experiences
      with meal kits.
    - The user checks notifications on their phone for new discounts on meal kit subscriptions.
    - The agent opens an image containing text about meal kit pricing plans and extracts
      the relevant information.
    - The user updates their budget app with potential costs of each meal kit service
      they are considering.
    - The agent encounters a broken link while trying to access a meal kit service
      website.
    - The user toggles to the browser and bookmarks a meal kit review page for later
      reference.
    - The agent captures a screenshot of a promotional email highlighting a discount
      code for meal kits.
    - The user examines the ingredients list of a meal kit option displayed on a comparison
      website.
    theme: Meal Kit Comparison in a High-Tech Home Office
  user:
    description: Michael Thompson is a 45-year-old software engineer with advanced
      cooking skills. He enjoys detailed planning and experimenting with new recipes.
      Michael is looking for meal kit services that offer high-quality ingredients,
      customization options, and integration with his smart home devices. He uses
      specialized software to create detailed comparison matrices and a nutritional
      tracking app to ensure the meal kits meet his dietary requirements.
    goal: Compare the features, pricing, and user reviews of five popular meal kit
      delivery services.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> List[SearchResult]'
    - 'text.extract(url: str) -> str'
    - 'text.summarize(content: str, max_sentences: int) -> str'
    - 'image.capture(screen_area: tuple) -> Image'
    - 'image.recognize_text(image: Image) -> str'
    - 'file.open(file_path: str) -> FileHandler'
    - 'file.save(file_handler: FileHandler, content: str) -> None'
    - 'file.export_to(format: str, file_path: str) -> None'
    - 'automation.perform_task(action_sequence: List[str]) -> TaskResult'
    - 'assistant.generate_recommendation(criteria: UserPreferences) -> Recommendation'
    description: Emily Brown is in her cozy home office, seated at a desk with her
      laptop open. It's Saturday morning, around 10 AM. Emily is a 39-year-old freelance
      writer who enjoys exploratory cooking and meticulous review writing. She is
      looking to compare meal kit services to find one that offers unique and interesting
      recipes. Emily subscribes to trial plans from multiple services to personally
      evaluate them and documents her cooking experience in a detailed journal. She
      also takes high-quality pictures for her blog posts and social media updates.
    entities:
    - Laptop with Multiple Tabs
    - Notebook and Pen
    - Camera or Smartphone
    - Cooking Ingredients and Tools
    - Blog and Social Media Accounts
    - Polls and Surveys
    events_example:
    - The agent opens a new browser tab and searches for 'best meal kit delivery service
      2023'.
    - The user reviews the list of meal kit services on their spreadsheet for accurate
      data entry.
    - The agent reads a popular food blog and extracts key points about user experiences
      with meal kits.
    - The user checks notifications on their phone for new discounts on meal kit subscriptions.
    - The agent opens an image containing text about meal kit pricing plans and extracts
      the relevant information.
    - The user updates their budget app with potential costs of each meal kit service
      they are considering.
    - The agent encounters a broken link while trying to access a meal kit service
      website.
    - The user toggles to the browser and bookmarks a meal kit review page for later
      reference.
    - The agent captures a screenshot of a promotional email highlighting a discount
      code for meal kits.
    - The user examines the ingredients list of a meal kit option displayed on a comparison
      website.
    theme: Meal Kit Comparison in a Writer's Cozy Workspace
  user:
    description: Emily Brown is a 39-year-old freelance writer with intermediate cooking
      skills. She enjoys exploratory cooking, budgeting, and meticulous review writing.
      Emily subscribes to trial plans from multiple meal kit services to personally
      evaluate them and documents her cooking experience in a detailed journal. She
      takes high-quality pictures for her blog posts and social media updates, and
      conducts polls on social media to gather opinions from her network.
    goal: Compare the features, pricing, and user reviews of five popular meal kit
      delivery services.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.search(query: str) -> List[SearchResult]'
    - 'text.extract(url: str) -> str'
    - 'text.summarize(content: str, max_sentences: int) -> str'
    - 'image.capture(screen_area: tuple) -> Image'
    - 'image.recognize_text(image: Image) -> str'
    - 'file.open(file_path: str) -> FileHandler'
    - 'file.save(file_handler: FileHandler, content: str) -> None'
    - 'file.export_to(format: str, file_path: str) -> None'
    - 'automation.perform_task(action_sequence: List[str]) -> TaskResult'
    - 'assistant.generate_recommendation(criteria: UserPreferences) -> Recommendation'
    description: David Kim is in his organized home office, seated at a desk with
      a desktop computer. It's Friday evening, around 5 PM. David is a 50-year-old
      small business owner who enjoys practical and efficient solutions. He is looking
      to compare meal kit services to find one that offers family-friendly meals and
      convenience. David creates detailed comparison tables using advanced features
      in Excel and uses automation tools to scrape data about meal kit services from
      the web. He also considers the dietary preferences of each family member and
      tests the functionality of meal kit service apps with his smart home setup.
    entities:
    - Desktop Setup
    - AI and Automation Tools
    - Family Members
    - Smart Home System
    - Charts and Graphs
    - Customer Loyalty Programs
    events_example:
    - The agent opens a new browser tab and searches for 'best meal kit delivery service
      2023'.
    - The user reviews the list of meal kit services on their spreadsheet for accurate
      data entry.
    - The agent reads a popular food blog and extracts key points about user experiences
      with meal kits.
    - The user checks notifications on their phone for new discounts on meal kit subscriptions.
    - The agent opens an image containing text about meal kit pricing plans and extracts
      the relevant information.
    - The user updates their budget app with potential costs of each meal kit service
      they are considering.
    - The agent encounters a broken link while trying to access a meal kit service
      website.
    - The user toggles to the browser and bookmarks a meal kit review page for later
      reference.
    - The agent captures a screenshot of a promotional email highlighting a discount
      code for meal kits.
    - The user examines the ingredients list of a meal kit option displayed on a comparison
      website.
    theme: Meal Kit Comparison in a Family-Oriented Home Office
  user:
    description: David Kim is a 50-year-old small business owner with experienced
      cooking skills. He enjoys practical and efficient solutions and is looking for
      meal kit services that offer family-friendly meals and convenience. David creates
      detailed comparison tables using advanced features in Excel and uses automation
      tools to scrape data about meal kit services from the web. He considers the
      dietary preferences of each family member and tests the functionality of meal
      kit service apps with his smart home setup.
    goal: Compare the features, pricing, and user reviews of five popular meal kit
      delivery services.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - read_code_snippet(snippet)
    - generate_code(function_description)
    - read_image(image_path)
    - generate_diagram(description)
    - pandas.df_search(dataframe, query)
    - api.call(endpoint, method, data=None)
    description: Emma Johnson, a junior software developer, is working on implementing
      and optimizing a binary search algorithm in her home office. She uses a dual-monitor
      setup with one screen for coding and the other for documentation and forums.
      It's late evening, and she is preparing for an upcoming coding interview.
    entities:
    - Dual-Monitor Setup
    - IDE (PyCharm)
    - Notebook
    - Python Books
    - Version Control Repository (GitHub)
    - Project Team
    - Mentor
    - Coding Forums (Stack Overflow, Reddit)
    - Coding Interview Preparation Websites (LeetCode, HackerRank)
    events_example:
    - The agent opens the browser and searches for tutorials on 'Python binary search
      optimization'.
    - The user clicks on a Google search result about 'handling edge cases in binary
      search'.
    - The agent analyzes the user's code snippet for the binary search implementation
      and suggests improvements.
    - The user opens a new tab to read documentation on the pandas library.
    - The user switches back to the coding environment after reading a forum discussion
      on search algorithms.
    - The agent opens the file `binary_search.py` and detects an off-by-one error.
    - The user tests their binary search function by running the script in the terminal.
    - The agent reads an image containing handwritten notes on binary search and extracts
      the algorithm steps.
    - The user opens a reference book to read about time complexities of different
      algorithms.
    - The agent generates a visual diagram illustrating the steps of the binary search
      algorithm.
    - The user scrolls through the Google search results on 'common pitfalls in binary
      search'.
    - The agent saves the modified `binary_search.py` file with optimized code.
    - The user clicks on a Stack Overflow link discussing 'how to improve binary search
      performance'.
    - The agent submits a new question to a coding forum, asking for advice on binary
      search edge cases.
    - The user opens a new tab in the web browser to research interview questions
      on binary search.
    - The agent performs a search on 'efficient search algorithms for large datasets'
      on an academic database.
    - The user reviews and comments on a colleague's code related to binary search.
    - The agent runs a test suite on the binary search function to check for correctness.
    - The user clicks on a video tutorial about the binary search algorithm on YouTube.
    - The agent reads the content of the `binary_search_test.py` file to create additional
      test cases.
    - The user scrolls through a blog post detailing advanced techniques in binary
      search.
    - The agent opens and parses a CSV file to be used for testing the binary search
      function.
    - The user stays on the 'time complexity analysis of binary search' page on an
      algorithmic research blog.
    - The agent calls the `binary_search` API endpoint and logs the request and response.
    - The user switches back to the IDE to incorporate feedback from an online coding
      community.
    - The agent opens a terminal window to update the local Git repository.
    - The user scrolls through a coding interview preparation site for common binary
      search problems.
    - The agent reads and summarizes a research paper on optimized search algorithms.
    - The user searches for performance profiling tools for Python code in a new browser
      tab.
    - The agent performs a quick search on the user's project files to find instances
      of the `binary_search` function.
    theme: Junior Developer's Coding Session
  user:
    description: Emma Johnson, a 25-year-old junior software developer at a fintech
      startup, is focused on improving her coding skills. She is proficient in Python
      and has a solid understanding of basic data structures and algorithms. Emma
      enjoys working in a well-organized development environment and uses a dual-monitor
      setup to enhance her productivity.
    goal: Implement and optimize a binary search algorithm for an upcoming coding
      interview.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - read_code_snippet(snippet)
    - generate_code(function_description)
    - read_image(image_path)
    - generate_diagram(description)
    - pandas.df_search(dataframe, query)
    - api.call(endpoint, method, data=None)
    description: Michael Brown, a data scientist at a healthcare analytics company,
      is working on implementing an optimized binary search algorithm for large medical
      datasets. He uses high-performance laptops and data frameworks like pandas and
      NumPy. The task is being performed in his well-equipped home office during early
      morning hours.
    entities:
    - High-Performance Laptop
    - Data Frameworks (pandas, NumPy)
    - Jupyter Notebooks
    - Visualization Tools (Matplotlib, Seaborn)
    - Medical Datasets
    - Machine Learning Models
    - Colleagues in Data Science Team
    - Team Lead
    - Research Papers & Journals
    - Healthcare Regulations and Standards
    events_example:
    - The agent opens the browser and searches for tutorials on 'Python binary search
      optimization'.
    - The user clicks on a Google search result about 'handling edge cases in binary
      search'.
    - The agent analyzes the user's code snippet for the binary search implementation
      and suggests improvements.
    - The user opens a new tab to read documentation on the pandas library.
    - The user switches back to the coding environment after reading a forum discussion
      on search algorithms.
    - The agent opens the file `binary_search.py` and detects an off-by-one error.
    - The user tests their binary search function by running the script in the terminal.
    - The agent reads an image containing handwritten notes on binary search and extracts
      the algorithm steps.
    - The user opens a reference book to read about time complexities of different
      algorithms.
    - The agent generates a visual diagram illustrating the steps of the binary search
      algorithm.
    - The user scrolls through the Google search results on 'common pitfalls in binary
      search'.
    - The agent saves the modified `binary_search.py` file with optimized code.
    - The user clicks on a Stack Overflow link discussing 'how to improve binary search
      performance'.
    - The agent submits a new question to a coding forum, asking for advice on binary
      search edge cases.
    - The user opens a new tab in the web browser to research interview questions
      on binary search.
    - The agent performs a search on 'efficient search algorithms for large datasets'
      on an academic database.
    - The user reviews and comments on a colleague's code related to binary search.
    - The agent runs a test suite on the binary search function to check for correctness.
    - The user clicks on a video tutorial about the binary search algorithm on YouTube.
    - The agent reads the content of the `binary_search_test.py` file to create additional
      test cases.
    - The user scrolls through a blog post detailing advanced techniques in binary
      search.
    - The agent opens and parses a CSV file to be used for testing the binary search
      function.
    - The user stays on the 'time complexity analysis of binary search' page on an
      algorithmic research blog.
    - The agent calls the `binary_search` API endpoint and logs the request and response.
    - The user switches back to the IDE to incorporate feedback from an online coding
      community.
    - The agent opens a terminal window to update the local Git repository.
    - The user scrolls through a coding interview preparation site for common binary
      search problems.
    - The agent reads and summarizes a research paper on optimized search algorithms.
    - The user searches for performance profiling tools for Python code in a new browser
      tab.
    - The agent performs a quick search on the user's project files to find instances
      of the `binary_search` function.
    theme: Data Scientist's Analytical Task
  user:
    description: Michael Brown, a 40-year-old data scientist at a healthcare analytics
      company, is proficient in Python and specializes in machine learning algorithms.
      He works with large datasets and uses tools like pandas and NumPy for data analysis.
      Michael is focused on enhancing the performance of his data processing pipelines.
    goal: Implement an optimized binary search algorithm for large medical datasets.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - read_code_snippet(snippet)
    - generate_code(function_description)
    - read_image(image_path)
    - generate_diagram(description)
    - pandas.df_search(dataframe, query)
    - api.call(endpoint, method, data=None)
    description: Sarah Lee, a full-stack developer at an e-commerce company, is working
      on creating an API endpoint that implements a binary search algorithm for a
      product catalog. She uses a development laptop with tools like Django for backend
      and React for frontend development. The task is being performed in her sleek
      home office during late afternoon hours.
    entities:
    - Development Laptop
    - Frontend Framework (React)
    - Backend Framework (Django)
    - Postman
    - Frontend Application
    - Product Database
    - User Experience
    - Project Manager
    - Market Trends
    - Customer Feedback
    events_example:
    - The agent opens the browser and searches for tutorials on 'Python binary search
      optimization'.
    - The user clicks on a Google search result about 'handling edge cases in binary
      search'.
    - The agent analyzes the user's code snippet for the binary search implementation
      and suggests improvements.
    - The user opens a new tab to read documentation on the pandas library.
    - The user switches back to the coding environment after reading a forum discussion
      on search algorithms.
    - The agent opens the file `binary_search.py` and detects an off-by-one error.
    - The user tests their binary search function by running the script in the terminal.
    - The agent reads an image containing handwritten notes on binary search and extracts
      the algorithm steps.
    - The user opens a reference book to read about time complexities of different
      algorithms.
    - The agent generates a visual diagram illustrating the steps of the binary search
      algorithm.
    - The user scrolls through the Google search results on 'common pitfalls in binary
      search'.
    - The agent saves the modified `binary_search.py` file with optimized code.
    - The user clicks on a Stack Overflow link discussing 'how to improve binary search
      performance'.
    - The agent submits a new question to a coding forum, asking for advice on binary
      search edge cases.
    - The user opens a new tab in the web browser to research interview questions
      on binary search.
    - The agent performs a search on 'efficient search algorithms for large datasets'
      on an academic database.
    - The user reviews and comments on a colleague's code related to binary search.
    - The agent runs a test suite on the binary search function to check for correctness.
    - The user clicks on a video tutorial about the binary search algorithm on YouTube.
    - The agent reads the content of the `binary_search_test.py` file to create additional
      test cases.
    - The user scrolls through a blog post detailing advanced techniques in binary
      search.
    - The agent opens and parses a CSV file to be used for testing the binary search
      function.
    - The user stays on the 'time complexity analysis of binary search' page on an
      algorithmic research blog.
    - The agent calls the `binary_search` API endpoint and logs the request and response.
    - The user switches back to the IDE to incorporate feedback from an online coding
      community.
    - The agent opens a terminal window to update the local Git repository.
    - The user scrolls through a coding interview preparation site for common binary
      search problems.
    - The agent reads and summarizes a research paper on optimized search algorithms.
    - The user searches for performance profiling tools for Python code in a new browser
      tab.
    - The agent performs a quick search on the user's project files to find instances
      of the `binary_search` function.
    theme: Full-Stack Developer's API Integration
  user:
    description: Sarah Lee, a 28-year-old full-stack developer at an e-commerce company,
      is proficient in Python and JavaScript. She has experience with front-end frameworks
      like React and back-end frameworks like Django. Sarah is focused on integrating
      efficient search functionalities into the company's product catalog.
    goal: Create an API endpoint that implements a binary search algorithm for a product
      catalog.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - read_code_snippet(snippet)
    - generate_code(function_description)
    - read_image(image_path)
    - generate_diagram(description)
    - pandas.df_search(dataframe, query)
    - api.call(endpoint, method, data=None)
    description: David Kim, a systems engineer at a cybersecurity firm, is working
      on implementing a secure binary search algorithm to prevent potential exploits.
      He uses a secure workstation with encryption libraries and network analysis
      tools. The task is being performed in his secure office environment during late
      afternoon hours.
    entities:
    - Secure Workstation
    - Encryption Libraries (PyCryptodome)
    - Network Analysis Tools (Wireshark)
    - Client Systems
    - Firewall and Security Systems
    - "Company\u2019s Security Policies"
    - Cybersecurity Regulations
    - Threat Intelligence Reports
    - Peer Reviews
    events_example:
    - The agent opens the browser and searches for tutorials on 'Python binary search
      optimization'.
    - The user clicks on a Google search result about 'handling edge cases in binary
      search'.
    - The agent analyzes the user's code snippet for the binary search implementation
      and suggests improvements.
    - The user opens a new tab to read documentation on the pandas library.
    - The user switches back to the coding environment after reading a forum discussion
      on search algorithms.
    - The agent opens the file `binary_search.py` and detects an off-by-one error.
    - The user tests their binary search function by running the script in the terminal.
    - The agent reads an image containing handwritten notes on binary search and extracts
      the algorithm steps.
    - The user opens a reference book to read about time complexities of different
      algorithms.
    - The agent generates a visual diagram illustrating the steps of the binary search
      algorithm.
    - The user scrolls through the Google search results on 'common pitfalls in binary
      search'.
    - The agent saves the modified `binary_search.py` file with optimized code.
    - The user clicks on a Stack Overflow link discussing 'how to improve binary search
      performance'.
    - The agent submits a new question to a coding forum, asking for advice on binary
      search edge cases.
    - The user opens a new tab in the web browser to research interview questions
      on binary search.
    - The agent performs a search on 'efficient search algorithms for large datasets'
      on an academic database.
    - The user reviews and comments on a colleague's code related to binary search.
    - The agent runs a test suite on the binary search function to check for correctness.
    - The user clicks on a video tutorial about the binary search algorithm on YouTube.
    - The agent reads the content of the `binary_search_test.py` file to create additional
      test cases.
    - The user scrolls through a blog post detailing advanced techniques in binary
      search.
    - The agent opens and parses a CSV file to be used for testing the binary search
      function.
    - The user stays on the 'time complexity analysis of binary search' page on an
      algorithmic research blog.
    - The agent calls the `binary_search` API endpoint and logs the request and response.
    - The user switches back to the IDE to incorporate feedback from an online coding
      community.
    - The agent opens a terminal window to update the local Git repository.
    - The user scrolls through a coding interview preparation site for common binary
      search problems.
    - The agent reads and summarizes a research paper on optimized search algorithms.
    - The user searches for performance profiling tools for Python code in a new browser
      tab.
    - The agent performs a quick search on the user's project files to find instances
      of the `binary_search` function.
    theme: Systems Engineer's Secure Implementation
  user:
    description: David Kim, a 32-year-old systems engineer at a cybersecurity firm,
      is an expert in Python and C++. He has experience in developing and maintaining
      secure software systems and is focused on ensuring the robustness and security
      of his implementations.
    goal: Implement a secure binary search algorithm to prevent potential exploits.
- environment:
    agent_ops:
    - browser.search(query)
    - browser.open(url)
    - browser.extract_text(url)
    - browser.extract_images(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.create(file_path, content)
    - text.generate_summary(text)
    - text.draft_blog_post(topic, details)
    - text.edit_document(file_path, changes)
    - image.analyze(file_path)
    - image.create_chart(data)
    description: 'Alex Thompson, a fitness enthusiast and beginner blogger, is working
      from his home office to research and compare the benefits, drawbacks, and user
      experiences of three different types of exercise routines: HIIT, yoga, and strength
      training. He aims to write a comprehensive blog post on the topic.'
    entities:
    - Laptop
    - Whiteboard
    - Notebook
    - Graphic Design Software
    - Mobile Phone
    - Herbal Tea
    - Fitness Blogs & Websites
    - Scientific Journals
    - Online Fitness Communities
    - Graphic Elements
    - Drafts and Notes
    - Website Analytics Tools
    - Blog Readers
    - Fitness Experts and Influencers
    - SEO Algorithms
    - Personal Fitness Goals
    - Feedback from Editor or Peers
    - Trending Topics and News in Fitness
    events_example:
    - The agent opens the browser and searches for 'benefits of HIIT workouts'.
    - The agent opens the file `exercise_comparison.docx` and identifies areas that
      need elaboration.
    - The agent reads received e-mails for Alex and schedules a meeting with a fitness
      expert.
    - The user reverted back to the web browser to continue researching strength training
      benefits.
    - The user returned to Google to perform a search on 'pros and cons of yoga for
      beginners'.
    - The user moved the mouse and clicked within Google Docs to modify the blog post
      draft.
    - The user clicks the left mouse button on 'Yoga Journal - Benefits of Yoga' tab.
    - The user types 'scientific studies on HIIT benefits' and presses enter in a
      web browser.
    - The user types 'anecdotes on strength training' and scrolls mouse multiple times
      in an application.
    - The user searches for 'HIIT vs strength training' on Bing and lands on a search
      results page.
    - The user types 'ctrl+w' to close a tab and continues with scrolls and clicks.
    - The user moved the mouse and clicked the left button within Google Sheets to
      update data.
    - The user clicked the left mouse button and moved the mouse while using Microsoft
      Word.
    - The user types 'SEO best practices for blog posts' and uses 'ctrl_l' key, then
      scrolls the mouse multiple times in Google Chrome.
    - The user types 'benefits of incorporating yoga' and searches for 'yoga and mental
      health' on a new tab in Google.
    - The user pressed and released the 'Shift' key while editing text in Google Docs.
    - The user switched back to the web browser to find more user reviews on HIIT
      workouts.
    - The agent opens the browser and reviews the latest articles on strength training
      science.
    - The agent opens the file `fitness_blog_research.txt` and compiles key insights.
    - The agent extracts and summarizes the main points from 'HIIT advantages' article.
    - The user opened the email client and read a new email from a blog reader.
    - The user navigates to the graphic design tool and opens a template for the comparison
      chart.
    - The user typed 'yoga for mental clarity' in a Google search and pressed enter.
    - The agent creates a draft blog post on the topic 'Comparing HIIT, Yoga, and
      Strength Training'.
    - The agent saves the updated blog post draft to the file `exercise_routine_blog.md`.
    - The user switched to Google Analytics to check blog performance metrics.
    - The agent opens the image analysis tool and describes the contents of a yoga
      pose image.
    - The user adjusts the formatting in Google Docs to improve readability.
    - The user searches for 'best graphic design tools for bloggers' and clicks on
      the search result.
    - The agent generates a list of top articles on 'HIIT workouts' and displays it
      for Alex.
    theme: Fitness Blog Research
  user:
    description: Alex Thompson, a 32-year-old part-time fitness instructor and freelance
      lifestyle blogger, is passionate about holistic health and wellness. He enjoys
      exploring how different exercise routines contribute to overall well-being and
      aims to create engaging content for his blog readers.
    goal: Research and compare the benefits, drawbacks, and user experiences of three
      different types of exercise routines and write a blog post.
- environment:
    agent_ops:
    - text.read(document_path)
    - text.generate(prompts)
    - text.summarize(content)
    - text.compare(text1, text2)
    - image.read(image_path)
    - image.annotate(image_path, annotations)
    - browser.open(url)
    - browser.extract_content(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - chat.send(message, platform)
    - chat.receive(platform)
    - task.create(task_description, deadline, priority)
    - task.update(task_id, updates)
    - task.list_all()
    description: Sarah Johnson, a freelance writer and personal finance blogger, is
      working in her cozy home office located in the suburb area of the city. It is
      8 PM, right after dinner, and she is focused on comparing three personal finance
      apps to write a detailed review article for her blog.
    entities:
    - Laptop
    - Smartphone
    - Digital Notebook
    - Additional Monitors
    - Headphones
    - Personal Finance Apps (App A, App B, App C)
    - Browser Extensions and Tools
    - Social Media Platforms
    - Home Smart Devices
    events_example:
    - The agent opens a web browser and searches for user reviews on the latest personal
      finance apps.
    - The agent reads multiple articles and compiles key differences between three
      finance apps.
    - The agent accesses user feedback from an online finance forum and summarizes
      the comments.
    - The agent opens the file `FinanceAppReview.docx` and inserts a new section on
      app security features.
    - The agent extracts app features from screenshots provided by the user.
    - The user scrolls through multiple tabs in a browser comparing app user interfaces.
    - The user types notes in a digital notebook about app usability experiences.
    - The agent sends an email to a finance expert requesting insights on app performance.
    - The user opens a spreadsheet to log features and issues found in the test apps.
    - The agent annotates an app screenshot with comments on navigation ease.
    - The user switches between app interfaces on their smartphone to test responsiveness.
    - The user inputs search terms related to finance app integrations with smart
      devices.
    - The agent retrieves the latest updates on app security patches from official
      websites.
    - The user clicks between tabs to review notes taken from webinars about app functionality.
    - The agent opens the folder containing previous draft articles and highlights
      key points.
    - The agent identifies and marks inconsistencies in community feedback about an
      app.
    - The user inputs 'cmd+z' to undo changes in the blog draft.
    - The agent saves an updated draft article on personal finance apps to a specified
      directory.
    - The user switches focus to a podcast app to listen to expert discussions on
      personal finance apps.
    - The agent generates a list of questions for an upcoming interview with an app
      developer.
    theme: Freelance Writer's Home Office
  user:
    description: Sarah Johnson, 34, is a freelance writer and personal finance blogger
      with intermediate expertise in finance and advanced skills in writing. She values
      user-friendly interfaces, prioritizes security features, and prefers apps with
      low fees. Sarah enjoys writing after dinner in a quiet space and often leaves
      detailed notes and references.
    goal: Investigate and compare three personal finance apps and write a review article.
- environment:
    agent_ops:
    - text.read(document_path)
    - text.generate(prompts)
    - text.summarize(content)
    - text.compare(text1, text2)
    - image.read(image_path)
    - image.annotate(image_path, annotations)
    - browser.open(url)
    - browser.extract_content(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - chat.send(message, platform)
    - chat.receive(platform)
    - task.create(task_description, deadline, priority)
    - task.update(task_id, updates)
    - task.list_all()
    description: "Alex Mart\xEDnez, a tech journalist, is working in his urban apartment\
      \ downtown. It is 10 AM, his dedicated 'deep work' time slot, and he is focused\
      \ on comparing three personal finance apps to write an in-depth review article\
      \ and create a podcast episode discussing their features."
    entities:
    - Desktop Computer
    - Podcast Equipment
    - Tablet
    - Camera
    - Personal Finance Apps (App D, App E, App F)
    - Interview Platforms
    - Graphic Design Software
    - Podcast Hosting Service
    - Tech Community
    - Tech Expo Events
    - Listener Feedback
    events_example:
    - The agent opens a web browser and searches for user reviews on the latest personal
      finance apps.
    - The agent reads multiple articles and compiles key differences between three
      finance apps.
    - The agent accesses user feedback from an online finance forum and summarizes
      the comments.
    - The agent opens the file `FinanceAppReview.docx` and inserts a new section on
      app security features.
    - The agent extracts app features from screenshots provided by the user.
    - The user scrolls through multiple tabs in a browser comparing app user interfaces.
    - The user types notes in a digital notebook about app usability experiences.
    - The agent sends an email to a finance expert requesting insights on app performance.
    - The user opens a spreadsheet to log features and issues found in the test apps.
    - The agent annotates an app screenshot with comments on navigation ease.
    - The user switches between app interfaces on their smartphone to test responsiveness.
    - The user inputs search terms related to finance app integrations with smart
      devices.
    - The agent retrieves the latest updates on app security patches from official
      websites.
    - The user clicks between tabs to review notes taken from webinars about app functionality.
    - The agent opens the folder containing previous draft articles and highlights
      key points.
    - The agent identifies and marks inconsistencies in community feedback about an
      app.
    - The user inputs 'cmd+z' to undo changes in the blog draft.
    - The agent saves an updated draft article on personal finance apps to a specified
      directory.
    - The user switches focus to a podcast app to listen to expert discussions on
      personal finance apps.
    - The agent generates a list of questions for an upcoming interview with an app
      developer.
    theme: Tech Journalist's Urban Workspace
  user:
    description: "Alex Mart\xEDnez, 29, is a tech journalist with expert knowledge\
      \ in technology journalism and beginner-level understanding of personal finance.\
      \ He has strong analytical skills, is adept at using various tech tools, and\
      \ is good at simplifying complex tech jargon for readers. Alex enjoys writing\
      \ about the latest technological advancements, attending tech expos, podcasting,\
      \ and exploring fintech solutions."
    goal: Investigate and compare three personal finance apps and write a review article.
- environment:
    agent_ops:
    - text.read(document_path)
    - text.generate(prompts)
    - text.summarize(content)
    - text.compare(text1, text2)
    - image.read(image_path)
    - image.annotate(image_path, annotations)
    - browser.open(url)
    - browser.extract_content(url)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory_path)
    - chat.send(message, platform)
    - chat.receive(platform)
    - task.create(task_description, deadline, priority)
    - task.update(task_id, updates)
    - task.list_all()
    description: Priya Singh, a financial advisor, is working in her small town office.
      She is evaluating three personal finance apps to determine their suitability
      for her clients. It is a typical workday morning, and Priya is focused on assessing
      the apps' features, usability, and security.
    entities:
    - Office Computer
    - Smartphone
    - CRM Software
    - Financial Planning Software
    - Personal Finance Apps (App G, App H, App I)
    - Client Survey Tools
    - Educational Materials
    - Newsletter Management System
    - Client Feedback
    - Financial Regulations
    - Professional Network
    events_example:
    - The agent opens a web browser and searches for user reviews on the latest personal
      finance apps.
    - The agent reads multiple articles and compiles key differences between three
      finance apps.
    - The agent accesses user feedback from an online finance forum and summarizes
      the comments.
    - The agent opens the file `FinanceAppReview.docx` and inserts a new section on
      app security features.
    - The agent extracts app features from screenshots provided by the user.
    - The user scrolls through multiple tabs in a browser comparing app user interfaces.
    - The user types notes in a digital notebook about app usability experiences.
    - The agent sends an email to a finance expert requesting insights on app performance.
    - The user opens a spreadsheet to log features and issues found in the test apps.
    - The agent annotates an app screenshot with comments on navigation ease.
    - The user switches between app interfaces on their smartphone to test responsiveness.
    - The user inputs search terms related to finance app integrations with smart
      devices.
    - The agent retrieves the latest updates on app security patches from official
      websites.
    - The user clicks between tabs to review notes taken from webinars about app functionality.
    - The agent opens the folder containing previous draft articles and highlights
      key points.
    - The agent identifies and marks inconsistencies in community feedback about an
      app.
    - The user inputs 'cmd+z' to undo changes in the blog draft.
    - The agent saves an updated draft article on personal finance apps to a specified
      directory.
    - The user switches focus to a podcast app to listen to expert discussions on
      personal finance apps.
    - The agent generates a list of questions for an upcoming interview with an app
      developer.
    theme: Financial Advisor's Office
  user:
    description: Priya Singh, 41, is a financial advisor with expert knowledge in
      personal finance and moderate understanding of technology. She has strong financial
      planning skills, is good at client communication, and has a decent understanding
      of finance-related technology. Priya enjoys helping clients achieve financial
      stability, writing educational content on finance, and participating in local
      community events.
    goal: Evaluate three personal finance apps for client use and write a comparative
      report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'web_scrape(url: str, data_type: str) -> str or list'
    - 'download_data(url: str, save_path: str) -> None'
    - 'aggregate_data(sources: list) -> dict'
    - 'visualize_data(data: dict, graph_type: str) -> str'
    - 'generate_report(content: dict, template_path: str) -> str'
    - 'summarize_feedback(feedback: list, n_sentences: int) -> str'
    - 'set_reminder(task: str, time: str) -> None'
    description: Sarah is working from her home office in Seattle on a rainy Tuesday
      afternoon. Her workspace is organized with dual monitors, one displaying a spreadsheet
      with various data points and the other showing a list of open browser tabs related
      to different e-commerce websites. It is around 3 PM, and Sarah has just finished
      a webinar on international trade policies, equipping her with additional insights
      for her report. She sips on her third cup of coffee to stay alert as the sound
      of raindrops tapping against her window creates a calming background noise.
    entities:
    - Dual Monitors
    - Laptop and Keyboard
    - Data Visualization Tools
    - Report Drafting Software
    - Notebook and Pen
    - "Online Marketplaces\u2019 Websites and APIs"
    - Industry Reports and Whitepapers
    - Customer Review Platforms
    - Internal ERP and CRM Systems
    - Webinars and Online Courses
    - Colleagues and Peers
    - Market Trends and News
    - AI Writing Assistant
    events_example:
    - The agent begins web scraping customer reviews from Amazon's website and saves
      the data.
    - The agent opens the Excel file titled 'MarketAnalysis2023.xlsx' and highlights
      anomalies in the pricing data.
    - The user opens a spreadsheet and enters market trends data collected from Statista.
    - The user types 'Amazon market share report 2023' in the search bar of the web
      browser and presses enter.
    - The agent downloads the whitepaper titled 'Global E-commerce Trends.pdf' from
      the Gartner website.
    - The user navigates to the eBay homepage and clicks on the 'Sales Reports' section.
    - The user scrolls through a PDF document from Forrester on pricing strategies
      for online marketplaces.
    - The agent identifies and flags inconsistent data points in the dataset named
      'AlibabaCustomerFeedback.csv'.
    - The agent opens a browser tab to check for updates on e-commerce news from Reuters.
    - The user accesses Tableau and inputs raw data to generate a visual dashboard
      for market comparison.
    theme: E-commerce Market Analysis
  user:
    description: Sarah is a 34-year-old e-commerce business analyst who has been in
      the industry for over a decade. She has a strong understanding of market analytics,
      pricing trends, and consumer behavior. Sarah is tech-savvy, comfortable with
      using various data analysis tools, and has a keen interest in global market
      dynamics. She prefers visual data representations and regularly keeps up with
      the latest trends through industry reports and webinars. Sarah has a habit of
      making thorough notes and summaries after her research sessions.
    goal: Investigate the market trends, pricing strategies, and customer feedback
      of three major online marketplaces (e.g., Amazon, eBay, Alibaba) and write a
      detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'web_scrape(url: str, data_type: str) -> str or list'
    - 'download_data(url: str, save_path: str) -> None'
    - 'aggregate_data(sources: list) -> dict'
    - 'visualize_data(data: dict, graph_type: str) -> str'
    - 'generate_report(content: dict, template_path: str) -> str'
    - 'summarize_feedback(feedback: list, n_sentences: int) -> str'
    - 'set_reminder(task: str, time: str) -> None'
    description: Jason is working from a co-working space in downtown San Francisco.
      His desk is cluttered with printed reports and sticky notes. He has a single
      monitor connected to his laptop, where he is juggling multiple tabs related
      to competitive analysis. It is mid-morning, and Jason is sipping on a smoothie
      while listening to a podcast about market strategies. The background noise of
      other professionals working creates a bustling atmosphere.
    entities:
    - Laptop and Monitor
    - Printed Reports and Sticky Notes
    - Competitive Analysis Tools
    - Survey Creation Software
    - Industry Reports and Whitepapers
    - Customer Review Platforms
    - Webinars and Podcasts
    - Colleagues and Peers
    - Market Trends and News
    - AI Writing Assistant
    events_example:
    - The agent begins web scraping customer reviews from Amazon's website and saves
      the data.
    - The agent opens the Excel file titled 'MarketAnalysis2023.xlsx' and highlights
      anomalies in the pricing data.
    - The user opens a spreadsheet and enters market trends data collected from Statista.
    - The user types 'Amazon market share report 2023' in the search bar of the web
      browser and presses enter.
    - The agent downloads the whitepaper titled 'Global E-commerce Trends.pdf' from
      the Gartner website.
    - The user navigates to the eBay homepage and clicks on the 'Sales Reports' section.
    - The user scrolls through a PDF document from Forrester on pricing strategies
      for online marketplaces.
    - The agent identifies and flags inconsistent data points in the dataset named
      'AlibabaCustomerFeedback.csv'.
    - The agent opens a browser tab to check for updates on e-commerce news from Reuters.
    - The user accesses Tableau and inputs raw data to generate a visual dashboard
      for market comparison.
    theme: Competitive Market Research
  user:
    description: Jason Lee is a 28-year-old market research consultant. His role involves
      helping companies understand their position within the market. He excels in
      conducting in-depth competitive analysis and designing surveys to capture customer
      insights. He is an avid reader and often attends industry conferences to stay
      updated on the latest trends.
    goal: Investigate the market trends, pricing strategies, and customer feedback
      of three major online marketplaces (e.g., Amazon, eBay, Alibaba) and write a
      detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'web_scrape(url: str, data_type: str) -> str or list'
    - 'download_data(url: str, save_path: str) -> None'
    - 'aggregate_data(sources: list) -> dict'
    - 'visualize_data(data: dict, graph_type: str) -> str'
    - 'generate_report(content: dict, template_path: str) -> str'
    - 'summarize_feedback(feedback: list, n_sentences: int) -> str'
    - 'set_reminder(task: str, time: str) -> None'
    description: Emily is working from a high-tech office in New York City. Her workspace
      is equipped with multiple monitors displaying complex data sets and statistical
      models. It is late afternoon, and Emily is focused on her task, occasionally
      taking sips from her water bottle. The office is quiet, with only the hum of
      computers and occasional phone calls breaking the silence.
    entities:
    - Multiple Monitors
    - High-Performance Workstation
    - Advanced Data Analytical Tools
    - Statistical Models
    - Industry Reports and Whitepapers
    - Customer Review Platforms
    - Predictive Analytics Software
    - Colleagues and Peers
    - Market Trends and News
    - AI Writing Assistant
    events_example:
    - The agent begins web scraping customer reviews from Amazon's website and saves
      the data.
    - The agent opens the Excel file titled 'MarketAnalysis2023.xlsx' and highlights
      anomalies in the pricing data.
    - The user opens a spreadsheet and enters market trends data collected from Statista.
    - The user types 'Amazon market share report 2023' in the search bar of the web
      browser and presses enter.
    - The agent downloads the whitepaper titled 'Global E-commerce Trends.pdf' from
      the Gartner website.
    - The user navigates to the eBay homepage and clicks on the 'Sales Reports' section.
    - The user scrolls through a PDF document from Forrester on pricing strategies
      for online marketplaces.
    - The agent identifies and flags inconsistent data points in the dataset named
      'AlibabaCustomerFeedback.csv'.
    - The agent opens a browser tab to check for updates on e-commerce news from Reuters.
    - The user accesses Tableau and inputs raw data to generate a visual dashboard
      for market comparison.
    theme: Data-Driven Market Analysis
  user:
    description: Emily Rodriguez is a 40-year-old senior data analyst. She has a background
      in data science and enjoys diving deep into numbers to uncover hidden patterns.
      She frequently uses predictive models to forecast market trends and assists
      her team in making data-driven decisions. Emily values precision and is known
      for her thorough and insightful analyses.
    goal: Investigate the market trends, pricing strategies, and customer feedback
      of three major online marketplaces (e.g., Amazon, eBay, Alibaba) and write a
      detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'web_scrape(url: str, data_type: str) -> str or list'
    - 'download_data(url: str, save_path: str) -> None'
    - 'aggregate_data(sources: list) -> dict'
    - 'visualize_data(data: dict, graph_type: str) -> str'
    - 'generate_report(content: dict, template_path: str) -> str'
    - 'summarize_feedback(feedback: list, n_sentences: int) -> str'
    - 'set_reminder(task: str, time: str) -> None'
    description: Liam is working from his company's office in Chicago. His desk is
      neat, with a few product samples and a project management board on the wall.
      He has a single monitor connected to his laptop, where he is reviewing product
      features and market demands. It is early afternoon, and Liam is reviewing feedback
      from a recent product launch while sipping on a cup of tea. The office buzzes
      with activity as teams collaborate on various projects.
    entities:
    - Laptop and Monitor
    - Product Samples
    - Project Management Board
    - Market Research Tools
    - Customer Feedback Platforms
    - Industry Reports and Whitepapers
    - Colleagues and Peers
    - Market Trends and News
    - AI Writing Assistant
    events_example:
    - The agent begins web scraping customer reviews from Amazon's website and saves
      the data.
    - The agent opens the Excel file titled 'MarketAnalysis2023.xlsx' and highlights
      anomalies in the pricing data.
    - The user opens a spreadsheet and enters market trends data collected from Statista.
    - The user types 'Amazon market share report 2023' in the search bar of the web
      browser and presses enter.
    - The agent downloads the whitepaper titled 'Global E-commerce Trends.pdf' from
      the Gartner website.
    - The user navigates to the eBay homepage and clicks on the 'Sales Reports' section.
    - The user scrolls through a PDF document from Forrester on pricing strategies
      for online marketplaces.
    - The agent identifies and flags inconsistent data points in the dataset named
      'AlibabaCustomerFeedback.csv'.
    - The agent opens a browser tab to check for updates on e-commerce news from Reuters.
    - The user accesses Tableau and inputs raw data to generate a visual dashboard
      for market comparison.
    theme: Product Market Strategy
  user:
    description: "Liam O'Reilly is a 32-year-old product manager. His job involves\
      \ ensuring that his company\u2019s products meet market demands. He leverages\
      \ his research skills to align product features with customer expectations.\
      \ Liam is efficient in using project management tools to keep his projects on\
      \ track and values collaboration and feedback."
    goal: Investigate the market trends, pricing strategies, and customer feedback
      of three major online marketplaces (e.g., Amazon, eBay, Alibaba) and write a
      detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'web_scrape(url: str, data_type: str) -> str or list'
    - 'download_data(url: str, save_path: str) -> None'
    - 'aggregate_data(sources: list) -> dict'
    - 'visualize_data(data: dict, graph_type: str) -> str'
    - 'generate_report(content: dict, template_path: str) -> str'
    - 'summarize_feedback(feedback: list, n_sentences: int) -> str'
    - 'set_reminder(task: str, time: str) -> None'
    description: Chloe is working from a shared office space in Austin. Her desk is
      decorated with motivational quotes and a small potted plant. She has a single
      monitor connected to her laptop, where she is analyzing SEO data and social
      media metrics. It is mid-morning, and Chloe is sipping on a latte while reviewing
      the performance of recent marketing campaigns. The office is lively, with background
      chatter and occasional laughter.
    entities:
    - Laptop and Monitor
    - SEO Tools
    - Analytics Dashboards
    - Social Media Marketing Platforms
    - Industry Reports and Whitepapers
    - Customer Feedback Platforms
    - Colleagues and Peers
    - Market Trends and News
    - AI Writing Assistant
    events_example:
    - The agent begins web scraping customer reviews from Amazon's website and saves
      the data.
    - The agent opens the Excel file titled 'MarketAnalysis2023.xlsx' and highlights
      anomalies in the pricing data.
    - The user opens a spreadsheet and enters market trends data collected from Statista.
    - The user types 'Amazon market share report 2023' in the search bar of the web
      browser and presses enter.
    - The agent downloads the whitepaper titled 'Global E-commerce Trends.pdf' from
      the Gartner website.
    - The user navigates to the eBay homepage and clicks on the 'Sales Reports' section.
    - The user scrolls through a PDF document from Forrester on pricing strategies
      for online marketplaces.
    - The agent identifies and flags inconsistent data points in the dataset named
      'AlibabaCustomerFeedback.csv'.
    - The agent opens a browser tab to check for updates on e-commerce news from Reuters.
    - The user accesses Tableau and inputs raw data to generate a visual dashboard
      for market comparison.
    theme: Digital Marketing Analysis
  user:
    description: Chloe Thompson is a 29-year-old digital marketing specialist. She
      works on devising marketing strategies that resonate with the target audience.
      She has a deep understanding of SEO and uses her skills to drive traffic and
      optimize online presence. Chloe stays ahead of digital marketing trends and
      loves experimenting with new techniques to engage customers.
    goal: Investigate the market trends, pricing strategies, and customer feedback
      of three major online marketplaces (e.g., Amazon, eBay, Alibaba) and write a
      detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> None'
    - 'email.read(email_id: str) -> dict'
    - 'email.send(recipient: str, subject: str, body: str, attachments: Optional[list]
      = None) -> bool'
    - 'text.generate_summary(text: str, max_length: int) -> str'
    - 'text.analyze_sentiment(text: str) -> dict'
    - 'calendar.find_available_slots(calendar_id: str, duration: int, start_time:
      str, end_time: str) -> list'
    - 'calendar.create_event(calendar_id: str, start_time: str, end_time: str, title:
      str, attendees: list) -> bool'
    - 'calendar.send_reminder(event_id: str, message: str, time_before_event: int)
      -> bool'
    - 'image.read_text(image_path: str) -> str'
    - 'image.generate_thumbnail(image_path: str, thumbnail_path: str, width: int,
      height: int) -> bool'
    description: Margaret, a mid-level project manager, is working from her home office
      on a sunny Wednesday morning. She is managing multiple projects and coordinating
      with her team using digital tools.
    entities:
    - Dual Monitors
    - Project Management Software (Asana)
    - Team Members and Stakeholders
    - AI Assistant (Alexa)
    - Institutional Policies and Deadlines
    events_example:
    - The agent reads received emails and identifies a meeting request from Dr. Robinson.
    - The user receives an email notification from the Outlook app, titled 'Team Update
      Required'.
    - The agent reads the document 'Q4_Project_Plan.docx' and extracts key milestones.
    - The user opened the project management software but do not perform any specific
      actions.
    - The agent opens the file 'presentation.pptx' and finds several formatting inconsistencies.
    - The user switches to the Calendar app and scrolls through the upcoming week's
      events.
    - The agent identifies overlapping time slots in the team's calendar for a proposed
      meeting.
    - The user receives a notification from Slack about a new message in the 'Marketing
      Team' channel.
    - The agent attempts to access a restricted file and encounters a permissions
      error.
    - The user opens the 'Notes' app and writes down ideas for the upcoming project
      presentation.
    theme: Project Management in Research Institution
  user:
    description: Margaret is a 35-year-old mid-level project manager at a research
      institution. She is proficient in project management tools and values organization
      and clarity in her work. She enjoys leveraging technology to enhance productivity
      and is responsible for coordinating with her team and managing project deadlines.
    goal: Schedule a meeting with Dr. Robinson and manage project timelines.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> None'
    - 'email.read(email_id: str) -> dict'
    - 'email.send(recipient: str, subject: str, body: str, attachments: Optional[list]
      = None) -> bool'
    - 'text.generate_summary(text: str, max_length: int) -> str'
    - 'text.analyze_sentiment(text: str) -> dict'
    - 'calendar.find_available_slots(calendar_id: str, duration: int, start_time:
      str, end_time: str) -> list'
    - 'calendar.create_event(calendar_id: str, start_time: str, end_time: str, title:
      str, attendees: list) -> bool'
    - 'calendar.send_reminder(event_id: str, message: str, time_before_event: int)
      -> bool'
    - 'image.read_text(image_path: str) -> str'
    - 'image.generate_thumbnail(image_path: str, thumbnail_path: str, width: int,
      height: int) -> bool'
    description: Nathan, a junior software developer, is working from his office at
      a tech company. He is involved in coding, reviewing pull requests, and collaborating
      with his team on new projects.
    entities:
    - Development Laptop
    - Version Control System (GitHub)
    - Team Members and Project Manager
    - AI Assistant (Dexter)
    - "Company\u2019s Development Cycle and Deadlines"
    events_example:
    - The agent reads received emails and identifies a meeting request from Dr. Robinson.
    - The user receives an email notification from the Outlook app, titled 'Team Update
      Required'.
    - The agent reads the document 'Q4_Project_Plan.docx' and extracts key milestones.
    - The user opened the project management software but do not perform any specific
      actions.
    - The agent opens the file 'presentation.pptx' and finds several formatting inconsistencies.
    - The user switches to the Calendar app and scrolls through the upcoming week's
      events.
    - The agent identifies overlapping time slots in the team's calendar for a proposed
      meeting.
    - The user receives a notification from Slack about a new message in the 'Marketing
      Team' channel.
    - The agent attempts to access a restricted file and encounters a permissions
      error.
    - The user opens the 'Notes' app and writes down ideas for the upcoming project
      presentation.
    theme: Software Development in Tech Company
  user:
    description: Nathan is a 29-year-old junior software developer at a tech company.
      He is skilled in programming languages like Python and Java, and he enjoys contributing
      to open-source projects. Nathan is responsible for reviewing code, collaborating
      with his team, and ensuring project deadlines are met.
    goal: Conduct code reviews and schedule a brainstorming session for a new project.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> None'
    - 'email.read(email_id: str) -> dict'
    - 'email.send(recipient: str, subject: str, body: str, attachments: Optional[list]
      = None) -> bool'
    - 'text.generate_summary(text: str, max_length: int) -> str'
    - 'text.analyze_sentiment(text: str) -> dict'
    - 'calendar.find_available_slots(calendar_id: str, duration: int, start_time:
      str, end_time: str) -> list'
    - 'calendar.create_event(calendar_id: str, start_time: str, end_time: str, title:
      str, attendees: list) -> bool'
    - 'calendar.send_reminder(event_id: str, message: str, time_before_event: int)
      -> bool'
    - 'image.read_text(image_path: str) -> str'
    - 'image.generate_thumbnail(image_path: str, thumbnail_path: str, width: int,
      height: int) -> bool'
    description: Emily, a senior marketing manager, is working from her office at
      an advertising agency. She is responsible for planning marketing campaigns,
      managing client relationships, and analyzing campaign performance.
    entities:
    - Marketing Dashboard
    - CRM Software (Salesforce)
    - Team Members and Clients
    - AI Assistant (Athena)
    - "Advertising Agency\u2019s Campaign Goals and Client Expectations"
    events_example:
    - The agent reads received emails and identifies a meeting request from Dr. Robinson.
    - The user receives an email notification from the Outlook app, titled 'Team Update
      Required'.
    - The agent reads the document 'Q4_Project_Plan.docx' and extracts key milestones.
    - The user opened the project management software but do not perform any specific
      actions.
    - The agent opens the file 'presentation.pptx' and finds several formatting inconsistencies.
    - The user switches to the Calendar app and scrolls through the upcoming week's
      events.
    - The agent identifies overlapping time slots in the team's calendar for a proposed
      meeting.
    - The user receives a notification from Slack about a new message in the 'Marketing
      Team' channel.
    - The agent attempts to access a restricted file and encounters a permissions
      error.
    - The user opens the 'Notes' app and writes down ideas for the upcoming project
      presentation.
    theme: Marketing Management in Advertising Agency
  user:
    description: Emily is a 42-year-old senior marketing manager at an advertising
      agency. She has expertise in strategic planning and campaign management, and
      she enjoys networking at industry events. Emily is responsible for managing
      marketing campaigns, client relationships, and analyzing market trends.
    goal: Plan and execute a new marketing campaign and schedule a meeting with a
      potential client.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, length)
    - text.edit(document_path, edits)
    - image.read(file_path)
    - image.generate(description, style)
    - web.browser.open(url)
    - web.scraper.scrape(url, parameters)
    - data.collect(source_list)
    - data.analyze(data_set, methods)
    - data.visualize(dataset, type)
    - file_system.open(file_path, mode)
    - file_system.save(file_path, content)
    - file_system.search(start_directory, keyword)
    - communication.email.send(recipient, subject, body, attachments)
    - collaboration.integrate(app_name, content)
    - time_manager.schedule(task, duration, reminders)
    - time_manager.track(time_spent, break_intervals)
    - terminal.run(command)
    - terminal.batch_execute(script_path)
    description: Alice Johnson, a Senior Data Analyst, is working from her home office
      early in the morning. She is tasked with preparing a detailed report analyzing
      job market trends, salary expectations, and growth prospects for AI, blockchain,
      and cybersecurity fields for an upcoming executive presentation.
    entities:
    - Multi-Screen Setup
    - Ergonomic Furniture
    - Data Analysis Software (Python, R, Tableau)
    - Cloud Storage (Google Drive, Dropbox)
    - Reference Books
    - Executive Team
    - Colleagues
    - Clients
    - Industry Reports
    - Professional Forums
    - Online Databases (IEEE Xplore, arXiv, Gartner)
    events_example:
    - The agent opens a browser and searches for recent job market trends in AI.
    - The user types 'cmdw' to close a tab in their research document.
    - The agent reads new emails and schedules a meeting for the user about the tech
      report.
    - The agent identifies and fixes formatting errors in a blockchain data report
      file.
    - The user scrolls through a database of industry reports and selects a document
      to read.
    - The agent generates a salary benchmarking chart using recent survey data.
    - The user navigates to a professional forum and posts a query about cybersecurity
      growth prospects.
    - The agent scrapes data from a website and stores it in a CSV file for analysis.
    - The user clicks into their scheduling app and enters deadlines for each section
      of the report.
    - The agent runs a command to execute a script for cleaning large datasets.
    theme: Data Analysis for Emerging Tech Fields
  user:
    description: Alice Johnson, 34, is a Senior Data Analyst at a multinational corporation.
      She has advanced proficiency in data analysis, intermediate knowledge in AI
      and machine learning, and prefers structured, data-driven insights. She enjoys
      leveraging AI tools to streamline her work and is interested in emerging tech
      trends.
    goal: Conduct a detailed analysis of the job market, salary expectations, and
      growth prospects for AI, blockchain, and cybersecurity, and write a report.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, length)
    - text.edit(document_path, edits)
    - image.read(file_path)
    - image.generate(description, style)
    - web.browser.open(url)
    - web.scraper.scrape(url, parameters)
    - data.collect(source_list)
    - data.analyze(data_set, methods)
    - data.visualize(dataset, type)
    - file_system.open(file_path, mode)
    - file_system.save(file_path, content)
    - file_system.search(start_directory, keyword)
    - communication.email.send(recipient, subject, body, attachments)
    - collaboration.integrate(app_name, content)
    - time_manager.schedule(task, duration, reminders)
    - time_manager.track(time_spent, break_intervals)
    - terminal.run(command)
    - terminal.batch_execute(script_path)
    description: Michael Turner, an HR Manager for a tech startup specializing in
      blockchain solutions, is working from his office. He is tasked with conducting
      a detailed analysis of the job market, salary expectations, and growth prospects
      for AI, blockchain, and cybersecurity to inform the company's recruitment and
      retention strategies.
    entities:
    - HR Software (Workday, BambooHR)
    - Excel
    - Blockchain Applications
    - Startup Employees
    - Recruitment Strategy
    - Executive Decisions
    - Competitor Analysis
    - Industry Webinars
    - Expert Opinions
    events_example:
    - The agent opens a browser and searches for recent job market trends in AI.
    - The user types 'cmdw' to close a tab in their research document.
    - The agent reads new emails and schedules a meeting for the user about the tech
      report.
    - The agent identifies and fixes formatting errors in a blockchain data report
      file.
    - The user scrolls through a database of industry reports and selects a document
      to read.
    - The agent generates a salary benchmarking chart using recent survey data.
    - The user navigates to a professional forum and posts a query about cybersecurity
      growth prospects.
    - The agent scrapes data from a website and stores it in a CSV file for analysis.
    - The user clicks into their scheduling app and enters deadlines for each section
      of the report.
    - The agent runs a command to execute a script for cleaning large datasets.
    theme: HR Analysis for Tech Startup
  user:
    description: Michael Turner, 28, is an HR Manager for a tech startup specializing
      in blockchain solutions. He has intermediate data analysis skills, is proficient
      with Excel and HR software, and has experience in tech recruitment. He is focused
      on understanding market trends to inform the company's recruitment and retention
      strategies.
    goal: Conduct a detailed analysis of the job market, salary expectations, and
      growth prospects for AI, blockchain, and cybersecurity, and write a report.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, length)
    - text.edit(document_path, edits)
    - image.read(file_path)
    - image.generate(description, style)
    - web.browser.open(url)
    - web.scraper.scrape(url, parameters)
    - data.collect(source_list)
    - data.analyze(data_set, methods)
    - data.visualize(dataset, type)
    - file_system.open(file_path, mode)
    - file_system.save(file_path, content)
    - file_system.search(start_directory, keyword)
    - communication.email.send(recipient, subject, body, attachments)
    - collaboration.integrate(app_name, content)
    - time_manager.schedule(task, duration, reminders)
    - time_manager.track(time_spent, break_intervals)
    - terminal.run(command)
    - terminal.batch_execute(script_path)
    description: Priya Singh, a freelance technology journalist, is working from her
      home office. She is tasked with conducting a detailed analysis of the job market,
      salary expectations, and growth prospects for AI, blockchain, and cybersecurity,
      and writing an article for a tech magazine.
    entities:
    - Writing Software (Microsoft Word, Google Docs)
    - SEO Tools (SEMrush, Ahrefs)
    - Data Visualization Tools (Infogram, Canva)
    - Tech Magazine/Blog
    - Industry Professionals
    - Freelance Network
    - Social Media Trends
    - Editorial Feedback
    - Interview Subjects
    events_example:
    - The agent opens a browser and searches for recent job market trends in AI.
    - The user types 'cmdw' to close a tab in their research document.
    - The agent reads new emails and schedules a meeting for the user about the tech
      report.
    - The agent identifies and fixes formatting errors in a blockchain data report
      file.
    - The user scrolls through a database of industry reports and selects a document
      to read.
    - The agent generates a salary benchmarking chart using recent survey data.
    - The user navigates to a professional forum and posts a query about cybersecurity
      growth prospects.
    - The agent scrapes data from a website and stores it in a CSV file for analysis.
    - The user clicks into their scheduling app and enters deadlines for each section
      of the report.
    - The agent runs a command to execute a script for cleaning large datasets.
    theme: Freelance Technology Journalism
  user:
    description: Priya Singh, 30, is a freelance technology journalist with advanced
      writing skills, intermediate data analysis skills, and knowledge of SEO. She
      is proficient with online research tools and is focused on producing well-researched
      articles for tech magazines.
    goal: Conduct a detailed analysis of the job market, salary expectations, and
      growth prospects for AI, blockchain, and cybersecurity, and write an article.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, length)
    - text.edit(document_path, edits)
    - image.read(file_path)
    - image.generate(description, style)
    - web.browser.open(url)
    - web.scraper.scrape(url, parameters)
    - data.collect(source_list)
    - data.analyze(data_set, methods)
    - data.visualize(dataset, type)
    - file_system.open(file_path, mode)
    - file_system.save(file_path, content)
    - file_system.search(start_directory, keyword)
    - communication.email.send(recipient, subject, body, attachments)
    - collaboration.integrate(app_name, content)
    - time_manager.schedule(task, duration, reminders)
    - time_manager.track(time_spent, break_intervals)
    - terminal.run(command)
    - terminal.batch_execute(script_path)
    description: Jonathan Blake, a Professor of Technology Management, is working
      from his university office. He is tasked with conducting a detailed analysis
      of the job market, salary expectations, and growth prospects for AI, blockchain,
      and cybersecurity to update his curriculum and apply for research grants.
    entities:
    - University Library
    - Research Software (EndNote)
    - Online Journals (IEEE Transactions, ACM Digital Library)
    - Students
    - Colleagues
    - University Reputation
    - Academic Conferences
    - Research Grants
    - Industry Partners
    events_example:
    - The agent opens a browser and searches for recent job market trends in AI.
    - The user types 'cmdw' to close a tab in their research document.
    - The agent reads new emails and schedules a meeting for the user about the tech
      report.
    - The agent identifies and fixes formatting errors in a blockchain data report
      file.
    - The user scrolls through a database of industry reports and selects a document
      to read.
    - The agent generates a salary benchmarking chart using recent survey data.
    - The user navigates to a professional forum and posts a query about cybersecurity
      growth prospects.
    - The agent scrapes data from a website and stores it in a CSV file for analysis.
    - The user clicks into their scheduling app and enters deadlines for each section
      of the report.
    - The agent runs a command to execute a script for cleaning large datasets.
    theme: Academic Research in Technology Management
  user:
    description: Jonathan Blake, 42, is a Professor of Technology Management with
      advanced research and data analysis skills, expert knowledge in technology trends,
      and proficiency in academic writing and presentation tools. He is focused on
      updating his curriculum and applying for research grants.
    goal: Conduct a detailed analysis of the job market, salary expectations, and
      growth prospects for AI, blockchain, and cybersecurity, and write a report.
- environment:
    agent_ops:
    - text.read(content)
    - text.generate(prompt, length)
    - text.edit(document_path, edits)
    - image.read(file_path)
    - image.generate(description, style)
    - web.browser.open(url)
    - web.scraper.scrape(url, parameters)
    - data.collect(source_list)
    - data.analyze(data_set, methods)
    - data.visualize(dataset, type)
    - file_system.open(file_path, mode)
    - file_system.save(file_path, content)
    - file_system.search(start_directory, keyword)
    - communication.email.send(recipient, subject, body, attachments)
    - collaboration.integrate(app_name, content)
    - time_manager.schedule(task, duration, reminders)
    - time_manager.track(time_spent, break_intervals)
    - terminal.run(command)
    - terminal.batch_execute(script_path)
    description: Emily Zhang, a Junior Consultant at a business consulting firm, is
      working from her office. She is tasked with conducting a detailed analysis of
      the job market, salary expectations, and growth prospects for AI, blockchain,
      and cybersecurity to assist senior consultants in preparing a client report.
    entities:
    - Spreadsheet Software (Excel, Google Sheets)
    - Market Research Tools (Statista, MarketWatch)
    - Collaboration Tools (Slack, Microsoft Teams)
    - Senior Consultants
    - Clients
    - Team Dynamics
    - Mentors and Peers
    - Client Requirements
    - Consulting Best Practices
    events_example:
    - The agent opens a browser and searches for recent job market trends in AI.
    - The user types 'cmdw' to close a tab in their research document.
    - The agent reads new emails and schedules a meeting for the user about the tech
      report.
    - The agent identifies and fixes formatting errors in a blockchain data report
      file.
    - The user scrolls through a database of industry reports and selects a document
      to read.
    - The agent generates a salary benchmarking chart using recent survey data.
    - The user navigates to a professional forum and posts a query about cybersecurity
      growth prospects.
    - The agent scrapes data from a website and stores it in a CSV file for analysis.
    - The user clicks into their scheduling app and enters deadlines for each section
      of the report.
    - The agent runs a command to execute a script for cleaning large datasets.
    theme: Business Consulting for Emerging Tech
  user:
    description: Emily Zhang, 26, is a Junior Consultant at a business consulting
      firm with foundational data analysis skills, proficiency with Excel and market
      research tools, and a basic understanding of tech trends. She is focused on
      assisting senior consultants in preparing client reports.
    goal: Conduct a detailed analysis of the job market, salary expectations, and
      growth prospects for AI, blockchain, and cybersecurity, and write a report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - terminal_check_status() -> str
    - 'file_open(file_path: str) -> str'
    - 'file_save(file_path: str, content: str) -> bool'
    - 'browser_open(url: str) -> None'
    - 'browser_search(query: str) -> str'
    - 'browser_extract_code(url: str) -> str'
    - 'fetch_documentation(topic: str) -> str'
    - 'fetch_example_code(topic: str) -> str'
    - 'suggest_optimization(code_snippet: str) -> str'
    - 'debug_code(code_snippet: str) -> str'
    - 'refactor_code(code_snippet: str, style_guide: str) -> str'
    - 'schedule_break(timer: int) -> str'
    - 'generate_report(summary: str) -> bool'
    description: A team of developers is working on implementing a lightweight virtual
      DOM library in JavaScript, inspired by React. The scene is set in a collaborative,
      tech-savvy environment with each developer focusing on different aspects of
      the project.
    entities:
    - Dual Monitors
    - Mechanical Keyboard
    - Whiteboard with Scribbles
    - Integrated Development Environment (IDE)
    - Online Documentation and Forums
    - Virtual DOM Library Repository
    - Continuous Integration/Continuous Deployment (CI/CD) Pipeline
    - Project Manager
    - Mentors and Peers
    - Tech Blog Writers
    events_example:
    - The agent opens the browser and searches for tutorials on implementing a virtual
      DOM library.
    - The agent reads received emails and schedules a meeting with the project manager.
    - The user switches to editing index.js in the project /Users/Alex/CodingProjects/VirtualDOM.
    - The agent opens the file diffingAlgorithm.js and identifies several code inefficiencies.
    - The user clicks on a link from the Mozilla Developer Network (MDN) about JavaScript
      event handling.
    - The agent performs a web search for 'how to optimize virtual DOM diffing'.
    - The user switches back to the IDE from Chrome but does not perform any specific
      actions.
    - The agent opens the file README.md and starts generating documentation for the
      project.
    - The user navigates Google search results for 'React reconciliation algorithm'
      and opens a Stack Overflow page.
    - The agent fetches example code snippets for a basic diffing function in JavaScript.
    - The user scrolls through multiple interactions within Visual Studio Code, looking
      for syntax errors.
    - The user double-clicks to switch to a Chrome tab titled 'GitHub - virtual-dom'.
    - The agent runs the command npm test in the terminal and checks for test failures.
    - The user right-clicked and clicked several times on the Google search results
      page for 'virtual DOM benefits'.
    - The agent opens the file render.js and suggests performance optimizations.
    - The user types 'virtual DOM vs real DOM performance' in the browser's search
      bar and hits enter.
    - The agent writes a new function for creating virtual DOM elements in the file
      createElement.js.
    - The user visited 'https://developer.mozilla.org' searching for 'JavaScript DOM
      manipulation techniques'.
    - The agent extracts code examples from a GitHub page related to virtual DOM implementations.
    - The user clicks to switch back to the terminal and runs npm install to update
      dependencies.
    - The agent generates a report summarizing the completed tasks and current bottlenecks
      in the project.
    - The user scrolls down a blog post on 'optimizing JavaScript performance' and
      bookmarks it for later.
    - The agent suggests refactoring code in diffingAlgorithm.js to improve readability.
    - The user double-clicks to switch to a Chrome tab titled 'React virtual DOM explained'.
    - The agent checks the status of the CI/CD pipeline and notifies the user of any
      build failures.
    - The user copies a code snippet from a forum and pastes it into index.js.
    - The agent opens the file tests/diffingAlgorithm.test.js and writes additional
      unit tests.
    - The user switches back to the IDE and starts editing the file index.js.
    - The user clicked on a link from the search results for 'virtual DOM tutorial'
      on Google.
    - The agent schedules a break for the user after detecting continuous work for
      2 hours.
    theme: Virtual DOM Library Development
  user:
    description: The user is a skilled JavaScript developer working on creating a
      virtual DOM library. They are focused on optimizing performance, writing comprehensive
      tests, and ensuring the library is well-documented and user-friendly.
    goal: Implement a virtual DOM library in JavaScript with basic functionalities
      similar to React.
- environment:
    agent_ops:
    - text.read(doc)
    - image.read(img)
    - text.generate(prompt)
    - text.summarize(content)
    - browser.open(url)
    - browser.extract_text(url, selector)
    - browser.search(query)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory)
    - data.analyze_feedback(reviews)
    - data.visualize(content)
    description: Emily Rogers, a freelance writer and environmental researcher, is
      working from her home office in Portland, Oregon. She is investigating eco-friendly
      products such as biodegradable coffee cups, solar chargers, and recycled fabric
      bags. Her workspace is filled with digital tools and eco-friendly samples to
      aid her research and writing process.
    entities:
    - Laptop
    - Digital Notebook
    - Infographic Software
    - Library of Eco-Friendly Product Samples
    - House Plants
    - Online Retail Platforms
    - Local Stores
    - Review Databases
    - Environmental Forums
    - Scientific Journals
    - Peers/Colleagues
    events_example:
    - The agent opens the web browser and navigates to a popular retail site to search
      for biodegradable coffee cups.
    - The user types 'solar charger reviews' into the search bar of their web browser
      and hits 'Enter'.
    - The agent reads the web page content from a sustainability blog and extracts
      information on recycled fabric bags.
    - The user scrolls through a PDF document titled 'Eco-Product Whitepaper' on their
      e-reader.
    - The agent attempts to access a restricted website for detailed product specifications
      but receives an access denial error.
    - The user enters 'compare eco-friendly products' into the browser search bar
      and clicks the search button.
    - The agent saves the current draft of an article in the file 'EcoArticleDraft.txt'
      on the user's desktop.
    - The agent recognizes text from an image of a product label and inputs it into
      the user's notes file.
    - "The user clicks 'New Tab' in their browser and types 'local store availability\
      \ biodegradable cups\u2019."
    - The agent performs a text summarization task on multiple customer reviews compiled
      in a document.
    theme: Eco-Friendly Product Research
  user:
    description: Emily Rogers is a 32-year-old freelance writer and environmental
      researcher with intermediate expertise in sustainable living topics. She is
      passionate about eco-friendly products and uses digital tools to streamline
      her research and writing process.
    goal: Investigate eco-friendly products and write an article
- environment:
    agent_ops:
    - text.read(doc)
    - image.read(img)
    - text.generate(prompt)
    - text.summarize(content)
    - browser.open(url)
    - browser.extract_text(url, selector)
    - browser.search(query)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory)
    - data.analyze_feedback(reviews)
    - data.visualize(content)
    description: John Smith, a content creator and tech blogger, is focused on creating
      engaging content about eco-friendly products. He works from his home studio,
      equipped with video editing tools and cameras, to produce blog posts and social
      media campaigns.
    entities:
    - High-Quality Camera
    - Video Editing Software
    - Social Media Scheduler
    - Testing Kit
    - Blog and YouTube Channel
    - Social Media Platforms
    - Affiliate Links
    - Followers & Subscribers
    - Brand Collaborations
    - Technical Specifications from Manufacturers
    events_example:
    - The agent opens the web browser and navigates to a popular retail site to search
      for biodegradable coffee cups.
    - The user types 'solar charger reviews' into the search bar of their web browser
      and hits 'Enter'.
    - The agent reads the web page content from a sustainability blog and extracts
      information on recycled fabric bags.
    - The user scrolls through a PDF document titled 'Eco-Product Whitepaper' on their
      e-reader.
    - The agent attempts to access a restricted website for detailed product specifications
      but receives an access denial error.
    - The user enters 'compare eco-friendly products' into the browser search bar
      and clicks the search button.
    - The agent saves the current draft of an article in the file 'EcoArticleDraft.txt'
      on the user's desktop.
    - The agent recognizes text from an image of a product label and inputs it into
      the user's notes file.
    - "The user clicks 'New Tab' in their browser and types 'local store availability\
      \ biodegradable cups\u2019."
    - The agent performs a text summarization task on multiple customer reviews compiled
      in a document.
    theme: Content Creation and Blogging
  user:
    description: John Smith is a 28-year-old content creator and blogger specializing
      in tech and green energy. He uses video editing and social media marketing skills
      to engage his audience with innovative green technologies.
    goal: Create content about eco-friendly products for blog and social media
- environment:
    agent_ops:
    - text.read(doc)
    - image.read(img)
    - text.generate(prompt)
    - text.summarize(content)
    - browser.open(url)
    - browser.extract_text(url, selector)
    - browser.search(query)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory)
    - data.analyze_feedback(reviews)
    - data.visualize(content)
    description: Sara Thompson, an environmental consultant and public speaker, is
      preparing a white paper on eco-friendly products. She works from her office,
      using a tablet and presentation software to compile data and create informative
      presentations.
    entities:
    - Tablet
    - Presentation Software
    - White Paper Drafts
    - Government and NGO Websites
    - Institutional Links
    - Procurement Departments
    - Policy Makers and Government Officials
    - Thought Leaders and Industry Experts
    - Community Feedback
    events_example:
    - The agent opens the web browser and navigates to a popular retail site to search
      for biodegradable coffee cups.
    - The user types 'solar charger reviews' into the search bar of their web browser
      and hits 'Enter'.
    - The agent reads the web page content from a sustainability blog and extracts
      information on recycled fabric bags.
    - The user scrolls through a PDF document titled 'Eco-Product Whitepaper' on their
      e-reader.
    - The agent attempts to access a restricted website for detailed product specifications
      but receives an access denial error.
    - The user enters 'compare eco-friendly products' into the browser search bar
      and clicks the search button.
    - The agent saves the current draft of an article in the file 'EcoArticleDraft.txt'
      on the user's desktop.
    - The agent recognizes text from an image of a product label and inputs it into
      the user's notes file.
    - "The user clicks 'New Tab' in their browser and types 'local store availability\
      \ biodegradable cups\u2019."
    - The agent performs a text summarization task on multiple customer reviews compiled
      in a document.
    theme: Environmental Consulting and Public Speaking
  user:
    description: Sara Thompson is a 45-year-old environmental consultant and public
      speaker. She focuses on policy analysis and community engagement, aiming to
      influence environmental sustainability through informed recommendations.
    goal: Prepare a white paper on eco-friendly products
- environment:
    agent_ops:
    - text.read(doc)
    - image.read(img)
    - text.generate(prompt)
    - text.summarize(content)
    - browser.open(url)
    - browser.extract_text(url, selector)
    - browser.search(query)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list(directory)
    - data.analyze_feedback(reviews)
    - data.visualize(content)
    description: Miguel Fernandez, a high school science teacher, is guiding his students
      through a research project on eco-friendly products. His classroom is equipped
      with science kits and an interactive whiteboard for hands-on learning.
    entities:
    - Classroom Science Kits
    - Interactive Whiteboard
    - Student Surveys and Feedback Forms
    - School Library and Online Resources
    - Parents and Guardians
    - Local Suppliers
    - Curriculum Standards
    - Educational Partners
    - Student Interests & Feedback
    events_example:
    - The agent opens the web browser and navigates to a popular retail site to search
      for biodegradable coffee cups.
    - The user types 'solar charger reviews' into the search bar of their web browser
      and hits 'Enter'.
    - The agent reads the web page content from a sustainability blog and extracts
      information on recycled fabric bags.
    - The user scrolls through a PDF document titled 'Eco-Product Whitepaper' on their
      e-reader.
    - The agent attempts to access a restricted website for detailed product specifications
      but receives an access denial error.
    - The user enters 'compare eco-friendly products' into the browser search bar
      and clicks the search button.
    - The agent saves the current draft of an article in the file 'EcoArticleDraft.txt'
      on the user's desktop.
    - The agent recognizes text from an image of a product label and inputs it into
      the user's notes file.
    - "The user clicks 'New Tab' in their browser and types 'local store availability\
      \ biodegradable cups\u2019."
    - The agent performs a text summarization task on multiple customer reviews compiled
      in a document.
    theme: Educational Project on Eco-Friendly Products
  user:
    description: Miguel Fernandez is a 35-year-old high school science teacher who
      integrates sustainability into his curriculum. He focuses on hands-on science
      projects to engage students in environmental education.
    goal: Guide students through a research project on eco-friendly products
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str: Executes a terminal command in the user''s
      development environment.'
    - 'terminal_install_package(package_name: str) -> str: Installs a specified package
      or library using a package manager.'
    - 'file.open(file_path: str) -> str: Opens a file and returns its contents as
      a string.'
    - 'file.save(file_path: str, content: str) -> bool: Saves the provided content
      to a specified file.'
    - 'browser.open(url: str) -> str: Opens a web page in the browser and returns
      the HTML content of the page.'
    - 'browser.search(query: str) -> list[str]: Performs a web search with the provided
      query and returns a list of search result URLs.'
    - 'text.analyze(code_snippet: str) -> dict: Analyzes a provided code snippet for
      syntax errors, performance issues, or optimization suggestions.'
    - 'image.extract_text(image_path: str) -> str: Extracts text from an image file
      using optical character recognition (OCR).'
    - 'code.suggest_fix(error_message: str) -> str: Provides a suggested fix or debugging
      steps based on a given error message.'
    - 'data.generate_sample(data_type: str) -> str: Generates sample data for testing
      purposes based on the specified data type.'
    description: Mark is working from his home office in San Francisco on a Tuesday
      afternoon. He is developing a concurrent web crawler in Go to scrape multiple
      websites and store the content in a database. His workspace includes a dual-monitor
      setup, mechanical keyboard, and his cat Luna. The room is well-lit with natural
      light streaming in from the window.
    entities:
    - 'Workstation: Dual-monitor setup with a high-resolution primary monitor and
      a secondary monitor for documentation.'
    - 'Mechanical Keyboard and Ergonomic Mouse: Used for long coding sessions, enhancing
      productivity and comfort.'
    - 'Smartphone: Loaded with tech news apps and communication tools.'
    - 'VSCode: Primary code editor with various plugins for Go development.'
    - 'PostgreSQL Database: Used to store scraped web data.'
    - 'GitHub: Platform for version control and collaboration.'
    - 'Go Documentation and Tutorials: Comprehensive guides and tutorials for learning
      Go programming.'
    - 'Tech Forums and Developer Communities: Platforms where Mark asks questions
      and reads discussions on concurrent programming in Go.'
    - 'Luna the Cat: Mark''s pet cat who provides companionship during work hours.'
    - 'Mentor: Experienced developer whom Mark regularly consults for advice.'
    - 'Multiple Websites for Scraping: Various targeted sites that Mark plans to scrape
      for technology trend data.'
    - 'Internet Connection: High-speed broadband that ensures smooth development and
      data transfer.'
    events_example:
    - The agent opens the terminal and runs the command to install the Go Gorilla
      Mux package.
    - The agent opens the file `crawler.go` and reads its content.
    - The agent saves the updated code into the file `crawler.go`.
    - The agent performs a web search for 'best practices for goroutines in Go.'
    - The agent opens the browser and searches for 'PostgreSQL connection Go.'
    - The user opens a new browser tab and navigates to the Go documentation homepage.
    - The agent opens GitHub and searches for open-source Go web crawlers.
    - The user types a combination of commands including 'ctrl+s' to save in Visual
      Studio Code.
    - The agent identifies entry points and potential bugs in the file `crawler.go`.
    - The user switches back to the `VSCode` application again without performing
      any actions.
    - The agent installs the `pq` PostgreSQL driver package using the terminal.
    - The user opens the database management tool and checks the schema for the web
      crawler project.
    - The agent generates example data in JSON format for testing purposes.
    - The user switches to the `DeepSeek` chat tab and types a question about Go concurrency.
    - The agent extracts text from an image file containing error logs using OCR.
    - The user interacts with the `crawler.go` file by scrolling, right-clicking,
      and typing comments.
    - The agent opens the webpage `https://golang.org/pkg/net/http/` and reads the
      documentation on HTTP.
    - The user performs multiple scroll actions and types 'web scraper tutorial' on
      Bing.
    - The agent searches for tutorials on deploying Go applications with Docker.
    - The agent saves log information into the file `log.txt`.
    - The user clicked on a Stack Overflow search result regarding handling errors
      in Go.
    - The agent opens the terminal and runs `go test` to test the web crawler application.
    - The agent searches for 'how to secure web scraper against common vulnerabilities.'
    - The user reviews multiple Google search results and explores links to guides
      on 'concurrent programming in Go.'
    - The agent installs the `logrus` package for logging in Go using the terminal.
    - The user types 'cmd terminal' and presses 'Enter' within Visual Studio Code,
      interacting with the `crawler.go` file.
    - The agent performs a web search for methods to optimize performance in Go.
    - The agent suggests fixes for syntax errors detected in the file `crawler.go`.
    - The user scrolls, right-clicks, and types commands relating to `docker-compose`
      in Visual Studio Code.
    - The agent searches for best practices in handling PostgreSQL connections in
      Go using the browser.
    theme: Concurrent Web Crawler Development
  user:
    description: Mark is a 29-year-old mid-level software developer with three years
      of experience in backend development using Node.js and Python. He is transitioning
      into Go programming to diversify his skills. Mark is detail-oriented, enjoys
      optimizing performance, and regularly engages in professional development. He
      is working from his home office in San Francisco.
    goal: Write a concurrent web crawler in Go to scrape multiple websites and store
      the content in a database.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str: Executes a terminal command in the user''s
      development environment.'
    - 'terminal_install_package(package_name: str) -> str: Installs a specified package
      or library using a package manager.'
    - 'file.open(file_path: str) -> str: Opens a file and returns its contents as
      a string.'
    - 'file.save(file_path: str, content: str) -> bool: Saves the provided content
      to a specified file.'
    - 'browser.open(url: str) -> str: Opens a web page in the browser and returns
      the HTML content of the page.'
    - 'browser.search(query: str) -> list[str]: Performs a web search with the provided
      query and returns a list of search result URLs.'
    - 'text.analyze(code_snippet: str) -> dict: Analyzes a provided code snippet for
      syntax errors, performance issues, or optimization suggestions.'
    - 'image.extract_text(image_path: str) -> str: Extracts text from an image file
      using optical character recognition (OCR).'
    - 'code.suggest_fix(error_message: str) -> str: Provides a suggested fix or debugging
      steps based on a given error message.'
    - 'data.generate_sample(data_type: str) -> str: Generates sample data for testing
      purposes based on the specified data type.'
    description: Lisa is working from her apartment in Austin, TX on a Saturday morning.
      She is developing a concurrent web crawler in Go to gather large datasets for
      her data analysis projects. Her workspace includes a single monitor setup, a
      comfortable chair, and a cup of coffee. The room is quiet and well-lit with
      natural light.
    entities:
    - 'Workstation: Single monitor setup with a comfortable chair.'
    - 'Laptop: Used for coding and data analysis.'
    - 'Coffee Mug: Keeps Lisa energized during her coding sessions.'
    - 'VSCode: Primary code editor with various plugins for Go development.'
    - 'PostgreSQL Database: Used to store scraped web data.'
    - 'GitHub: Platform for version control and collaboration.'
    - 'Go Documentation and Tutorials: Comprehensive guides and tutorials for learning
      Go programming.'
    - 'Tech Forums and Developer Communities: Platforms where Lisa asks questions
      and reads discussions on concurrent programming in Go.'
    - 'Multiple Websites for Scraping: Various targeted sites that Lisa plans to scrape
      for data analysis.'
    - 'Internet Connection: High-speed broadband that ensures smooth development and
      data transfer.'
    events_example:
    - The agent opens the terminal and runs the command to install the Go Gorilla
      Mux package.
    - The agent opens the file `crawler.go` and reads its content.
    - The agent saves the updated code into the file `crawler.go`.
    - The agent performs a web search for 'best practices for goroutines in Go.'
    - The agent opens the browser and searches for 'PostgreSQL connection Go.'
    - The user opens a new browser tab and navigates to the Go documentation homepage.
    - The agent opens GitHub and searches for open-source Go web crawlers.
    - The user types a combination of commands including 'ctrl+s' to save in Visual
      Studio Code.
    - The agent identifies entry points and potential bugs in the file `crawler.go`.
    - The user switches back to the `VSCode` application again without performing
      any actions.
    - The agent installs the `pq` PostgreSQL driver package using the terminal.
    - The user opens the database management tool and checks the schema for the web
      crawler project.
    - The agent generates example data in JSON format for testing purposes.
    - The user switches to the `DeepSeek` chat tab and types a question about Go concurrency.
    - The agent extracts text from an image file containing error logs using OCR.
    - The user interacts with the `crawler.go` file by scrolling, right-clicking,
      and typing comments.
    - The agent opens the webpage `https://golang.org/pkg/net/http/` and reads the
      documentation on HTTP.
    - The user performs multiple scroll actions and types 'web scraper tutorial' on
      Bing.
    - The agent searches for tutorials on deploying Go applications with Docker.
    - The agent saves log information into the file `log.txt`.
    - The user clicked on a Stack Overflow search result regarding handling errors
      in Go.
    - The agent opens the terminal and runs `go test` to test the web crawler application.
    - The agent searches for 'how to secure web scraper against common vulnerabilities.'
    - The user reviews multiple Google search results and explores links to guides
      on 'concurrent programming in Go.'
    - The agent installs the `logrus` package for logging in Go using the terminal.
    - The user types 'cmd terminal' and presses 'Enter' within Visual Studio Code,
      interacting with the `crawler.go` file.
    - The agent performs a web search for methods to optimize performance in Go.
    - The agent suggests fixes for syntax errors detected in the file `crawler.go`.
    - The user scrolls, right-clicks, and types commands relating to `docker-compose`
      in Visual Studio Code.
    - The agent searches for best practices in handling PostgreSQL connections in
      Go using the browser.
    theme: Concurrent Web Crawler Development
  user:
    description: Lisa is a 25-year-old junior data scientist with a strong foundation
      in data analysis and machine learning. She is learning Go to expand her skillset
      and aims to scrape large datasets for her analytical projects. She is working
      from her apartment in Austin, TX.
    goal: Write a concurrent web crawler in Go to scrape multiple websites and store
      the content in a database.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> bool'
    - 'browser.read_page_content(url: str) -> str'
    - 'browser.extract_info(url: str, query: str) -> dict'
    - 'data.extract_tables(content: str) -> list'
    - 'data.analyze_fee_structure(tables: list) -> dict'
    - 'generate.summary(content: str, key_points: list) -> str'
    - 'generate.detailed_report(comparison_data: dict) -> str'
    - 'image.read_and_convert(image_path: str) -> str'
    - 'image.extract_graph_data(image_path: str) -> dict'
    description: Greg, a mid-level financial analyst, is working from his home office
      in Manhattan. It's a Tuesday evening, and he's preparing a detailed report on
      investment options, fees, and user satisfaction for three major online brokerage
      firms. His workspace is equipped with dual monitors, an espresso machine, and
      ambient music playing in the background.
    entities:
    - Dual Monitors
    - Spreadsheet Software
    - Online Brokerage Firms
    - Financial News Websites
    - Financial Forums
    events_example:
    - The user opens multiple financial news websites in the web browser.
    - The agent extracts user reviews from the Charles Schwab website.
    - The user scrolls through recent articles on sustainable investing in their browser.
    - The user types 'current investment options Vanguard' in the Google search bar.
    - The agent analyzes and highlights hidden fees from a PDF document.
    - The user clicks and drags to select data in a spreadsheet about brokerage fees.
    - The agent saves the compiled fee structure comparison to a file named 'fees_comparison.xlsx'.
    - The user opens a new tab and searches for 'user satisfaction reviews Vanguard
      Reddit'.
    - The agent converts text from an image of handwritten notes into a digital format.
    - The agent summarizes content from a financial news article about green technology
      investments.
    - The user opens their email to cross-reference a report from a colleague.
    - The agent compiles user satisfaction data into a bar chart.
    - The user types 'green tech investment returns' in the search bar and clicks
      on the top result.
    - The user clicks back to the main screen on their spreadsheet software.
    - The agent attempts to read text from a low-quality image and returns an error
      message.
    - The user types 'cmd+w' to close a financial analysis report tab.
    - The agent extracts table data from an online brokerage firm's fee page.
    - The user uses 'cmd+c' to copy data from an Excel sheet to a Word document.
    - The agent generates a summary of investment options from the gathered data.
    - The user clicks through multiple tabs swiftly to compare user review scores.
    - The agent saves a summarized version of user reviews to 'user_reviews_summary.txt'.
    - The user opens their web browser and types 'current interest rates for online
      brokerage accounts'.
    - The agent converts data from a pie chart image into structured text format.
    - The user types 'cmd+s' to save their current progress in the report.
    - The agent reads and extracts relevant information from a financial forum post.
    - The user interacts with the online brokerage calculator tool to simulate potential
      returns.
    - The agent detects and highlights inconsistencies in user satisfaction ratings.
    - The user pastes copied content into a new email to send to their client.
    - The agent summarizes fee structure findings that include brokerage account maintenance
      costs.
    - The user clicks multiple times within the spreadsheet to refine the formula.
    - The agent automatically retrieves real-time market data for an ongoing analysis.
    - The user reopens the browser tab where they were reading about Charles Schwab
      investment options.
    - The agent extracts important points from an investment return projection PDF.
    - The user schedules a reminder to follow up on the brokerage firms' performance
      metrics.
    - The agent maps out the data trends from three major brokerage firms.
    - The user clicks 'save as' to create a new version of the comparative analysis
      report.
    - The agent fails to connect to an online data source and logs the issue.
    - The user clicks the 'insert chart' button in the spreadsheet software.
    - The agent reads a financial blog post and extracts relevant quotes.
    - The user interacts with an online forum to inquire about sustainable investment
      experiences.
    - The user moves the mouse and clicks within their notes application.
    - The agent summarizes the client's feedback from an email thread.
    - The user presses 'cmd+p' to print a draft of the report.
    theme: Financial Research and Analysis
  user:
    description: Greg is a 34-year-old mid-level financial analyst with expertise
      in investment strategies and portfolio management. He works from his home office
      in Manhattan, focusing on sustainable investing and using technology-driven
      solutions to streamline his workflow. Greg is preparing a detailed report for
      a client meeting, synthesizing data from various sources to provide comprehensive
      insights.
    goal: Research and compare the investment options, fees, and user satisfaction
      of three major online brokerage firms and write a detailed report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> dict'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> bool'
    - 'browser.search(query: str) -> list[dict]'
    - 'text.generate(prompt: str) -> str'
    - 'text.summarize(content: str) -> str'
    - 'data.extract_reviews(url: str) -> list[dict]'
    - 'data.extract_ingredients(content: str) -> list[str]'
    - 'data.analyze_sentiment(reviews: list[dict]) -> dict'
    - 'image.recognize_text(image_path: str) -> str'
    - 'image.analyze_image(image_path: str) -> dict'
    - 'task.compare_products(product_list: list[dict]) -> dict'
    description: Emma Lawson, a freelance beauty blogger, is conducting research on
      three leading skincare products for acne treatment. She is working from her
      home office, utilizing various digital tools to gather and analyze data for
      her blog and social media content.
    entities:
    - Laptop
    - Camera and Tripod
    - Notepad and Pen
    - Skincare Products
    - Ring Light
    - Phone
    events_example:
    - The user performs a web search for 'best acne treatment products 2023' using
      the web browser and hits 'Enter'.
    - The agent opens the browser and navigates to a page listing scientific articles
      about skincare.
    - The user clicks through multiple customer reviews on an e-commerce site to gather
      data about acne treatments.
    - The agent extracts and summarizes key ingredients from the product descriptions
      on a skincare website.
    - The user accesses a detailed PDF research paper about benzoyl peroxide and salicylic
      acid.
    - The agent identifies the most frequently mentioned side effects in a series
      of user reviews about a skincare product.
    - The user types 'current trends in acne treatment' into a search engine and begins
      scrolling through the results.
    - The agent generates a textual summary of a long blog post discussing the effectiveness
      of popular acne treatments.
    - The user interacts with a data visualization dashboard, analyzing user ratings
      for various acne products.
    - The agent attempts to open a YouTube video tutorial on acne treatment but encounters
      an error page.
    - The user copies text from an article detailing the pros and cons of using sulfur
      in skincare routines.
    - The agent aggregates user reviews from multiple platforms and highlights common
      themes.
    - The user utilizes 'ctrl+c' to copy an ingredient list from a skincare product's
      official website for further analysis.
    - The agent opens a new tab and searches for competitor products to benchmark
      against.
    - The user enters a command on the terminal to organize research notes into specific
      folders.
    - The agent saves an image from an e-commerce site showing detailed product descriptions
      and ingredients.
    - The user checks the latest updates on a skincare influencer's Instagram page
      for new product recommendations.
    - The agent analyzes sentiment data from skincare product reviews to identify
      trends in consumer feedback.
    - The user opens a detailed comparison chart made in Excel to analyze the effectiveness
      of different acne treatments.
    theme: Freelance Beauty Blogger Research
  user:
    description: Emma Lawson is a 29-year-old freelance beauty blogger with intermediate
      expertise in skincare. She prefers natural and organic products and follows
      popular skincare influencers for tips and reviews. Emma is working from her
      home office, focusing on creating engaging content for her blog and social media
      platforms.
    goal: Research and write a detailed blog post comparing three leading skincare
      products for acne treatment.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> dict'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> bool'
    - 'browser.open(url: str) -> bool'
    - 'browser.search(query: str) -> list[dict]'
    - 'text.generate(prompt: str) -> str'
    - 'text.summarize(content: str) -> str'
    - 'data.extract_reviews(url: str) -> list[dict]'
    - 'data.extract_ingredients(content: str) -> list[str]'
    - 'data.analyze_sentiment(reviews: list[dict]) -> dict'
    - 'image.recognize_text(image_path: str) -> str'
    - 'image.analyze_image(image_path: str) -> dict'
    - 'task.compare_products(product_list: list[dict]) -> dict'
    description: Dr. Michael Chen, a dermatologist and university professor, is conducting
      a comprehensive literature review on acne treatment products. He is working
      from the university library, preparing a lecture for his students and writing
      a peer-reviewed article.
    entities:
    - Desktop Computer
    - Medical Textbooks and Journals
    - Microscope
    - Notebook or Digital Tablet
    - Projector and Screen
    - White Coat and Stethoscope
    events_example:
    - The user performs a web search for 'best acne treatment products 2023' using
      the web browser and hits 'Enter'.
    - The agent opens the browser and navigates to a page listing scientific articles
      about skincare.
    - The user clicks through multiple customer reviews on an e-commerce site to gather
      data about acne treatments.
    - The agent extracts and summarizes key ingredients from the product descriptions
      on a skincare website.
    - The user accesses a detailed PDF research paper about benzoyl peroxide and salicylic
      acid.
    - The agent identifies the most frequently mentioned side effects in a series
      of user reviews about a skincare product.
    - The user types 'current trends in acne treatment' into a search engine and begins
      scrolling through the results.
    - The agent generates a textual summary of a long blog post discussing the effectiveness
      of popular acne treatments.
    - The user interacts with a data visualization dashboard, analyzing user ratings
      for various acne products.
    - The agent attempts to open a YouTube video tutorial on acne treatment but encounters
      an error page.
    - The user copies text from an article detailing the pros and cons of using sulfur
      in skincare routines.
    - The agent aggregates user reviews from multiple platforms and highlights common
      themes.
    - The user utilizes 'ctrl+c' to copy an ingredient list from a skincare product's
      official website for further analysis.
    - The agent opens a new tab and searches for competitor products to benchmark
      against.
    - The user enters a command on the terminal to organize research notes into specific
      folders.
    - The agent saves an image from an e-commerce site showing detailed product descriptions
      and ingredients.
    - The user checks the latest updates on a skincare influencer's Instagram page
      for new product recommendations.
    - The agent analyzes sentiment data from skincare product reviews to identify
      trends in consumer feedback.
    - The user opens a detailed comparison chart made in Excel to analyze the effectiveness
      of different acne treatments.
    theme: Dermatologist Academic Research
  user:
    description: Dr. Michael Chen is a 45-year-old dermatologist and university professor
      with advanced expertise in dermatology. He is conducting research to prepare
      a lecture for his students and write a peer-reviewed article. Dr. Chen is working
      from the university library, utilizing various academic resources and digital
      tools.
    goal: Conduct a comprehensive literature review of clinical trials related to
      acne treatment products.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_check_status()
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list(directory_path)
    - file_delete(file_path)
    - browser_open(url)
    - browser_fill_form(url, form_data)
    - browser_scrape(url, element_selector)
    - browser_click_element(url, element_selector)
    - image_open(image_path)
    - image_detect_text(image_data)
    - image_modify(image_data, modifications)
    - image_save(image_data, image_path)
    description: Alex Gray, a graphic design student, is trying to install Adobe Photoshop
      from the school's software center in his dorm room. The room is cluttered with
      art supplies and a MacBook Pro on the desk.
    entities:
    - MacBook Pro
    - Adobe Creative Cloud
    - Wacom Drawing Tablet
    - Internet Connection
    - Software Installation Instructions
    events_example:
    - The agent opens the browser and searches for tutorials for Photoshop.
    - The agent opens the file `old_project.psd` and checks for any compatibility
      issues.
    - The agent attempts to install MATLAB using the terminal.
    - The user receives a notification from the 'Dropbox' app, reminding them to back
      up their project files.
    - The user opens the 'Revit' application and loads a new project file.
    - The agent reads received emails and schedules a meeting for the user with the
      client.
    - The user copies text from an online forum about AutoCAD add-ons using `cmd+c`.
    - The agent opens a web page and fills out a form for software license activation.
    - The user scrolls and types 'Photoshop tutorial brushes' in the search bar.
    - The user receives a notification from 'Google Calendar' reminding them of a
      pending design review meeting.
    - The agent lists all files in the directory `/home/user/AutoCAD_projects`.
    - The user opens the 'Preferences' menu in MATLAB but takes no further actions.
    - The agent detects and reads text from an image of handwritten project notes.
    - The user clicks on a search result about advanced MATLAB scripting techniques.
    - The user receives a notification from the 'Slack' app about a new message from
      the design team.
    - The agent deletes the temporary file `temp_install_log.txt`.
    - The user receives a notification from the 'YouTube' web application, indicating
      a new video uploaded by 'Graphic Design Online'.
    - The agent attempts to connect and sync with a cloud storage service.
    - The user scrolls through a list of plugins available for Revit.
    - The agent opens `settings.json` and modifies preferences for the Java IDE.
    - The user receives an email notification from Outlook titled 'Project Collaboration
      Request from Emily Chen'.
    - The agent scrapes web page titles from a 3D printing tutorial site.
    - The user opens a new tab in the browser; the title of the page is 'New Tab'.
    - The agent saves modified content into a new file `new_template.revit`.
    - The user inputs `cmd+option+esc` to force quit a non-responsive application.
    theme: Graphic Design Software Installation
  user:
    description: Alex Gray, a 21-year-old graphic design student, is working on a
      digital art project and needs to install Photoshop on his MacBook Pro. He has
      intermediate skills in graphic design and basic programming knowledge.
    goal: Install Adobe Photoshop from the school's software center.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_check_status()
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list(directory_path)
    - file_delete(file_path)
    - browser_open(url)
    - browser_fill_form(url, form_data)
    - browser_scrape(url, element_selector)
    - browser_click_element(url, element_selector)
    - image_open(image_path)
    - image_detect_text(image_data)
    - image_modify(image_data, modifications)
    - image_save(image_data, image_path)
    description: Jordan Lee, an engineering graduate student, is setting up AutoCAD
      on his high-performance laptop in his apartment. The room is organized with
      engineering books and a 3D printer on the side.
    entities:
    - High-Performance Laptop
    - School's 3D Printer
    - External Hard Drive
    - Online Forums and Community Resources
    - Email Communication
    events_example:
    - The agent opens the browser and searches for tutorials for Photoshop.
    - The agent opens the file `old_project.psd` and checks for any compatibility
      issues.
    - The agent attempts to install MATLAB using the terminal.
    - The user receives a notification from the 'Dropbox' app, reminding them to back
      up their project files.
    - The user opens the 'Revit' application and loads a new project file.
    - The agent reads received emails and schedules a meeting for the user with the
      client.
    - The user copies text from an online forum about AutoCAD add-ons using `cmd+c`.
    - The agent opens a web page and fills out a form for software license activation.
    - The user scrolls and types 'Photoshop tutorial brushes' in the search bar.
    - The user receives a notification from 'Google Calendar' reminding them of a
      pending design review meeting.
    - The agent lists all files in the directory `/home/user/AutoCAD_projects`.
    - The user opens the 'Preferences' menu in MATLAB but takes no further actions.
    - The agent detects and reads text from an image of handwritten project notes.
    - The user clicks on a search result about advanced MATLAB scripting techniques.
    - The user receives a notification from the 'Slack' app about a new message from
      the design team.
    - The agent deletes the temporary file `temp_install_log.txt`.
    - The user receives a notification from the 'YouTube' web application, indicating
      a new video uploaded by 'Graphic Design Online'.
    - The agent attempts to connect and sync with a cloud storage service.
    - The user scrolls through a list of plugins available for Revit.
    - The agent opens `settings.json` and modifies preferences for the Java IDE.
    - The user receives an email notification from Outlook titled 'Project Collaboration
      Request from Emily Chen'.
    - The agent scrapes web page titles from a 3D printing tutorial site.
    - The user opens a new tab in the browser; the title of the page is 'New Tab'.
    - The agent saves modified content into a new file `new_template.revit`.
    - The user inputs `cmd+option+esc` to force quit a non-responsive application.
    theme: Engineering Software Setup
  user:
    description: Jordan Lee, a 25-year-old engineering graduate student, is focusing
      on mechanical design and needs to set up AutoCAD on his high-performance laptop.
      He has advanced skills in CAD software and basic data analysis.
    goal: Install AutoCAD from the school's software repository.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_check_status()
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list(directory_path)
    - file_delete(file_path)
    - browser_open(url)
    - browser_fill_form(url, form_data)
    - browser_scrape(url, element_selector)
    - browser_click_element(url, element_selector)
    - image_open(image_path)
    - image_detect_text(image_data)
    - image_modify(image_data, modifications)
    - image_save(image_data, image_path)
    description: Emily Chen, a data scientist, is installing MATLAB on her high-performance
      desktop computer in her home office. The room is filled with research papers
      and multiple monitors.
    entities:
    - High-Performance Desktop Computer
    - MATLAB Toolboxes
    - Datasets
    - Academic Research Papers
    - Cloud Storage Services
    events_example:
    - The agent opens the browser and searches for tutorials for Photoshop.
    - The agent opens the file `old_project.psd` and checks for any compatibility
      issues.
    - The agent attempts to install MATLAB using the terminal.
    - The user receives a notification from the 'Dropbox' app, reminding them to back
      up their project files.
    - The user opens the 'Revit' application and loads a new project file.
    - The agent reads received emails and schedules a meeting for the user with the
      client.
    - The user copies text from an online forum about AutoCAD add-ons using `cmd+c`.
    - The agent opens a web page and fills out a form for software license activation.
    - The user scrolls and types 'Photoshop tutorial brushes' in the search bar.
    - The user receives a notification from 'Google Calendar' reminding them of a
      pending design review meeting.
    - The agent lists all files in the directory `/home/user/AutoCAD_projects`.
    - The user opens the 'Preferences' menu in MATLAB but takes no further actions.
    - The agent detects and reads text from an image of handwritten project notes.
    - The user clicks on a search result about advanced MATLAB scripting techniques.
    - The user receives a notification from the 'Slack' app about a new message from
      the design team.
    - The agent deletes the temporary file `temp_install_log.txt`.
    - The user receives a notification from the 'YouTube' web application, indicating
      a new video uploaded by 'Graphic Design Online'.
    - The agent attempts to connect and sync with a cloud storage service.
    - The user scrolls through a list of plugins available for Revit.
    - The agent opens `settings.json` and modifies preferences for the Java IDE.
    - The user receives an email notification from Outlook titled 'Project Collaboration
      Request from Emily Chen'.
    - The agent scrapes web page titles from a 3D printing tutorial site.
    - The user opens a new tab in the browser; the title of the page is 'New Tab'.
    - The agent saves modified content into a new file `new_template.revit`.
    - The user inputs `cmd+option+esc` to force quit a non-responsive application.
    theme: Data Analysis Software Installation
  user:
    description: Emily Chen, a 29-year-old data scientist, is setting up MATLAB for
      her data analysis workflows. She has advanced skills in data analysis, proficient
      in Python and MATLAB, and is knowledgeable in statistical modeling.
    goal: Install MATLAB from the school's software center.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_check_status()
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list(directory_path)
    - file_delete(file_path)
    - browser_open(url)
    - browser_fill_form(url, form_data)
    - browser_scrape(url, element_selector)
    - browser_click_element(url, element_selector)
    - image_open(image_path)
    - image_detect_text(image_data)
    - image_modify(image_data, modifications)
    - image_save(image_data, image_path)
    description: Kevin Thompson, a high school computer science teacher, is installing
      a Java IDE on the classroom desktop computer. The classroom is equipped with
      a projector and smartboard for teaching.
    entities:
    - Classroom Desktop Computer
    - "School\u2019s Learning Management System (LMS)"
    - Projector and Smartboard
    - Java Programming Textbooks
    - Student Feedback
    events_example:
    - The agent opens the browser and searches for tutorials for Photoshop.
    - The agent opens the file `old_project.psd` and checks for any compatibility
      issues.
    - The agent attempts to install MATLAB using the terminal.
    - The user receives a notification from the 'Dropbox' app, reminding them to back
      up their project files.
    - The user opens the 'Revit' application and loads a new project file.
    - The agent reads received emails and schedules a meeting for the user with the
      client.
    - The user copies text from an online forum about AutoCAD add-ons using `cmd+c`.
    - The agent opens a web page and fills out a form for software license activation.
    - The user scrolls and types 'Photoshop tutorial brushes' in the search bar.
    - The user receives a notification from 'Google Calendar' reminding them of a
      pending design review meeting.
    - The agent lists all files in the directory `/home/user/AutoCAD_projects`.
    - The user opens the 'Preferences' menu in MATLAB but takes no further actions.
    - The agent detects and reads text from an image of handwritten project notes.
    - The user clicks on a search result about advanced MATLAB scripting techniques.
    - The user receives a notification from the 'Slack' app about a new message from
      the design team.
    - The agent deletes the temporary file `temp_install_log.txt`.
    - The user receives a notification from the 'YouTube' web application, indicating
      a new video uploaded by 'Graphic Design Online'.
    - The agent attempts to connect and sync with a cloud storage service.
    - The user scrolls through a list of plugins available for Revit.
    - The agent opens `settings.json` and modifies preferences for the Java IDE.
    - The user receives an email notification from Outlook titled 'Project Collaboration
      Request from Emily Chen'.
    - The agent scrapes web page titles from a 3D printing tutorial site.
    - The user opens a new tab in the browser; the title of the page is 'New Tab'.
    - The agent saves modified content into a new file `new_template.revit`.
    - The user inputs `cmd+option+esc` to force quit a non-responsive application.
    theme: Educational Software Setup
  user:
    description: Kevin Thompson, a 32-year-old high school computer science teacher,
      is setting up a Java IDE for teaching purposes. He has intermediate programming
      skills and is familiar with multiple educational software.
    goal: Install a Java IDE from the school's software center.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_check_status()
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list(directory_path)
    - file_delete(file_path)
    - browser_open(url)
    - browser_fill_form(url, form_data)
    - browser_scrape(url, element_selector)
    - browser_click_element(url, element_selector)
    - image_open(image_path)
    - image_detect_text(image_data)
    - image_modify(image_data, modifications)
    - image_save(image_data, image_path)
    description: Maria Lopez, an architect, is installing Revit on her desktop workstation
      in her office. The room is filled with architectural blueprints and construction
      material databases.
    entities:
    - Desktop Workstation
    - Revit Families and Templates
    - Architecture Blueprints
    - Construction Material Databases
    - Client Feedback and Requirements
    events_example:
    - The agent opens the browser and searches for tutorials for Photoshop.
    - The agent opens the file `old_project.psd` and checks for any compatibility
      issues.
    - The agent attempts to install MATLAB using the terminal.
    - The user receives a notification from the 'Dropbox' app, reminding them to back
      up their project files.
    - The user opens the 'Revit' application and loads a new project file.
    - The agent reads received emails and schedules a meeting for the user with the
      client.
    - The user copies text from an online forum about AutoCAD add-ons using `cmd+c`.
    - The agent opens a web page and fills out a form for software license activation.
    - The user scrolls and types 'Photoshop tutorial brushes' in the search bar.
    - The user receives a notification from 'Google Calendar' reminding them of a
      pending design review meeting.
    - The agent lists all files in the directory `/home/user/AutoCAD_projects`.
    - The user opens the 'Preferences' menu in MATLAB but takes no further actions.
    - The agent detects and reads text from an image of handwritten project notes.
    - The user clicks on a search result about advanced MATLAB scripting techniques.
    - The user receives a notification from the 'Slack' app about a new message from
      the design team.
    - The agent deletes the temporary file `temp_install_log.txt`.
    - The user receives a notification from the 'YouTube' web application, indicating
      a new video uploaded by 'Graphic Design Online'.
    - The agent attempts to connect and sync with a cloud storage service.
    - The user scrolls through a list of plugins available for Revit.
    - The agent opens `settings.json` and modifies preferences for the Java IDE.
    - The user receives an email notification from Outlook titled 'Project Collaboration
      Request from Emily Chen'.
    - The agent scrapes web page titles from a 3D printing tutorial site.
    - The user opens a new tab in the browser; the title of the page is 'New Tab'.
    - The agent saves modified content into a new file `new_template.revit`.
    - The user inputs `cmd+option+esc` to force quit a non-responsive application.
    theme: Architectural Design Software Setup
  user:
    description: Maria Lopez, a 35-year-old architect, is setting up Revit for her
      architectural design projects. She has advanced skills in architectural design
      software and is proficient with graphic rendering tools.
    goal: Install Revit from the school's software center.
- environment:
    agent_ops:
    - action: text.read
      description: Reads the provided document or text, extracts useful information,
        and converts it into a readable text format for further processing.
      parameters:
      - document
      return_values:
      - Extracted text
    - action: image.recognize
      description: Processes the image and extracts relevant information, such as
        text from labels or visually identifiable features of products.
      parameters:
      - image_path
      return_values:
      - Recognized objects and text within the image
    - action: text.generate
      description: Generates coherent and contextually accurate text to assist the
        user, such as instructions or email drafts.
      parameters:
      - prompt
      return_values:
      - Generated text
    - action: terminal.run
      description: Operates the terminal to execute system-level commands, such as
        installing software or navigating directories.
      parameters:
      - command
      return_values:
      - Output from the terminal
    - action: file.open
      description: Opens the specified file and reads its content for further actions,
        such as viewing return instructions or reading a saved chat with customer
        support.
      parameters:
      - file_path
      return_values:
      - Content of the file
    - action: file.save
      description: Saves the given content to the specified file path, useful for
        writing drafts or saving return receipts.
      parameters:
      - file_path
      - content
      return_values: []
    - action: browser.open
      description: Opens a web browser and navigates to the specified URL, allowing
        the user to access retailer websites or return policy pages.
      parameters:
      - url
      return_values: []
    - action: browser.fill_form
      description: Navigates to the specified URL, locates the form on the webpage,
        and fills it out using the provided details, such as entering a return request
        or filling out customer service forms.
      parameters:
      - url
      - form_details
      return_values: []
    - action: browser.click_element
      description: Navigates to the specified webpage and clicks on the identified
        element, such as a submit button or link.
      parameters:
      - url
      - element_identifier
      return_values: []
    - action: email.compose
      description: Composes an email with the given recipient, subject, and body,
        useful for contacting customer support or following up on return status.
      parameters:
      - to
      - subject
      - body
      return_values:
      - Drafted email content
    - action: email.send
      description: Sends an email to the specified recipient, ensuring communication
        with customer support is timely and efficient.
      parameters:
      - to
      - subject
      - body
      return_values:
      - Confirmation message indicating the email was sent
    - action: notification.send_notification
      description: "Sends a notification to the user\u2019s device, reminding them\
        \ of important tasks such as the return shipment deadline or confirmation\
        \ of package receipt by the retailer."
      parameters:
      - message
      return_values: []
    description: "The user is at their home office, a well-organized space with dual\
      \ monitors, a desk cluttered with tech gadgets, and a few tech-related magazines.\
      \ It is mid-afternoon on a Tuesday, and they have a cup of coffee beside them.\
      \ The user is dealing with a recent purchase of a smart home device that arrived\
      \ with a defective component. They\u2019ve already contacted customer service\
      \ and received instructions to return the item. They need to initiate the return\
      \ process and ensure the exchange is handled smoothly."
    entities:
    - Defective Product
    - Packaging Materials
    - Return Label
    - "Retailer\u2019s Website/App"
    - Tracking Number
    - Customer Service Representatives
    - Courier/Shipping Service
    - Retail Store or Drop-Off Location
    - Home Office or Workspace
    - Email/Notification System
    - "Retailer\u2019s Return Policy"
    - Product Reviews and Ratings
    - "User\u2019s Own Schedule"
    - "Retailer\u2019s Reputation"
    events_example:
    - The user clicks on a link in an email that leads to the retailer's return policy
      page.
    - "The agent opens the browser and navigates to the shipping company\u2019s website\
      \ to check the return tracking status."
    - The agent reads a PDF document containing the retailer's packaging requirements
      and extracts relevant instructions.
    - "The user inputs their return order number on the retailer\u2019s return request\
      \ form on a web page."
    - The agent identifies and highlights the return deadline date from the retailer's
      confirmation email.
    - The user examines several Google search results for tips on packaging electronics
      safely for return.
    - The agent generates a text message to the courier service to arrange a package
      pickup from the user's home.
    - The agent assists in filling out an online form with the user's contact and
      return details on the retailer's website.
    - The user receives a desktop notification alerting them about an upcoming return
      package pickup.
    - The agent scans an image of the defective product for visible defects to attach
      with the return request.
    - The user moves the mouse to click on the option to print the shipping label
      from their email.
    - "The user clicks a button labeled \u201CSubmit\u201D on the returns portal after\
      \ entering the necessary details."
    - The agent uses OCR to identify and save the return label barcode from an uploaded
      image.
    - The user logs into the retailer's website but does not take any immediate actions
      afterward.
    - The agent opens a PDF file of the retailer's return guidelines to verify the
      steps for processing a return.
    theme: Return or Exchange Items
  user:
    description: "The user is a mid-level tech enthusiast with a solid understanding\
      \ of consumer electronics and online shopping platforms. They are comfortable\
      \ with technology but prefer straightforward solutions and clear instructions.\
      \ They value efficiency and have a preference for streamlined, no-fuss approaches.\
      \ The user favors brands known for excellent customer service and hassle-free\
      \ return policies. They also appreciate detailed product reviews and comparisons\
      \ before making purchasing decisions. The user frequently shops for gadgets\
      \ and accessories online, often exploring the latest tech innovations. They\
      \ have a habit of returning or exchanging products if they don\u2019t meet their\
      \ expectations, and they usually do this within the return window. They also\
      \ keep a close eye on their email for return confirmations and shipping updates."
    goal: Handle the return or exchange of unsatisfactory products.
- environment:
    agent_ops:
    - text.summarize(content)
    - text.translate(content, target_language)
    - text.generate_summary_with_sentiment(content)
    - text.compare(specs_list_a, specs_list_b)
    - image.analyze_review_charts(chart_images)
    - image.extract_text(image_file)
    - browser.open(url)
    - browser.search(query, target_sites)
    - browser.get_price_comparison(product_name, e_commerce_sites)
    - data.visualize_comparison(data_dict)
    - data.create_spreadsheet_comparison(data_rows, headers, file_path)
    description: Emily, a moderately tech-savvy marketing manager, is at her home
      office on a Saturday afternoon. She is comparing prices and user reviews on
      different e-commerce platforms to purchase a new laptop. Her workspace is cozy
      with a large desktop monitor and personal touches like family photos and green
      plants.
    entities:
    - Dell XPS 13
    - MacBook Air M1
    - HP Spectre x360
    - Google Sheets
    - Amazon
    - Best Buy
    - Newegg
    - TechRadar
    - CNET
    - Honey
    - RetailMeNot
    - The Verge
    - Marques Brownlee (YouTuber)
    events_example:
    - The agent opens the browser and searches for 'best budget laptops 2023' on Amazon.
    - The user receives a notification from the 'YouTube' app, a new video is uploaded
      by 'Tech Guru' about laptop reviews.
    - The agent reads specification pages and summarizes graphics card performance
      for gaming monitors.
    - The user clicks on a Yahoo Finance news article regarding tech stocks.
    - The agent attempts to apply a promo code from RetailMeNot but finds it expired.
    - The user receives an email notification from Best Buy about a flash sale on
      monitors.
    - The agent opens the file `laptop_comparison.xlsx` to check price differences.
    - The agent searches for educational tablet reviews on TechRadar and summarizes
      pros and cons.
    - The user receives a notification from the Calendar app about a planned virtual
      meetup tonight.
    - The user clicks and bookmarks a page about MacBook Air M1 reviews from CNET.
    - The agent generates a price comparison chart and emails it to the user.
    - The user opens a new tab and types 'gaming setup ideas 2023'.
    - The agent extracts text from an infographic review and stores it in a Google
      Doc.
    - The user receives a software update notification for their spreadsheet application.
    - The agent finds a discrepancy in user ratings across different e-commerce platforms
      for a specific laptop.
    - The user scrolls through recent posts in the 'Reddit' app about build-your-own
      PC setups.
    - The agent fails to locate recent benchmarks for the newest processor on UserBenchmark.
    - The user receives a reminder from the 'To-Do' app to finalize their online shopping
      cart.
    - The user switches back to a tab containing an Amazon listing for a Samsung Galaxy
      Tab A Kids.
    - The agent visualizes a trend comparison between two laptops' battery life in
      a bar chart.
    theme: Online Shopping for Electronics
  user:
    description: Emily, 34, is a marketing manager who is moderately tech-savvy. She
      prefers concise, unbiased information and values both customer feedback and
      expert reviews. She enjoys keeping up with the latest tech trends and systematically
      lists features she wants in a product.
    goal: Compare prices and user reviews on different e-commerce platforms and purchase
      a new laptop.
- environment:
    agent_ops:
    - text.summarize(content)
    - text.translate(content, target_language)
    - text.generate_summary_with_sentiment(content)
    - text.compare(specs_list_a, specs_list_b)
    - image.analyze_review_charts(chart_images)
    - image.extract_text(image_file)
    - browser.open(url)
    - browser.search(query, target_sites)
    - browser.get_price_comparison(product_name, e_commerce_sites)
    - data.visualize_comparison(data_dict)
    - data.create_spreadsheet_comparison(data_rows, headers, file_path)
    description: John, a highly tech-savvy software developer, is at his apartment
      on a Sunday morning. He is researching and comparing gaming monitors to find
      the best option for his gaming setup. His workspace is filled with high-end
      tech gadgets and gaming peripherals.
    entities:
    - ASUS ROG Swift
    - Acer Predator
    - LG UltraGear
    - UserBenchmark
    - PassMark
    - Reddit (r/Monitors)
    - Twitch
    - CamelCamelCamel
    - Keepa
    - Linus Tech Tips
    - Gamers Nexus
    events_example:
    - The agent opens the browser and searches for 'best budget laptops 2023' on Amazon.
    - The user receives a notification from the 'YouTube' app, a new video is uploaded
      by 'Tech Guru' about laptop reviews.
    - The agent reads specification pages and summarizes graphics card performance
      for gaming monitors.
    - The user clicks on a Yahoo Finance news article regarding tech stocks.
    - The agent attempts to apply a promo code from RetailMeNot but finds it expired.
    - The user receives an email notification from Best Buy about a flash sale on
      monitors.
    - The agent opens the file `laptop_comparison.xlsx` to check price differences.
    - The agent searches for educational tablet reviews on TechRadar and summarizes
      pros and cons.
    - The user receives a notification from the Calendar app about a planned virtual
      meetup tonight.
    - The user clicks and bookmarks a page about MacBook Air M1 reviews from CNET.
    - The agent generates a price comparison chart and emails it to the user.
    - The user opens a new tab and types 'gaming setup ideas 2023'.
    - The agent extracts text from an infographic review and stores it in a Google
      Doc.
    - The user receives a software update notification for their spreadsheet application.
    - The agent finds a discrepancy in user ratings across different e-commerce platforms
      for a specific laptop.
    - The user scrolls through recent posts in the 'Reddit' app about build-your-own
      PC setups.
    - The agent fails to locate recent benchmarks for the newest processor on UserBenchmark.
    - The user receives a reminder from the 'To-Do' app to finalize their online shopping
      cart.
    - The user switches back to a tab containing an Amazon listing for a Samsung Galaxy
      Tab A Kids.
    - The agent visualizes a trend comparison between two laptops' battery life in
      a bar chart.
    theme: Online Shopping for Gaming Monitors
  user:
    description: John, 28, is a software developer who is highly tech-savvy. He is
      knowledgeable about advanced tech specifications and experienced with coding
      and hardware setup. He values detailed reviews, technical specifications, and
      performance benchmarks.
    goal: Research and compare gaming monitors to find the best option for his gaming
      setup.
- environment:
    agent_ops:
    - text.summarize(content)
    - text.translate(content, target_language)
    - text.generate_summary_with_sentiment(content)
    - text.compare(specs_list_a, specs_list_b)
    - image.analyze_review_charts(chart_images)
    - image.extract_text(image_file)
    - browser.open(url)
    - browser.search(query, target_sites)
    - browser.get_price_comparison(product_name, e_commerce_sites)
    - data.visualize_comparison(data_dict)
    - data.create_spreadsheet_comparison(data_rows, headers, file_path)
    description: Sarah, a stay-at-home mom and part-time freelance writer, is at her
      living room on a weekday morning. She is researching and comparing educational
      tablets for her children. Her living room is filled with children's toys and
      books, creating a lively and family-oriented atmosphere.
    entities:
    - Amazon Fire Kids Edition
    - Samsung Galaxy Tab A Kids
    - Apple iPad Mini
    - Common Sense Media
    - What to Expect
    - BabyCenter
    - Mumsnet
    - Rakuten
    - Groupon
    - Scary Mommy
    - The Bump
    events_example:
    - The agent opens the browser and searches for 'best budget laptops 2023' on Amazon.
    - The user receives a notification from the 'YouTube' app, a new video is uploaded
      by 'Tech Guru' about laptop reviews.
    - The agent reads specification pages and summarizes graphics card performance
      for gaming monitors.
    - The user clicks on a Yahoo Finance news article regarding tech stocks.
    - The agent attempts to apply a promo code from RetailMeNot but finds it expired.
    - The user receives an email notification from Best Buy about a flash sale on
      monitors.
    - The agent opens the file `laptop_comparison.xlsx` to check price differences.
    - The agent searches for educational tablet reviews on TechRadar and summarizes
      pros and cons.
    - The user receives a notification from the Calendar app about a planned virtual
      meetup tonight.
    - The user clicks and bookmarks a page about MacBook Air M1 reviews from CNET.
    - The agent generates a price comparison chart and emails it to the user.
    - The user opens a new tab and types 'gaming setup ideas 2023'.
    - The agent extracts text from an infographic review and stores it in a Google
      Doc.
    - The user receives a software update notification for their spreadsheet application.
    - The agent finds a discrepancy in user ratings across different e-commerce platforms
      for a specific laptop.
    - The user scrolls through recent posts in the 'Reddit' app about build-your-own
      PC setups.
    - The agent fails to locate recent benchmarks for the newest processor on UserBenchmark.
    - The user receives a reminder from the 'To-Do' app to finalize their online shopping
      cart.
    - The user switches back to a tab containing an Amazon listing for a Samsung Galaxy
      Tab A Kids.
    - The agent visualizes a trend comparison between two laptops' battery life in
      a bar chart.
    theme: Online Shopping for Educational Tablets
  user:
    description: Sarah, 45, is a stay-at-home mom and part-time freelance writer with
      basic tech knowledge. She is good at managing household purchases and adept
      at finding deals online. She values user-friendly products, good customer service,
      and warranty and return policies.
    goal: Research and compare educational tablets for her children.
- environment:
    agent_ops:
    - text.summarize(content)
    - text.translate(content, target_language)
    - text.generate_summary_with_sentiment(content)
    - text.compare(specs_list_a, specs_list_b)
    - image.analyze_review_charts(chart_images)
    - image.extract_text(image_file)
    - browser.open(url)
    - browser.search(query, target_sites)
    - browser.get_price_comparison(product_name, e_commerce_sites)
    - data.visualize_comparison(data_dict)
    - data.create_spreadsheet_comparison(data_rows, headers, file_path)
    description: Mike, a financial analyst with basic tech knowledge, is at his home
      office on a weekday evening. He is researching and comparing budget-friendly
      laptops for work use. His workspace is organized with financial reports and
      a dual-monitor setup.
    entities:
    - Lenovo IdeaPad 3
    - Acer Aspire 5
    - ASUS VivoBook
    - Microsoft Excel
    - Quicken
    - Google Sheets
    - Excel
    - PriceGrabber
    - SlickDeals
    - Bogleheads
    - Reddit (r/Frugal)
    events_example:
    - The agent opens the browser and searches for 'best budget laptops 2023' on Amazon.
    - The user receives a notification from the 'YouTube' app, a new video is uploaded
      by 'Tech Guru' about laptop reviews.
    - The agent reads specification pages and summarizes graphics card performance
      for gaming monitors.
    - The user clicks on a Yahoo Finance news article regarding tech stocks.
    - The agent attempts to apply a promo code from RetailMeNot but finds it expired.
    - The user receives an email notification from Best Buy about a flash sale on
      monitors.
    - The agent opens the file `laptop_comparison.xlsx` to check price differences.
    - The agent searches for educational tablet reviews on TechRadar and summarizes
      pros and cons.
    - The user receives a notification from the Calendar app about a planned virtual
      meetup tonight.
    - The user clicks and bookmarks a page about MacBook Air M1 reviews from CNET.
    - The agent generates a price comparison chart and emails it to the user.
    - The user opens a new tab and types 'gaming setup ideas 2023'.
    - The agent extracts text from an infographic review and stores it in a Google
      Doc.
    - The user receives a software update notification for their spreadsheet application.
    - The agent finds a discrepancy in user ratings across different e-commerce platforms
      for a specific laptop.
    - The user scrolls through recent posts in the 'Reddit' app about build-your-own
      PC setups.
    - The agent fails to locate recent benchmarks for the newest processor on UserBenchmark.
    - The user receives a reminder from the 'To-Do' app to finalize their online shopping
      cart.
    - The user switches back to a tab containing an Amazon listing for a Samsung Galaxy
      Tab A Kids.
    - The agent visualizes a trend comparison between two laptops' battery life in
      a bar chart.
    theme: Online Shopping for Budget Laptops
  user:
    description: Mike, 40, is a financial analyst with basic tech knowledge. He has
      excellent analytical skills and is proficient in Excel and financial software.
      He values cost-effective solutions, reliable performance, and good warranty
      and service plans.
    goal: Research and compare budget-friendly laptops for work use.
- environment:
    agent_ops:
    - text.summarize(content)
    - text.translate(content, target_language)
    - text.generate_summary_with_sentiment(content)
    - text.compare(specs_list_a, specs_list_b)
    - image.analyze_review_charts(chart_images)
    - image.extract_text(image_file)
    - browser.open(url)
    - browser.search(query, target_sites)
    - browser.get_price_comparison(product_name, e_commerce_sites)
    - data.visualize_comparison(data_dict)
    - data.create_spreadsheet_comparison(data_rows, headers, file_path)
    description: Linda, a high school teacher with basic tech skills, is at her home
      on a Sunday afternoon. She is researching and comparing e-readers for both personal
      reading and teaching materials. Her living room is filled with books and educational
      materials, creating a scholarly atmosphere.
    entities:
    - Amazon Kindle Paperwhite
    - Barnes & Noble Nook GlowLight
    - Kobo Clara HD
    - OverDrive
    - Goodreads
    - TeachThought
    - Edutopia
    - ID.me
    - UNiDAYS
    - Cult of Pedagogy
    - EdTech Teacher
    events_example:
    - The agent opens the browser and searches for 'best budget laptops 2023' on Amazon.
    - The user receives a notification from the 'YouTube' app, a new video is uploaded
      by 'Tech Guru' about laptop reviews.
    - The agent reads specification pages and summarizes graphics card performance
      for gaming monitors.
    - The user clicks on a Yahoo Finance news article regarding tech stocks.
    - The agent attempts to apply a promo code from RetailMeNot but finds it expired.
    - The user receives an email notification from Best Buy about a flash sale on
      monitors.
    - The agent opens the file `laptop_comparison.xlsx` to check price differences.
    - The agent searches for educational tablet reviews on TechRadar and summarizes
      pros and cons.
    - The user receives a notification from the Calendar app about a planned virtual
      meetup tonight.
    - The user clicks and bookmarks a page about MacBook Air M1 reviews from CNET.
    - The agent generates a price comparison chart and emails it to the user.
    - The user opens a new tab and types 'gaming setup ideas 2023'.
    - The agent extracts text from an infographic review and stores it in a Google
      Doc.
    - The user receives a software update notification for their spreadsheet application.
    - The agent finds a discrepancy in user ratings across different e-commerce platforms
      for a specific laptop.
    - The user scrolls through recent posts in the 'Reddit' app about build-your-own
      PC setups.
    - The agent fails to locate recent benchmarks for the newest processor on UserBenchmark.
    - The user receives a reminder from the 'To-Do' app to finalize their online shopping
      cart.
    - The user switches back to a tab containing an Amazon listing for a Samsung Galaxy
      Tab A Kids.
    - The agent visualizes a trend comparison between two laptops' battery life in
      a bar chart.
    theme: Online Shopping for E-Readers
  user:
    description: Linda, 50, is a high school teacher with basic tech skills. She is
      comfortable with mainstream e-commerce platforms and good at following step-by-step
      instructions. She values simplicity, reliability, good customer support, and
      educational features.
    goal: Research and compare e-readers for both personal reading and teaching materials.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.scrape_text(url: str) -> str'
    - 'browser.download_file(url: str, file_path: str) -> bool'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.delete(file_path: str) -> bool'
    - 'terminal_run(command: str) -> str'
    - 'terminal_install_package(package_name: str) -> str'
    - 'text.summarize(content: str, max_length: int) -> str'
    - 'text.generate_report(data: dict, template: str) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.clean(dataset: str) -> str'
    - 'data.visualize(dataset: str, chart_type: str, output_path: str) -> None'
    - 'data.analyze(dataset: str, analysis_type: str) -> str'
    description: A home office environment where a marketing analyst is working on
      a detailed comparison report of three major mobile network providers. The office
      is equipped with dual monitors, a high-performance computer, and various data
      analysis tools.
    entities:
    - Laptop/Computer
    - External Hard Drive
    - Notebook and Pen
    - Printer
    - Desk Organizer
    - Data Sources
    - Software Tools
    - Document Templates
    - Team Members/Colleagues
    - Managers/Supervisors
    - Industry Trends
    - Client/Stakeholder Expectations
    - Deadlines and Time Constraints
    - Office Environment
    - Personal Preferences and Work Habits
    events_example:
    - The agent opens the browser and searches for tutorials on using Excel for data
      analysis.
    - The user scrolls through a web page containing pricing details of mobile network
      providers.
    - The agent opens an Excel file named `customer_reviews.xlsx` and begins to format
      the data.
    - The user types 'cmd+c' to copy text from a customer feedback forum.
    - The agent reads the text content from `https://www.trustpilot.com/review/mobileprovider.com`.
    - The user clicks the mouse and drags to highlight a paragraph in an online review.
    - The agent downloads a CSV file from `https://data.provider.com/pricing.csv`
      to the desktop.
    - The user switches to the browser tab showing the JD Power customer satisfaction
      ratings.
    - The agent scrapes text from the URL `https://www.jdpower.com/mobile-network-reviews`.
    - The user types 'cmdw' to close a tab and continues to scroll through another
      webpage.
    - The agent opens `cleaned_data.xlsx` to remove duplicate entries.
    - The user clicks the mouse, types 'ctrl_l', and inputs 'consumer reports mobile
      network service' in the search bar.
    - The agent generates a summary of customer service feedback from raw text data.
    - The user switches to a word processor and begins typing the introduction for
      the comparison report.
    - The agent creates a bar chart visualization from the pricing data and saves
      it as `pricing_comparison.png`.
    - The user types 'ctrl+c' to copy a chart image from a data visualization tool.
    - The agent opens the file `market_analysis.docx` and appends the latest data
      findings.
    - The user makes multiple clicks in the browser, switching between various review
      sites.
    - The agent deletes a temporary CSV file named `temp_data.csv`.
    - The user toggles between Excel and the browser to cross-reference pricing plans.
    - The agent installs the Pandas package via terminal.
    - The user types 'cmdw' to close a blank document and opens the saved project
      file.
    - The agent translates user feedback from English to Spanish.
    - The user performs multiple scroll actions on a web review page.
    - The agent visualizes the cleaned data set using a line graph in Tableau.
    - The user types 'ctrl+c' to copy the pricing table and pastes it into a new spreadsheet.
    - The agent saves the final report in the file system as `comparison_report_final.docx`.
    - The user returns to the ChatGPT tab in the web browser for additional research.
    - The agent executes the command `ls -la /data` in the terminal to list files.
    - The user inputs a series of clicks and mouse movements to format a table in
      Excel.
    - The agent queries a database to retrieve historical customer satisfaction data.
    - The user writes Markdown notes about report findings in Visual Studio Code.
    - The agent installs a data visualization library using the terminal.
    - The user makes extensive movements and scrolls in a spreadsheet application.
    - The agent analyzes the text content from user reviews for sentiment.
    - The user performs mouse interactions and types 'pricing plans' in the search
      bar.
    - The agent opens the browser and navigates to `government telecom regulations`.
    - The user clicks to expand detailed customer narratives on a review site.
    - The agent accesses the file system and opens `historical_data.xlsx` for insights.
    - The user types 'feedback trends over time' in a new web browser tab for further
      research.
    theme: Marketing Analysis
  user:
    description: Jessica Walton, a 34-year-old Marketing Analyst at a mid-sized tech
      consultancy firm, is working from her home office. She is proficient in data
      analysis and visualization tools and has a strong background in report writing.
      Her task involves gathering data from various sources, cleaning and organizing
      it, performing analysis, and drafting a comprehensive comparison report.
    goal: Analyze the customer service quality, pricing, and user reviews of three
      major mobile network providers and write a detailed comparison report.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.scrape_text(url: str) -> str'
    - 'browser.download_file(url: str, file_path: str) -> bool'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.delete(file_path: str) -> bool'
    - 'terminal_run(command: str) -> str'
    - 'terminal_install_package(package_name: str) -> str'
    - 'text.summarize(content: str, max_length: int) -> str'
    - 'text.generate_report(data: dict, template: str) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.clean(dataset: str) -> str'
    - 'data.visualize(dataset: str, chart_type: str, output_path: str) -> None'
    - 'data.analyze(dataset: str, analysis_type: str) -> str'
    description: A corporate office environment where a junior data analyst is working
      on a detailed comparison report of three major mobile network providers. The
      office is equipped with a high-performance computer, dual monitors, and various
      data analysis tools.
    entities:
    - Laptop/Computer
    - External Hard Drive
    - Notebook and Pen
    - Printer
    - Desk Organizer
    - Data Sources
    - Software Tools
    - Document Templates
    - Team Members/Colleagues
    - Managers/Supervisors
    - Industry Trends
    - Client/Stakeholder Expectations
    - Deadlines and Time Constraints
    - Office Environment
    - Personal Preferences and Work Habits
    events_example:
    - The agent opens the browser and searches for tutorials on using Excel for data
      analysis.
    - The user scrolls through a web page containing pricing details of mobile network
      providers.
    - The agent opens an Excel file named `customer_reviews.xlsx` and begins to format
      the data.
    - The user types 'cmd+c' to copy text from a customer feedback forum.
    - The agent reads the text content from `https://www.trustpilot.com/review/mobileprovider.com`.
    - The user clicks the mouse and drags to highlight a paragraph in an online review.
    - The agent downloads a CSV file from `https://data.provider.com/pricing.csv`
      to the desktop.
    - The user switches to the browser tab showing the JD Power customer satisfaction
      ratings.
    - The agent scrapes text from the URL `https://www.jdpower.com/mobile-network-reviews`.
    - The user types 'cmdw' to close a tab and continues to scroll through another
      webpage.
    - The agent opens `cleaned_data.xlsx` to remove duplicate entries.
    - The user clicks the mouse, types 'ctrl_l', and inputs 'consumer reports mobile
      network service' in the search bar.
    - The agent generates a summary of customer service feedback from raw text data.
    - The user switches to a word processor and begins typing the introduction for
      the comparison report.
    - The agent creates a bar chart visualization from the pricing data and saves
      it as `pricing_comparison.png`.
    - The user types 'ctrl+c' to copy a chart image from a data visualization tool.
    - The agent opens the file `market_analysis.docx` and appends the latest data
      findings.
    - The user makes multiple clicks in the browser, switching between various review
      sites.
    - The agent deletes a temporary CSV file named `temp_data.csv`.
    - The user toggles between Excel and the browser to cross-reference pricing plans.
    - The agent installs the Pandas package via terminal.
    - The user types 'cmdw' to close a blank document and opens the saved project
      file.
    - The agent translates user feedback from English to Spanish.
    - The user performs multiple scroll actions on a web review page.
    - The agent visualizes the cleaned data set using a line graph in Tableau.
    - The user types 'ctrl+c' to copy the pricing table and pastes it into a new spreadsheet.
    - The agent saves the final report in the file system as `comparison_report_final.docx`.
    - The user returns to the ChatGPT tab in the web browser for additional research.
    - The agent executes the command `ls -la /data` in the terminal to list files.
    - The user inputs a series of clicks and mouse movements to format a table in
      Excel.
    - The agent queries a database to retrieve historical customer satisfaction data.
    - The user writes Markdown notes about report findings in Visual Studio Code.
    - The agent installs a data visualization library using the terminal.
    - The user makes extensive movements and scrolls in a spreadsheet application.
    - The agent analyzes the text content from user reviews for sentiment.
    - The user performs mouse interactions and types 'pricing plans' in the search
      bar.
    - The agent opens the browser and navigates to `government telecom regulations`.
    - The user clicks to expand detailed customer narratives on a review site.
    - The agent accesses the file system and opens `historical_data.xlsx` for insights.
    - The user types 'feedback trends over time' in a new web browser tab for further
      research.
    theme: Financial Data Analysis
  user:
    description: David Kim, a 29-year-old Junior Data Analyst at a financial services
      company, is working from his corporate office. He is proficient in statistical
      analysis and data visualization tools and has a good understanding of market
      research techniques. His task involves gathering data from various sources,
      cleaning and organizing it, performing analysis, and drafting a comprehensive
      comparison report.
    goal: Analyze the customer service quality, pricing, and user reviews of three
      major mobile network providers and write a detailed comparison report.
- environment:
    agent_ops:
    - 'browser.open(url: str) -> None'
    - 'browser.scrape_text(url: str) -> str'
    - 'browser.download_file(url: str, file_path: str) -> bool'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'file.delete(file_path: str) -> bool'
    - 'terminal_run(command: str) -> str'
    - 'terminal_install_package(package_name: str) -> str'
    - 'text.summarize(content: str, max_length: int) -> str'
    - 'text.generate_report(data: dict, template: str) -> str'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'data.clean(dataset: str) -> str'
    - 'data.visualize(dataset: str, chart_type: str, output_path: str) -> None'
    - 'data.analyze(dataset: str, analysis_type: str) -> str'
    description: A corporate office environment where a senior market researcher is
      working on a detailed comparison report of three major mobile network providers.
      The office is equipped with a high-performance computer, dual monitors, and
      various data analysis tools.
    entities:
    - Laptop/Computer
    - External Hard Drive
    - Notebook and Pen
    - Printer
    - Desk Organizer
    - Data Sources
    - Software Tools
    - Document Templates
    - Team Members/Colleagues
    - Managers/Supervisors
    - Industry Trends
    - Client/Stakeholder Expectations
    - Deadlines and Time Constraints
    - Office Environment
    - Personal Preferences and Work Habits
    events_example:
    - The agent opens the browser and searches for tutorials on using Excel for data
      analysis.
    - The user scrolls through a web page containing pricing details of mobile network
      providers.
    - The agent opens an Excel file named `customer_reviews.xlsx` and begins to format
      the data.
    - The user types 'cmd+c' to copy text from a customer feedback forum.
    - The agent reads the text content from `https://www.trustpilot.com/review/mobileprovider.com`.
    - The user clicks the mouse and drags to highlight a paragraph in an online review.
    - The agent downloads a CSV file from `https://data.provider.com/pricing.csv`
      to the desktop.
    - The user switches to the browser tab showing the JD Power customer satisfaction
      ratings.
    - The agent scrapes text from the URL `https://www.jdpower.com/mobile-network-reviews`.
    - The user types 'cmdw' to close a tab and continues to scroll through another
      webpage.
    - The agent opens `cleaned_data.xlsx` to remove duplicate entries.
    - The user clicks the mouse, types 'ctrl_l', and inputs 'consumer reports mobile
      network service' in the search bar.
    - The agent generates a summary of customer service feedback from raw text data.
    - The user switches to a word processor and begins typing the introduction for
      the comparison report.
    - The agent creates a bar chart visualization from the pricing data and saves
      it as `pricing_comparison.png`.
    - The user types 'ctrl+c' to copy a chart image from a data visualization tool.
    - The agent opens the file `market_analysis.docx` and appends the latest data
      findings.
    - The user makes multiple clicks in the browser, switching between various review
      sites.
    - The agent deletes a temporary CSV file named `temp_data.csv`.
    - The user toggles between Excel and the browser to cross-reference pricing plans.
    - The agent installs the Pandas package via terminal.
    - The user types 'cmdw' to close a blank document and opens the saved project
      file.
    - The agent translates user feedback from English to Spanish.
    - The user performs multiple scroll actions on a web review page.
    - The agent visualizes the cleaned data set using a line graph in Tableau.
    - The user types 'ctrl+c' to copy the pricing table and pastes it into a new spreadsheet.
    - The agent saves the final report in the file system as `comparison_report_final.docx`.
    - The user returns to the ChatGPT tab in the web browser for additional research.
    - The agent executes the command `ls -la /data` in the terminal to list files.
    - The user inputs a series of clicks and mouse movements to format a table in
      Excel.
    - The agent queries a database to retrieve historical customer satisfaction data.
    - The user writes Markdown notes about report findings in Visual Studio Code.
    - The agent installs a data visualization library using the terminal.
    - The user makes extensive movements and scrolls in a spreadsheet application.
    - The agent analyzes the text content from user reviews for sentiment.
    - The user performs mouse interactions and types 'pricing plans' in the search
      bar.
    - The agent opens the browser and navigates to `government telecom regulations`.
    - The user clicks to expand detailed customer narratives on a review site.
    - The agent accesses the file system and opens `historical_data.xlsx` for insights.
    - The user types 'feedback trends over time' in a new web browser tab for further
      research.
    theme: Telecommunications Market Research
  user:
    description: Sarah Lin, a 42-year-old Senior Market Researcher at a telecommunications
      company, is working from her corporate office. She is an expert in data analysis
      and visualization tools and has extensive experience in market research methodologies.
      Her task involves gathering data from various sources, cleaning and organizing
      it, performing analysis, and drafting a comprehensive comparison report.
    goal: Analyze the customer service quality, pricing, and user reviews of three
      major mobile network providers and write a detailed comparison report.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.get_html(url: str) -> str'
    - 'data.summarize(data: str) -> str'
    - 'data.generate_chart(data: Dict[str, Any], chart_type: str) -> str'
    - 'text.generate_headline(content: str) -> str'
    - 'text.check_grammar(content: str) -> Dict[str, Any]'
    - 'text.fact_check(content: str) -> Dict[str, Any]'
    description: Alex, a technology journalist, is researching the latest trends,
      technological advancements, and user preferences in the electric scooter market
      to write a comprehensive article.
    entities:
    - Desktop Computer
    - Voice Recorder
    - Notebooks and Stationery
    - Databases and Software
    - Infographic Tools
    - Industry Experts
    - Publishers and Editors
    - Technical Forums and User Communities
    events_example:
    - The agent opens the browser and searches for the latest trends in the electric
      scooter market.
    - The user types 'rechargable battery innovations' in a new Google search tab.
    - The agent opens the file `latest_market_report.pdf` and summarizes the key findings.
    - The agent retrieves HTML content from a specified URL about electric scooter
      user preferences.
    - The user scrolls through a market analysis document on one of their monitors.
    - The agent downloads an industry report from a specified URL and saves it to
      the user's project folder.
    - The user types 'cmdw' to close a tab and continues with scrolling through an
      online tech forum.
    - The agent generates a bar chart comparing battery life across top electric scooter
      models.
    - The agent opens an email from a scooter manufacturer and extracts contact details.
    - The user moves the mouse and clicks the left button within a word processor
      application.
    theme: Electric Scooter Market Research
  user:
    description: Alex is a 34-year-old technology journalist with strong research
      skills, experienced in data analysis, and adept at interviewing industry experts.
      Alex aims to create a comprehensive article on the electric scooter market.
    goal: Investigate the latest trends, technological advancements, and user preferences
      in the electric scooter market and write an article.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.get_html(url: str) -> str'
    - 'data.summarize(data: str) -> str'
    - 'data.generate_chart(data: Dict[str, Any], chart_type: str) -> str'
    - 'text.generate_headline(content: str) -> str'
    - 'text.check_grammar(content: str) -> Dict[str, Any]'
    - 'text.fact_check(content: str) -> Dict[str, Any]'
    description: Mia, an urban mobility consultant, is analyzing the impact of electric
      scooters on urban mobility and proposing strategies for integrating them into
      public transportation systems.
    entities:
    - GIS Software
    - Survey Tools
    - Policy Documents
    - Presentation Software
    - City Transportation Departments
    - Community Groups
    - Scooter Sharing Companies
    events_example:
    - The agent opens an urban planning guide and identifies relevant sections on
      scooter integration.
    - The user types 'urban mobility trends 2023' into a new browser tab and hits
      enter.
    - The agent saves summarized market trends to a file named `trend_summary.txt`.
    - The agent opens the browser and navigates to an academic journal about sustainable
      transportation.
    - The user highlights text in a PDF document by dragging the mouse.
    - The agent performs a fact-check on a paragraph regarding electric scooter safety
      statistics.
    - The user switches tabs and clicks to select an image for analysis in photo editing
      software.
    - The agent analyzes a photo of an electric scooter and identifies key features.
    - The user inputs text 'latest battery technology reports' in a search engine
      and clicks search.
    - The agent retrieves and displays the top electric scooter models based on user
      reviews.
    theme: Urban Mobility Analysis
  user:
    description: Mia is a 28-year-old urban mobility consultant with expertise in
      urban planning and sustainability, proficient in GIS software, and strong communication
      skills. Mia aims to propose strategies for integrating electric scooters into
      public transportation.
    goal: Analyze the impact of electric scooters on urban mobility and propose strategies
      for integrating them into public transportation systems.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.get_html(url: str) -> str'
    - 'data.summarize(data: str) -> str'
    - 'data.generate_chart(data: Dict[str, Any], chart_type: str) -> str'
    - 'text.generate_headline(content: str) -> str'
    - 'text.check_grammar(content: str) -> Dict[str, Any]'
    - 'text.fact_check(content: str) -> Dict[str, Any]'
    description: Sam, a product manager at a smart mobility startup, is overseeing
      the development of a new line of eco-friendly electric scooters with enhanced
      smart features.
    entities:
    - Prototypes of Electric Scooters
    - Project Management Software
    - User Feedback Surveys
    - Marketing Materials
    - Engineering Team
    - Marketing Department
    - Beta Testers
    events_example:
    - The agent opens a market research file, reads the contents, and identifies the
      key insights.
    - The user types 'innovative scooter technology' in a forum search bar.
    - The agent extracts market share data from a specified industry report file.
    - The agent generates a pie chart visualizing usage statistics for various scooter
      brands.
    - The user opens a spreadsheet and enters data on electric scooter sales.
    - The user moves the mouse and clicks to start playing an industry webinar video.
    - The agent summarizes the content of a recorded interview with a scooter tech
      expert.
    - The user scrolls through the search results for 'smart mobility devices' on
      Google.
    - The agent opens a presentation software and inserts data visualizations.
    - The user scrolls and clicks within an online user review platform for electric
      scooters.
    theme: Smart Mobility Product Development
  user:
    description: Sam is a 40-year-old product manager at a smart mobility startup
      with strong strategic planning and project management skills, knowledgeable
      in IoT and connected devices. Sam aims to develop a new line of eco-friendly
      scooters.
    goal: Oversee the development of a new line of eco-friendly electric scooters
      with enhanced smart features.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'browser.get_html(url: str) -> str'
    - 'data.summarize(data: str) -> str'
    - 'data.generate_chart(data: Dict[str, Any], chart_type: str) -> str'
    - 'text.generate_headline(content: str) -> str'
    - 'text.check_grammar(content: str) -> Dict[str, Any]'
    - 'text.fact_check(content: str) -> Dict[str, Any]'
    description: Ella, a social media influencer focusing on green technology, is
      creating engaging content that highlights the benefits of using electric scooters
      as a sustainable transportation option.
    entities:
    - Camera and Filming Equipment
    - Editing Software
    - Social Media Platforms
    - Eco-friendly Products
    - Followers and Audience
    - Electric Scooter Brands
    - Collaborating Influencers
    events_example:
    - The agent compiles user feedback comments into a report.
    - The user types 'scooter usage trend graphs' in a search engine and clicks search.
    - The agent opens an email, reads it, and schedules a meeting with a scooter manufacturer
      representative.
    - The agent lists all files in the 'research_documents' directory.
    - The user moves the mouse and clicks to expand a dropdown menu in a data analysis
      software.
    - The agent saves a webpage on scooter safety features for offline reading.
    - The user highlights text and uses 'cmdc' to copy, then 'cmdv' to paste into
      another document.
    - The agent fact-checks a statistic related to the environmental impact of scooters.
    - The user scrolls and selects a section in an infographic software to edit.
    - The agent opens a market research file, reads the contents, and identifies the
      key insights.
    theme: Social Media Content Creation
  user:
    description: Ella is a 23-year-old social media influencer focusing on green technology,
      proficient in creative content creation and engaging audiences. Ella aims to
      create content promoting electric scooters as sustainable transport.
    goal: Create engaging content that highlights the benefits of using electric scooters
      as a sustainable transportation option.
- environment:
    agent_ops:
    - recipe.search(query)
    - recipe.suggest(preferences, dietary_restrictions, available_ingredients)
    - nutrition.analyze(recipe_url)
    - nutrition.log(meal_name, ingredients, servings)
    - grocery_list.generate(recipes)
    - instruction.read_aloud(step)
    - ingredient.substitute(ingredient, dietary_restriction)
    - technique.tutorial(name)
    - timer.set(duration, label)
    - schedule.reminder(time, task)
    - image.recognize_recipe_ingredients(image_path)
    - image.check_expiration_dates(image_path)
    description: A modern kitchen with a cozy, well-lit ambiance. Cooking gadgets
      such as a high-speed blender, air fryer, and slow cooker are available. The
      kitchen has a center island with bar stools and a mounted tablet for recipe
      browsing. The user is engaged in meal prep activities for the week, focusing
      on healthy eating.
    entities:
    - Smart Kitchen Tablet
    - Blender
    - Air Fryer
    - Slow Cooker
    - Sous Vide Machine
    - Herb and Vegetable Garden
    - Grocery List App
    - Nutrition Tracking App
    - Social Media Platforms
    - Local Farmers' Market
    - Natural Light
    - Ambient Sounds
    - Community Gardening Group
    - Laura's Dog, Max
    events_example:
    - The user opens the recipe website on the smart kitchen tablet and searches for
      'vegan kale and sweet potato soup'.
    - The agent suggests a recipe that matches the search criteria, highlighting its
      nutritional benefits and prep time.
    - The user clicks on a recipe for 'Vegan Quinoa Salad with Avocado' and reads
      through the list of ingredients.
    - The agent provides a substitute for quinoa, suggesting cauliflower rice to cater
      to a low-carb preference.
    - The user scrolls through additional recipe suggestions for 'quick vegetarian
      dinners' on the web page.
    - The agent sets a kitchen timer for 20 minutes to remind the user to check on
      simmering soup.
    - The user opens the grocery list app and adds items required for the newly chosen
      recipes.
    - The agent logs the ingredients of 'Vegan Kale and Sweet Potato Soup' into the
      nutrition-tracking app.
    - The user takes a picture of the fridge contents, and the agent checks for any
      soon-to-expire items.
    - The agent lists ingredients from the recognized image and suggests recipes to
      minimize food waste.
    - The user scrolls through an Instagram feed and likes a post about a new healthy
      smoothie recipe.
    - The agent reads out a step from the chosen soup recipe, instructing to chop
      the vegetables finely.
    - "The user watches a short video tutorial on saut\xE9ing techniques through a\
      \ suggested link by the agent."
    - The agent scans the recipe URL and provides a detailed nutritional analysis
      for a Mediterranean Chickpea Salad.
    - The user receives a notification from the Slack desktop app, a new message in
      the 'Healthy Recipes' channel.
    - The agent sets a reminder to start the slow cooker at 3:00 PM for a planned
      stew dish.
    - The user opens the Facebook app to post a picture of her meal prep for the week.
    - The agent recognizes that almond milk is missing from the ingredients list and
      suggests buying it.
    - The user scrolls through additional pages about 'gluten-free baking' from Bing
      search results.
    - The agent integrates the user's grocery list with local stores' apps to compare
      prices and availability.
    theme: Healthy Meal Prep
  user:
    description: Laura Bennett, 34, is a Marketing Manager for a sustainable food
      company. She has intermediate cooking skills and is proficient in nutrition
      tracking apps. Laura enjoys yoga, hiking, photography, and gardening. She is
      organized, health-conscious, curious, and open to experimenting with new recipes.
      Laura lives a busy lifestyle with a focus on health and sustainability, often
      engaging in community gardening projects.
    goal: Research and try new healthy recipes, preparing meals for the week.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_info(url, element)
    - file.open(file_path)
    - file.save(file_path, content)
    - text.generate_summary(text)
    - text.write(content_type, details)
    - data.create_spreadsheet(file_path, data)
    - data.visualize(data, chart_type)
    - schedule.create_event(event_details)
    - schedule.set_reminder(task, time)
    - email.compose(recipient, subject, body)
    - email.send(email_object)
    description: Sarah Thompson, a junior data analyst, is working in her cozy home
      office in the early evening. She is using dual monitors to research top universities
      globally for a master's program in Data Science. Her workspace includes various
      coding books, a notebook, and a smartwatch for reminders.
    entities:
    - Dual monitors
    - Notebook and pen
    - Smartwatch
    - University websites
    - Excel spreadsheet
    - Family members
    - Current employer
    - Friends/Peers
    - Professional mentors
    events_example:
    - The user types 'top universities for data science' into the browser search bar.
    - The agent opens the browser and searches for 'application deadlines for Stanford
      data science program'.
    - The user clicks on a university website link from the search results.
    - The agent extracts information on tuition fees from the selected webpage.
    - The user copies a paragraph detailing a course structure using 'ctrl+c'.
    - The user opens Excel and pastes the copied course information into a spreadsheet.
    - The agent creates a calendar event for a university application deadline.
    - The user checks emails and finds a message from a university admissions office.
    - The agent generates a summary of different university programs' job prospects.
    - The user scrolls through a forum discussing student experiences in data science
      degrees.
    - The agent opens a new tab and searches for 'financial aid for international
      students'.
    - The user types 'best countries for data science jobs' into the search engine.
    - The agent saves the user's compiled notes into a document file.
    - The user clicks on a video link for a university virtual tour.
    - The agent sends a reminder notification for a scholarship application deadline.
    theme: Researching Universities for Data Science Master's
  user:
    description: Sarah Thompson, 28, is a junior data analyst with intermediate skills
      in Python, SQL, and basic machine learning. She values structured environments
      and university reputation, and she often engages in online courses and research
      forums.
    goal: Researching and compiling a list of top 5 universities globally for a master's
      program in Data Science.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_info(url, element)
    - file.open(file_path)
    - file.save(file_path, content)
    - text.generate_summary(text)
    - text.write(content_type, details)
    - data.create_spreadsheet(file_path, data)
    - data.visualize(data, chart_type)
    - schedule.create_event(event_details)
    - schedule.set_reminder(task, time)
    - email.compose(recipient, subject, body)
    - email.send(email_object)
    description: Alex Park, a digital marketing specialist, is working in a well-equipped
      shared workspace in the late afternoon. He is using a tablet to explore part-time
      or online master's programs in Data Science, focusing on marketing analytics.
    entities:
    - Tablet
    - Social media
    - Blog platform
    - Email
    - Client projects
    - Collaborators
    - Industry experts
    - Family
    events_example:
    - The user types 'top universities for data science' into the browser search bar.
    - The agent opens the browser and searches for 'application deadlines for Stanford
      data science program'.
    - The user clicks on a university website link from the search results.
    - The agent extracts information on tuition fees from the selected webpage.
    - The user copies a paragraph detailing a course structure using 'ctrl+c'.
    - The user opens Excel and pastes the copied course information into a spreadsheet.
    - The agent creates a calendar event for a university application deadline.
    - The user checks emails and finds a message from a university admissions office.
    - The agent generates a summary of different university programs' job prospects.
    - The user scrolls through a forum discussing student experiences in data science
      degrees.
    - The agent opens a new tab and searches for 'financial aid for international
      students'.
    - The user types 'best countries for data science jobs' into the search engine.
    - The agent saves the user's compiled notes into a document file.
    - The user clicks on a video link for a university virtual tour.
    - The agent sends a reminder notification for a scholarship application deadline.
    theme: Exploring Part-Time Data Science Programs
  user:
    description: Alex Park, 35, is a digital marketing specialist with intermediate
      skills in R for data analysis and excellent written communication skills. He
      is interested in flexible learning options and enjoys writing blog posts about
      career transitions.
    goal: Exploring and documenting part-time or online master's programs in Data
      Science with a focus on marketing analytics.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_info(url, element)
    - file.open(file_path)
    - file.save(file_path, content)
    - text.generate_summary(text)
    - text.write(content_type, details)
    - data.create_spreadsheet(file_path, data)
    - data.visualize(data, chart_type)
    - schedule.create_event(event_details)
    - schedule.set_reminder(task, time)
    - email.compose(recipient, subject, body)
    - email.send(email_object)
    description: Daniel Singh, a software developer, is working in his home office
      in the mid-afternoon. He is using his laptop to research universities offering
      master's programs in Data Science integrated with software engineering.
    entities:
    - Laptop
    - Technical books
    - Presentation software
    - Coding environment
    - Development team
    - Product managers
    - Peers/Coding community
    - HR department
    events_example:
    - The user types 'top universities for data science' into the browser search bar.
    - The agent opens the browser and searches for 'application deadlines for Stanford
      data science program'.
    - The user clicks on a university website link from the search results.
    - The agent extracts information on tuition fees from the selected webpage.
    - The user copies a paragraph detailing a course structure using 'ctrl+c'.
    - The user opens Excel and pastes the copied course information into a spreadsheet.
    - The agent creates a calendar event for a university application deadline.
    - The user checks emails and finds a message from a university admissions office.
    - The agent generates a summary of different university programs' job prospects.
    - The user scrolls through a forum discussing student experiences in data science
      degrees.
    - The agent opens a new tab and searches for 'financial aid for international
      students'.
    - The user types 'best countries for data science jobs' into the search engine.
    - The agent saves the user's compiled notes into a document file.
    - The user clicks on a video link for a university virtual tour.
    - The agent sends a reminder notification for a scholarship application deadline.
    theme: Combining Data Science and Software Engineering
  user:
    description: Daniel Singh, 24, is a software developer with advanced skills in
      Java and C++, and introductory knowledge in data science. He is interested in
      big data and AI applications and aims to propose internal training programs
      based on academic insights.
    goal: Shortlisting universities for a master's degree in Data Science with a focus
      on software engineering.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_info(url, element)
    - file.open(file_path)
    - file.save(file_path, content)
    - text.generate_summary(text)
    - text.write(content_type, details)
    - data.create_spreadsheet(file_path, data)
    - data.visualize(data, chart_type)
    - schedule.create_event(event_details)
    - schedule.set_reminder(task, time)
    - email.compose(recipient, subject, body)
    - email.send(email_object)
    description: Maria Chen, a freelance graphic designer, is working in her bright
      living room in the mid-morning. She is using her laptop to research universities
      offering data science programs with a focus on art and design data.
    entities:
    - Laptop
    - Graphic design software
    - Online course platforms
    - Portfolio website
    - Clients
    - Freelance networks
    - Design community
    - Educational advisors
    events_example:
    - The user types 'top universities for data science' into the browser search bar.
    - The agent opens the browser and searches for 'application deadlines for Stanford
      data science program'.
    - The user clicks on a university website link from the search results.
    - The agent extracts information on tuition fees from the selected webpage.
    - The user copies a paragraph detailing a course structure using 'ctrl+c'.
    - The user opens Excel and pastes the copied course information into a spreadsheet.
    - The agent creates a calendar event for a university application deadline.
    - The user checks emails and finds a message from a university admissions office.
    - The agent generates a summary of different university programs' job prospects.
    - The user scrolls through a forum discussing student experiences in data science
      degrees.
    - The agent opens a new tab and searches for 'financial aid for international
      students'.
    - The user types 'best countries for data science jobs' into the search engine.
    - The agent saves the user's compiled notes into a document file.
    - The user clicks on a video link for a university virtual tour.
    - The agent sends a reminder notification for a scholarship application deadline.
    theme: Integrating Data Science with Design
  user:
    description: Maria Chen, 31, is a freelance graphic designer proficient in design
      software and beginner in data analysis tools. She is interested in integrating
      data science with her creative work and aims to enhance her portfolio with data-driven
      designs.
    goal: Compiling a list of universities offering data science programs with a focus
      on art and design data.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_info(url, element)
    - file.open(file_path)
    - file.save(file_path, content)
    - text.generate_summary(text)
    - text.write(content_type, details)
    - data.create_spreadsheet(file_path, data)
    - data.visualize(data, chart_type)
    - schedule.create_event(event_details)
    - schedule.set_reminder(task, time)
    - email.compose(recipient, subject, body)
    - email.send(email_object)
    description: James Rodriguez, a senior business analyst, is working in his corporate
      office in the mid-afternoon. He is using his desktop computer to research executive
      master's programs in Data Science with a business specialization.
    entities:
    - Desktop computer
    - Business analytics software
    - Whiteboard
    - Professional development platforms
    - Corporate communication tools
    - Management team
    - Junior analysts
    - Industry conferences
    - Professional associations
    events_example:
    - The user types 'top universities for data science' into the browser search bar.
    - The agent opens the browser and searches for 'application deadlines for Stanford
      data science program'.
    - The user clicks on a university website link from the search results.
    - The agent extracts information on tuition fees from the selected webpage.
    - The user copies a paragraph detailing a course structure using 'ctrl+c'.
    - The user opens Excel and pastes the copied course information into a spreadsheet.
    - The agent creates a calendar event for a university application deadline.
    - The user checks emails and finds a message from a university admissions office.
    - The agent generates a summary of different university programs' job prospects.
    - The user scrolls through a forum discussing student experiences in data science
      degrees.
    - The agent opens a new tab and searches for 'financial aid for international
      students'.
    - The user types 'best countries for data science jobs' into the search engine.
    - The agent saves the user's compiled notes into a document file.
    - The user clicks on a video link for a university virtual tour.
    - The agent sends a reminder notification for a scholarship application deadline.
    theme: Executive Master's in Data Science for Business
  user:
    description: James Rodriguez, 42, is a senior business analyst with extensive
      experience in business analytics and strategic planning. He aims to project
      career growth in data-driven business strategy formulation post-degree and develop
      a professional development plan aligned with academic learnings.
    goal: Identifying suitable universities for an executive master's in Data Science
      with a business specialization.
- environment:
    agent_ops:
    - read_text_from_image(image_path)
    - read_email(content)
    - generate_reminder(date, task)
    - summarize_transactions(transactions)
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list_directory(directory_path)
    - browser.open(url)
    - browser.fill_form(url, form_data)
    - browser.download_file(url, destination_path)
    - schedule_payment(account_info, amount, due_date)
    - fetch_due_bills(user_info)
    description: Emily Carter, a freelance graphic designer, is managing her monthly
      bill payments and organizing digital receipts for tax purposes. She is working
      from her home office, using her laptop and smartphone to handle various financial
      tasks.
    entities:
    - Laptop
    - Smartphone
    - Tablet
    - Workstation
    - Printer/Scanner
    - Bank Accounts
    - Digital Receipts
    - Bill Payment Portals
    - Freelance Income Accounts
    - Financial Planning Apps
    - Email Notifications
    - Client Payments
    events_example:
    - The user receives a notification from the 'Outlook' app reminding them of an
      upcoming meeting.
    - The agent opens the browser and logs into the user's bank account to check the
      balance.
    - The user receives a notification from the 'Google Calendar' app reminding them
      about a due bill.
    - The user clicked on a search result page about 'best budgeting apps 2023' on
      Google.
    - The agent reads an email with the subject 'Electric Bill Due' and extracts the
      due date and amount.
    - The user interacts with the 'Mint' finance app by clicking and scrolling through
      the transaction history.
    - The user receives a notification from the 'Venmo' mobile app, indicating a payment
      received from a client.
    - The agent opens a PDF file 'Internet_Bill.pdf' from the user's documents folder
      and reads the bill details.
    - The user performs multiple scroll actions and clicks on a 'how to automate bill
      payments' link on a blog.
    - The agent navigates to the electricity provider's website and sets up a scheduled
      payment.
    - The user receives an email notification from PayPal confirming a payment made
      to the water utility.
    - The agent logs into the user's credit card account and generates a transaction
      summary report.
    - The user receives a new follower notification from LinkedIn.
    - The agent downloads the latest bill from the utility provider's portal.
    - The user scrolled and copied text using 'cmd+c' about 'mortgage interest rate
      trends' from a financial news site.
    - The agent schedules a reminder for 'pay rent' on the user's Google Calendar.
    - The user clicked on a link titled 'overview of home refinancing options' in
      an email newsletter.
    - The agent opens the file 'rent_receipt.txt' and updates the payment record.
    - The user interacts with the 'QuickBooks' desktop app by clicking through the
      invoicing section.
    - The agent generates a reminder to check bills on the user's personal assistant
      app.
    - The user performs multiple scroll actions and reads an article about 'automating
      personal finances'.
    - The agent opens the file 'transaction_history.csv' and identifies discrepancies
      in payment records.
    - "The user switches to a tab containing their loan provider\u2019s website without\
      \ performing any specific actions."
    - The agent schedules an automatic payment for a loan installment.
    - The user receives a notification from the 'Slack' desktop app, a new message
      in the 'Finance' channel.
    - The agent navigates to the mobile carrier's website to download the latest phone
      bill.
    - The user switched back to their desktop and opened the 'Microsoft Excel' application.
    - The user opened the 'Google Sheets' app and reviewed the personal budget spreadsheet.
    - The agent generates a summarized list of due bills from various online accounts.
    - The user opens the 'To-Do List' application, reviews pending tasks, and marks
      a few as completed.
    theme: Freelance Financial Management
  user:
    description: Emily Carter is a 27-year-old freelance graphic designer who is tech-savvy
      and organized. She prefers using digital tools to manage her finances and enjoys
      automation to streamline her workflow.
    goal: Manage monthly bill payments and organize digital receipts for tax purposes.
- environment:
    agent_ops:
    - read_text_from_image(image_path)
    - read_email(content)
    - generate_reminder(date, task)
    - summarize_transactions(transactions)
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.list_directory(directory_path)
    - browser.open(url)
    - browser.fill_form(url, form_data)
    - browser.download_file(url, destination_path)
    - schedule_payment(account_info, amount, due_date)
    - fetch_due_bills(user_info)
    description: Mike Johnson, a high school teacher, is managing his personal and
      educational subscription payments. He uses his desktop computer and mobile phone
      to handle various financial tasks.
    entities:
    - Desktop Computer
    - Mobile Phone
    - Notepad and Planner
    - Smart TV
    - Envelopes and Cheques
    - School Accounts
    - Subscription Accounts
    - Monthly Budgets
    - Family
    - School Administration
    - Utility Providers
    events_example:
    - The user receives a notification from the 'Outlook' app reminding them of an
      upcoming meeting.
    - The agent opens the browser and logs into the user's bank account to check the
      balance.
    - The user receives a notification from the 'Google Calendar' app reminding them
      about a due bill.
    - The user clicked on a search result page about 'best budgeting apps 2023' on
      Google.
    - The agent reads an email with the subject 'Electric Bill Due' and extracts the
      due date and amount.
    - The user interacts with the 'Mint' finance app by clicking and scrolling through
      the transaction history.
    - The user receives a notification from the 'Venmo' mobile app, indicating a payment
      received from a client.
    - The agent opens a PDF file 'Internet_Bill.pdf' from the user's documents folder
      and reads the bill details.
    - The user performs multiple scroll actions and clicks on a 'how to automate bill
      payments' link on a blog.
    - The agent navigates to the electricity provider's website and sets up a scheduled
      payment.
    - The user receives an email notification from PayPal confirming a payment made
      to the water utility.
    - The agent logs into the user's credit card account and generates a transaction
      summary report.
    - The user receives a new follower notification from LinkedIn.
    - The agent downloads the latest bill from the utility provider's portal.
    - The user scrolled and copied text using 'cmd+c' about 'mortgage interest rate
      trends' from a financial news site.
    - The agent schedules a reminder for 'pay rent' on the user's Google Calendar.
    - The user clicked on a link titled 'overview of home refinancing options' in
      an email newsletter.
    - The agent opens the file 'rent_receipt.txt' and updates the payment record.
    - The user interacts with the 'QuickBooks' desktop app by clicking through the
      invoicing section.
    - The agent generates a reminder to check bills on the user's personal assistant
      app.
    - The user performs multiple scroll actions and reads an article about 'automating
      personal finances'.
    - The agent opens the file 'transaction_history.csv' and identifies discrepancies
      in payment records.
    - "The user switches to a tab containing their loan provider\u2019s website without\
      \ performing any specific actions."
    - The agent schedules an automatic payment for a loan installment.
    - The user receives a notification from the 'Slack' desktop app, a new message
      in the 'Finance' channel.
    - The agent navigates to the mobile carrier's website to download the latest phone
      bill.
    - The user switched back to their desktop and opened the 'Microsoft Excel' application.
    - The user opened the 'Google Sheets' app and reviewed the personal budget spreadsheet.
    - The agent generates a summarized list of due bills from various online accounts.
    - The user opens the 'To-Do List' application, reviews pending tasks, and marks
      a few as completed.
    theme: Teacher's Financial Management
  user:
    description: Mike Johnson is a 45-year-old high school teacher who is comfortable
      with everyday tech use. He prefers straightforward interfaces and uses digital
      tools to manage his finances efficiently.
    goal: Manage personal and educational subscription payments.
- environment:
    agent_ops:
    - device.connect(device_name)
    - device.control(device_name, command)
    - device.sync_data(device_name)
    - browser.open(url)
    - app.select(application_name)
    - content.search(query)
    - text.generate(prompt)
    - text.suggest(personalization_data)
    - image.analyze(image_path)
    - system.remind(time, task)
    - system.schedule(activity, start_time, end_time)
    - system.log_event(event)
    - personalization.update_profile(configurations)
    - recommendation.generate(category, context)
    description: Alex, a software developer, is winding down after a long day of work
      in his cozy apartment. He uses technology to enhance his meditation practice,
      integrating apps and wearables to track his progress and stress levels.
    entities:
    - Meditation Apps
    - Wearable Devices
    - Essential Oil Diffuser
    - Digital Journal
    - Smart Home Integration
    events_example:
    - The agent opens the Calm app and selects a guided meditation session for stress
      relief.
    - "The agent integrates with the smart home device to dim the living room lights\
      \ for Alex\u2019s meditation."
    - Alex checks the sync data from his wearable device which shows an elevated heart
      rate.
    - Alex receives a reminder from the digital planner to start the scheduled evening
      meditation at 7 PM.
    - "The agent logs the completion of a 15-minute yoga session in Emma\u2019s wellness\
      \ tracking app."
    - Emma reads a notification from her health app suggesting a quick stress-relieving
      meditation.
    - The user, Jane, opens the web browser to search for kid-friendly mindfulness
      activities for her students.
    - Mark clicks on a recommended dynamic yoga flow video in YouTube and watches
      it for guidance.
    - "The agent generates text based on Emma\u2019s prompt for documenting her meditation\
      \ reflections."
    - "The agent connects to Jane\u2019s smartwatch to retrieve sleep data for her\
      \ wellness journal."
    - "Alex\u2019s essential oil diffuser starts emitting lavender scent as prompted\
      \ by the agent."
    - "Jane adjusts her yoga props and checks her digital planner for the day\u2019\
      s meditation routine."
    - Mark opens his sketchbook to integrate art creation into his evening meditation
      session.
    - The agent displays a notification about new guided meditation sessions available
      in the Headspace app.
    - The user, Alex, receives a notification from his fitness app about a new stress
      management article.
    - Jane clicks through a series of mindfulness exercises tailored for children
      on a teaching resource website.
    - "The agent sets up mood lighting in Mark\u2019s room to create a calming environment\
      \ for his meditation."
    - "Emma\u2019s wearable device syncs with her healthcare app to record her current\
      \ stress level."
    - The user, Mark, interacts with the meditation app by selecting a session focused
      on creative thinking.
    - The agent scans and analyzes a photo uploaded by Mark to suggest relaxing color
      palettes for his artwork.
    - "Alex opens his digital journal and types in his reflections on the day\u2019\
      s meditation session."
    - Jane receives a reminder from her digital planner to take a quick meditation
      break during lunch.
    - Mark skips a recommended meditation session and searches for a new dynamic yoga
      routine.
    - Emma receives a notification from a wellness blog about an upcoming podcast
      on integrated health practices.
    - "The agent connects to Alex\u2019s smart thermostat to adjust the temperature\
      \ for a comfortable meditation space."
    theme: Evening Meditation
  user:
    description: Alex is a 34-year-old software developer who uses technology to enhance
      his meditation experience. He prefers guided meditations with calming music
      and tracks his stress levels using wearables. Alex aims to unwind after work
      and improve his mindfulness practice.
    goal: Set aside time daily for meditation or yoga practice.
- environment:
    agent_ops:
    - text.read(document_id)
    - image.recognize(image_id)
    - text.generate(prompt, max_length)
    - terminal.run_command(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - shopping.find_deals(product_type)
    - shopping.compare_products(product_ids)
    - shopping.add_to_cart(product_id)
    - calendar.add_event(title, date, time, description)
    - calendar.get_events(date)
    - reminder.set_reminder(title, date, time)
    - social_media.post(content, platform)
    - social_media.get_feed(platform)
    description: John is in his urban apartment on a Saturday morning, browsing online
      for gifts for his friends Sarah and Mike. The scene is set with sunlight streaming
      through the windows as he sips coffee.
    entities:
    - Tablet/Smartphone
    - Coffee Mug
    - Calendar App
    - Online Shopping Sites
    - Delivery Services
    - Social Media Platforms
    events_example:
    - The agent opens the browser and searches for eco-friendly yoga mats.
    - The user clicked through several product reviews for smart home devices on an
      online shopping site.
    - The agent reads the user's calendar and identifies upcoming birthdays.
    - The agent adds a yoga accessories set to the shopping cart for Sarah.
    - The user receives a notification from the 'Amazon' app about a limited-time
      discount on smart speakers.
    - The agent compares products by reading reviews of camera lenses suitable for
      Clara.
    - The user scrolled through a list of handcrafted gift ideas on Pinterest.
    - The agent recognizes sale banners in images of an online store and highlights
      them to the user.
    - The user performs multiple scrolling actions and types 'best hiking gear 2023'
      in a search engine.
    - The user opens the 'Calendar' app and adds a reminder for Linda's birthday.
    - The agent reads product descriptions and identifies a highly rated book for
      Linda.
    - The user clicks and interacts with the search results for 'gourmet ingredient
      kits' on a cooking site.
    - The agent checks the user's budgeting app for available funds before the purchases.
    - The user interacts with a pop-up ad about the latest gaming headsets while shopping
      online.
    - The agent sets a reminder in the calendar for the last order date to ensure
      timely delivery.
    - The user clicked on and read through a detailed product comparison for wine
      subscription services.
    - The agent finds a recipe book on sale that Chloe might like and highlights it
      for the user.
    - The user receives a notification from the 'Etsy' app about new handmade crafts
      arriving.
    - The agent generates a shopping list based on the user's past purchase history.
    - The user inputs 'cmd+c' to copy a discount code from a website.
    - The agent opens a web browser and searches for advanced programming books to
      gift Tara.
    - The user scrolls through a list of top-rated game controllers on a gaming forum.
    - The agent sends an email confirmation of delivery dates for the purchased gifts.
    - The user stops to read an in-depth blog post about eco-friendly yoga products.
    - "The agent opens a social media app to check for updates on friends\u2019 interests."
    - The user clicks and interacts with a search result page titled 'latest tech
      gadget reviews' on Google.
    - The agent inputs product IDs for smart home devices into a comparison tool.
    - The user receives a notification from the 'Twitter' mobile app about a trending
      tech gadget.
    - "The agent highlights top deals and discounts on the products in the user\u2019\
      s shopping cart."
    - "The user receives a notification from the 'Facebook' app about Mike\u2019s\
      \ recent interest in smart home technology."
    theme: Gift Shopping
  user:
    description: John, a 32-year-old marketing manager, is tech-savvy and enjoys modern
      gadgets. He is browsing online to find gifts for his friends Sarah, who loves
      eco-friendly products, and Mike, a tech enthusiast.
    goal: Buy gifts for upcoming birthdays.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_install(package_name)
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list_directory(directory_path)
    - browser_open(url)
    - browser_search(query)
    - browser_download(url, save_path)
    - email_send(recipient, subject, content)
    - email_check_inbox()
    - task_add(name, description, due_date)
    - task_update(task_id, updates)
    - task_list(due_today_only=False)
    - calendar_create_event(title, start_time, end_time, description, participants)
    - calendar_list_events(date)
    description: David Mitchell, a Marketing Manager, starts his day in his home office.
      The room is well-lit with a large desk facing a window, equipped with dual monitors,
      a laptop, and a digital calendar. He begins by checking emails, updating his
      to-do list, and reviewing marketing metrics.
    entities:
    - Dual Monitors
    - Laptop
    - Smartphone
    - Project Management Tool (Asana or Trello)
    - Digital Calendar
    - Notepad and Pen
    - Emails and Resources from Team Members
    - Marketing Analytics Platform
    - Social Media Accounts
    - Clients and Stakeholders
    - Company Policies and Objectives
    - Market Trends and Competitors
    - Team Collaborations
    events_example:
    - The user opens their laptop and logs into the email client.
    - The agent checks the user's inbox for new emails.
    - The user flags an important email about a project deadline.
    - The agent extracts tasks from the flagged email and adds them to the user's
      to-do list.
    - The user receives a notification from the Asana web application about a new
      task assigned by a team member.
    - The user opens a Google search page and types 'latest marketing trends 2023'.
    - The agent searches for tutorials on creating marketing reports in Excel.
    - The agent opens the file 'quarterly_summary.xlsx' and highlights missing data
      points.
    - The user receives a reminder from the digital calendar about an upcoming team
      meeting in 15 minutes.
    - "The user clicks on their bookmark to open the company\u2019s project management\
      \ dashboard."
    - The agent detects new comments on a task in Trello and notifies the user.
    - The user scrolls through the dashboard to review the progress of ongoing projects.
    - The agent generates a list of pending tasks for the day from multiple sources
      and displays it.
    - The user color-codes the new tasks on their to-do list based on priority.
    - The agent sends an email response to a client confirming the receipt of their
      feedback.
    - The user switches to their Slack desktop app to read new messages in the 'Marketing'
      channel.
    - The agent schedules a follow-up meeting with the sales team using the calendar
      app.
    - The user opens a new tab in their browser titled 'New Tab' to search for competitor
      analysis tools.
    - The user receives a notification from the Gmail app about a new message from
      a colleague.
    - The agent downloads a marketing report template from a specified URL and saves
      it to the desktop.
    - The user clicks on a Google search result page regarding 'effective email marketing
      strategies'.
    - The agent opens the file 'meeting_notes.txt' and highlights key action points.
    - The user switches back to the Gmail tab in the web browser.
    - The user receives a notification from the Calendar app, reminding them of a
      scheduled meeting.
    - The user scrolls and copies text using 'ctrl+c' on a web page about recent technology
      advancements.
    - The agent adds a calendar event for reviewing quarterly financials.
    - The user clicked on a Google search result page regarding 'instagram engagement
      tips'.
    - The agent opens the file 'content_plan.xlsx' and updates the weekly content
      schedule.
    - The user receives a notification from the Outlook app, titled 'Meeting Request
      from John Doe'.
    - The user interacts with the 'ChatGPT' chat tab by clicking, scrolling, and typing.
    - The agent detects low disk space and notifies the user to clean up unnecessary
      files.
    - The user opens an article about market analysis tools and bookmarks it for later.
    - The agent updates task statuses in Trello based on the latest team inputs.
    - The user receives a notification from the 'YouTube' web application, the subscribed
      channel 'Tech Insider' uploaded a new video.
    - The agent runs the command to install the latest version of a required package.
    - The agent checks for pull requests on GitHub and notifies the user of any pending
      reviews.
    - The user opens the Slack desktop app to check new direct messages.
    - "The agent sends a reminder email to the user\u2019s team about an upcoming\
      \ deadline."
    - The user opens a new tab and searches for Python libraries for data analysis.
    - The agent logs error messages from the last system update and presents them
      to the user for review.
    theme: Marketing Manager's Morning Routine
  user:
    description: David Mitchell, a 32-year-old Marketing Manager, is focused on organizing
      his day efficiently. He uses various digital tools to manage his tasks, review
      marketing metrics, and collaborate with his team. David prefers a minimalist
      workspace and high efficiency, often using dark mode on his devices to ease
      eye strain.
    goal: Open computer to check the history tasks from different sources, update
      today's to-do list.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_install(package_name)
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list_directory(directory_path)
    - browser_open(url)
    - browser_search(query)
    - browser_download(url, save_path)
    - email_send(recipient, subject, content)
    - email_check_inbox()
    - task_add(name, description, due_date)
    - task_update(task_id, updates)
    - task_list(due_today_only=False)
    - calendar_create_event(title, start_time, end_time, description, participants)
    - calendar_list_events(date)
    description: "Emily Clark, a Content Writer, starts her day at a local caf\xE9\
      . Her workspace is vibrant, filled with inspirational quotes and plants. She\
      \ uses a laptop for drafting articles, a bullet journal for brainstorming, and\
      \ various digital tools for content management and SEO optimization."
    entities:
    - Laptop/Computer
    - Bullet Journal
    - Blog Platform (WordPress)
    - Graphic Design Tool (Canva)
    - Coffee Mug
    - Content Submissions from Colleagues
    - SEO Tools
    - Social Media Accounts
    - Emails and Content Review Feedback
    - Editorial Guidelines
    - Trending Topics and Keywords
    - Reader Engagement and Analytics
    - Book Club Discussions
    events_example:
    - The user opens their laptop and logs into the email client.
    - The agent checks the user's inbox for new emails.
    - The user flags an important email about a project deadline.
    - The agent extracts tasks from the flagged email and adds them to the user's
      to-do list.
    - The user receives a notification from the Asana web application about a new
      task assigned by a team member.
    - The user opens a Google search page and types 'latest marketing trends 2023'.
    - The agent searches for tutorials on creating marketing reports in Excel.
    - The agent opens the file 'quarterly_summary.xlsx' and highlights missing data
      points.
    - The user receives a reminder from the digital calendar about an upcoming team
      meeting in 15 minutes.
    - "The user clicks on their bookmark to open the company\u2019s project management\
      \ dashboard."
    - The agent detects new comments on a task in Trello and notifies the user.
    - The user scrolls through the dashboard to review the progress of ongoing projects.
    - The agent generates a list of pending tasks for the day from multiple sources
      and displays it.
    - The user color-codes the new tasks on their to-do list based on priority.
    - The agent sends an email response to a client confirming the receipt of their
      feedback.
    - The user switches to their Slack desktop app to read new messages in the 'Marketing'
      channel.
    - The agent schedules a follow-up meeting with the sales team using the calendar
      app.
    - The user opens a new tab in their browser titled 'New Tab' to search for competitor
      analysis tools.
    - The user receives a notification from the Gmail app about a new message from
      a colleague.
    - The agent downloads a marketing report template from a specified URL and saves
      it to the desktop.
    - The user clicks on a Google search result page regarding 'effective email marketing
      strategies'.
    - The agent opens the file 'meeting_notes.txt' and highlights key action points.
    - The user switches back to the Gmail tab in the web browser.
    - The user receives a notification from the Calendar app, reminding them of a
      scheduled meeting.
    - The user scrolls and copies text using 'ctrl+c' on a web page about recent technology
      advancements.
    - The agent adds a calendar event for reviewing quarterly financials.
    - The user clicked on a Google search result page regarding 'instagram engagement
      tips'.
    - The agent opens the file 'content_plan.xlsx' and updates the weekly content
      schedule.
    - The user receives a notification from the Outlook app, titled 'Meeting Request
      from John Doe'.
    - The user interacts with the 'ChatGPT' chat tab by clicking, scrolling, and typing.
    - The agent detects low disk space and notifies the user to clean up unnecessary
      files.
    - The user opens an article about market analysis tools and bookmarks it for later.
    - The agent updates task statuses in Trello based on the latest team inputs.
    - The user receives a notification from the 'YouTube' web application, the subscribed
      channel 'Tech Insider' uploaded a new video.
    - The agent runs the command to install the latest version of a required package.
    - The agent checks for pull requests on GitHub and notifies the user of any pending
      reviews.
    - The user opens the Slack desktop app to check new direct messages.
    - "The agent sends a reminder email to the user\u2019s team about an upcoming\
      \ deadline."
    - The user opens a new tab and searches for Python libraries for data analysis.
    - The agent logs error messages from the last system update and presents them
      to the user for review.
    theme: Content Writer's Creative Session
  user:
    description: Emily Clark, a 28-year-old Content Writer, enjoys a vibrant workspace
      and uses a combination of digital tools and a bullet journal to manage her tasks.
      She focuses on drafting articles, optimizing content for SEO, and engaging with
      her audience on social media.
    goal: Open computer to check the history tasks from different sources, update
      today's to-do list.
- environment:
    agent_ops:
    - terminal_run(command)
    - terminal_install(package_name)
    - file_open(file_path)
    - file_save(file_path, content)
    - file_list_directory(directory_path)
    - browser_open(url)
    - browser_search(query)
    - browser_download(url, save_path)
    - email_send(recipient, subject, content)
    - email_check_inbox()
    - task_add(name, description, due_date)
    - task_update(task_id, updates)
    - task_list(due_today_only=False)
    - calendar_create_event(title, start_time, end_time, description, participants)
    - calendar_list_events(date)
    description: Robert Gonzales, a Software Developer, begins his day in his home
      office equipped with a multi-monitor setup. He focuses on reviewing pull requests,
      debugging code, and implementing new features. His workspace is highly organized,
      and he uses various development tools and automation scripts.
    entities:
    - Multi-Monitor Setup
    - Mechanical Keyboard and Mouse
    - GitHub Repository
    - Integrated Development Environment (IDE)
    - Espresso Machine
    - Code Review Submissions
    - Bug Tracking System
    - Automated Testing Suite
    - Documentation Repositories
    - Project Requirements and Deadlines
    - Feedback from QA Team
    - Industry Standards and Practices
    - Professional Network and Tech Meetups
    events_example:
    - The user opens their laptop and logs into the email client.
    - The agent checks the user's inbox for new emails.
    - The user flags an important email about a project deadline.
    - The agent extracts tasks from the flagged email and adds them to the user's
      to-do list.
    - The user receives a notification from the Asana web application about a new
      task assigned by a team member.
    - The user opens a Google search page and types 'latest marketing trends 2023'.
    - The agent searches for tutorials on creating marketing reports in Excel.
    - The agent opens the file 'quarterly_summary.xlsx' and highlights missing data
      points.
    - The user receives a reminder from the digital calendar about an upcoming team
      meeting in 15 minutes.
    - "The user clicks on their bookmark to open the company\u2019s project management\
      \ dashboard."
    - The agent detects new comments on a task in Trello and notifies the user.
    - The user scrolls through the dashboard to review the progress of ongoing projects.
    - The agent generates a list of pending tasks for the day from multiple sources
      and displays it.
    - The user color-codes the new tasks on their to-do list based on priority.
    - The agent sends an email response to a client confirming the receipt of their
      feedback.
    - The user switches to their Slack desktop app to read new messages in the 'Marketing'
      channel.
    - The agent schedules a follow-up meeting with the sales team using the calendar
      app.
    - The user opens a new tab in their browser titled 'New Tab' to search for competitor
      analysis tools.
    - The user receives a notification from the Gmail app about a new message from
      a colleague.
    - The agent downloads a marketing report template from a specified URL and saves
      it to the desktop.
    - The user clicks on a Google search result page regarding 'effective email marketing
      strategies'.
    - The agent opens the file 'meeting_notes.txt' and highlights key action points.
    - The user switches back to the Gmail tab in the web browser.
    - The user receives a notification from the Calendar app, reminding them of a
      scheduled meeting.
    - The user scrolls and copies text using 'ctrl+c' on a web page about recent technology
      advancements.
    - The agent adds a calendar event for reviewing quarterly financials.
    - The user clicked on a Google search result page regarding 'instagram engagement
      tips'.
    - The agent opens the file 'content_plan.xlsx' and updates the weekly content
      schedule.
    - The user receives a notification from the Outlook app, titled 'Meeting Request
      from John Doe'.
    - The user interacts with the 'ChatGPT' chat tab by clicking, scrolling, and typing.
    - The agent detects low disk space and notifies the user to clean up unnecessary
      files.
    - The user opens an article about market analysis tools and bookmarks it for later.
    - The agent updates task statuses in Trello based on the latest team inputs.
    - The user receives a notification from the 'YouTube' web application, the subscribed
      channel 'Tech Insider' uploaded a new video.
    - The agent runs the command to install the latest version of a required package.
    - The agent checks for pull requests on GitHub and notifies the user of any pending
      reviews.
    - The user opens the Slack desktop app to check new direct messages.
    - "The agent sends a reminder email to the user\u2019s team about an upcoming\
      \ deadline."
    - The user opens a new tab and searches for Python libraries for data analysis.
    - The agent logs error messages from the last system update and presents them
      to the user for review.
    theme: Software Developer's Debugging Session
  user:
    description: Robert Gonzales, a 45-year-old Software Developer, focuses on coding,
      debugging, and reviewing pull requests. He uses a highly organized multi-monitor
      setup and various development tools to manage his tasks efficiently.
    goal: Open computer to check the history tasks from different sources, update
      today's to-do list.
- environment:
    agent_ops:
    - messaging.read(app, conversation_id, message_id)
    - messaging.send(app, conversation_id, message)
    - terminal.run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.interact(element_selector, action, data)
    - project_management.fetch_task_details(board_name, task_id)
    - project_management.update_task_status(board_name, task_id, new_status)
    - email.send(recipient_email, subject, body)
    - email.read_inbox(unread_only)
    description: Michael T., a project manager at a marketing firm, is working from
      his home office. He is managing the team's weekly project list and ensuring
      all tasks align with client requirements. His workspace is equipped with a laptop
      and smartphone for seamless communication and task management.
    entities:
    - Laptop
    - Smartphone
    - Asana Project Board
    - Slack
    - Outlook Email
    - Client Dashboard
    events_example:
    - The user receives a notification from the Slack desktop app titled 'New message
      from Jessie.'
    - The agent reads the Slack message content asking for feedback on a creative
      draft.
    - The agent opens the Asana project board named 'Marketing Project' to fetch task
      details.
    - The user glances at the project board on their laptop screen but does not interact
      with it.
    - The agent scans and compiles a summary of the relevant task details from Asana.
    - The user opens the Google Chrome web browser but does not perform any actions.
    - The agent updates the task status in Asana from 'In Progress' to 'In Review.'
    - The user receives an email notification from the Outlook app titled 'Client
      Feedback Required.'
    - The agent opens the email in the Outlook app and extracts key points for the
      user.
    - The agent drafts a response email in Outlook addressing Jessie's query and suggesting
      feedback.
    - The user receives a notification from the Asana web application titled 'Task
      Update for EcoFocus.'
    - The user clicks on the notification but does not perform any specific actions
      thereafter.
    - The agent verifies that the task details align with the client's needs and project
      timeline.
    - The user opens the Excel application to check a sales report but performs no
      additional actions.
    - The agent sends the drafted email response to Jessie via Outlook after user
      approval.
    - The user opens a new tab in Google Chrome, titled 'New Tab,' and does not browse
      further.
    - The user receives a notification from the Zoom desktop app, 'Meeting starting
      in 10 minutes.'
    - The agent opens the browser and searches for the latest productivity tools for
      project management.
    - The user clicks on the Google search result for 'latest Asana features 2023.'
    - The agent extracts data from the search result to generate a brief summary for
      the user.
    theme: Project Management Feedback
  user:
    description: Michael T. is a 34-year-old project manager at a marketing firm.
      He is skilled in organizational and team management, proficient in project management
      software, and communicates effectively with clients and team members. Michael
      is currently focused on managing the team's project list and ensuring alignment
      with client requirements.
    goal: Respond to a team member's request for feedback on a project task.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image_analyze(file_path: str) -> dict'
    - 'text_generate(prompt: str, length: int) -> str'
    - 'todo_list.add_item(task: str) -> None'
    - 'todo_list.remove_item(task: str) -> None'
    - todo_list.get_items() -> list
    - 'reminder.set(task: str, time: str) -> None'
    - 'cleaning_guide.provide_tips(area: str) -> str'
    - 'smart_device.control(device_name: str, action: str) -> None'
    - 'shopping_list.add_item(item: str) -> None'
    - shopping_list.get_items() -> list
    - 'settings.configure_preference(preference: str, value: str) -> None'
    description: A modern kitchen equipped with smart home devices where the user
      performs cleaning tasks with the help of an AI assistant.
    entities:
    - Smart Fridge
    - Label Maker
    - Smart Thermometer
    - Recipe Planning App
    events_example:
    - The user opens the kitchen pantry and labels jars with a label maker.
    - The agent receives a command to play the 'Cleaning Playlist' while the user
      cleans the kitchen.
    - The user interacts with the smart fridge, attempting to troubleshoot connectivity
      issues.
    - The agent sets a timer for 10 minutes as instructed by the user for cleaning
      the countertops.
    - The user receives an email notification from the Outlook app titled 'Client
      Meeting Rescheduled'.
    - The agent adds 'organic cleaner' to the shopping list after a user request.
    - The user places dishes into the dishwasher and starts the cleaning cycle.
    - The agent opens a web browser to search for 'best organic cleaning products
      for granite countertops'.
    - The user opens a new tab in the browser titled 'Recipe Ideas'.
    - The user scrolls and types 'week meal plan healthy ideas' in a search engine.
    - The agent reads the text found in the image of a dirty microwave provided by
      the user.
    - The agent provides cleaning tips for removing grease from the stove based on
      the user's query.
    - The user sets a reminder to finish cleaning the kitchen in 30 minutes through
      the agent.
    - The agent opens and analyzes a photo of the user's spice rack to suggest organization
      tips.
    - The user receives a calendar notification for their yoga class from the Calendar
      app.
    - The agent generates a meal plan for the user based on existing pantry items
      and preferences.
    - The user interacts with their indoor plants by watering them and adjusting their
      positions for better lighting.
    - The agent troubleshoots the smart fridge and guides the user through reconnecting
      it to the home network.
    - The user performs multiple scrolls through a web page titled 'Best Knife Sharpeners
      Reviewed'.
    - The agent sets a reminder for the user to prep ingredients for smoothie bowls
      weekly.
    - The agent saves and organizes the user's recipe notes into a digital folder.
    - The user switches back to their email application after interacting with the
      Google search page.
    - The user types into a search box 'how to pre-freeze cupcakes' within the 'Baking
      Tips' tab.
    - The agent adds 'fresh herbs' to the grocery list after the user inputs the request.
    - The user consults a plant-based cookbook provided by the agent to create a new
      recipe.
    - The agent diagnoses a problem with the smart thermometer and instructs the user
      on how to resolve it.
    - The user receives a Slack notification from the 'Work Projects' channel about
      updated deadlines.
    - The agent sets a reminder for the user to organize receipts later in the afternoon.
    - The user polishes their kitchen knives using a sharpening tool.
    - The agent opens a web browser to check the 'Wine Pairing' suggestions for a
      new recipe.
    theme: Smart Kitchen Cleaning
  user:
    description: David, a 28-year-old software engineer, proficient in smart home
      technology, enjoys automation for mundane chores. He is currently engaged in
      cleaning his modern kitchen with the assistance of an AI assistant.
    goal: Clean the kitchen, including wiping countertops, cleaning the sink, and
      washing the stove and microwave.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> str'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image_analyze(file_path: str) -> dict'
    - 'text_generate(prompt: str, length: int) -> str'
    - 'todo_list.add_item(task: str) -> None'
    - 'todo_list.remove_item(task: str) -> None'
    - todo_list.get_items() -> list
    - 'reminder.set(task: str, time: str) -> None'
    - 'cleaning_guide.provide_tips(area: str) -> str'
    - 'smart_device.control(device_name: str, action: str) -> None'
    - 'shopping_list.add_item(item: str) -> None'
    - shopping_list.get_items() -> list
    - 'settings.configure_preference(preference: str, value: str) -> None'
    description: A warm and inviting kitchen filled with handmade decor where the
      user bakes and preps meals with the help of an AI assistant.
    entities:
    - Stand Mixer
    - DIY Craft Supplies
    - Indoor Plants
    - Freezer Storage Containers
    events_example:
    - The user opens the kitchen pantry and labels jars with a label maker.
    - The agent receives a command to play the 'Cleaning Playlist' while the user
      cleans the kitchen.
    - The user interacts with the smart fridge, attempting to troubleshoot connectivity
      issues.
    - The agent sets a timer for 10 minutes as instructed by the user for cleaning
      the countertops.
    - The user receives an email notification from the Outlook app titled 'Client
      Meeting Rescheduled'.
    - The agent adds 'organic cleaner' to the shopping list after a user request.
    - The user places dishes into the dishwasher and starts the cleaning cycle.
    - The agent opens a web browser to search for 'best organic cleaning products
      for granite countertops'.
    - The user opens a new tab in the browser titled 'Recipe Ideas'.
    - The user scrolls and types 'week meal plan healthy ideas' in a search engine.
    - The agent reads the text found in the image of a dirty microwave provided by
      the user.
    - The agent provides cleaning tips for removing grease from the stove based on
      the user's query.
    - The user sets a reminder to finish cleaning the kitchen in 30 minutes through
      the agent.
    - The agent opens and analyzes a photo of the user's spice rack to suggest organization
      tips.
    - The user receives a calendar notification for their yoga class from the Calendar
      app.
    - The agent generates a meal plan for the user based on existing pantry items
      and preferences.
    - The user interacts with their indoor plants by watering them and adjusting their
      positions for better lighting.
    - The agent troubleshoots the smart fridge and guides the user through reconnecting
      it to the home network.
    - The user performs multiple scrolls through a web page titled 'Best Knife Sharpeners
      Reviewed'.
    - The agent sets a reminder for the user to prep ingredients for smoothie bowls
      weekly.
    - The agent saves and organizes the user's recipe notes into a digital folder.
    - The user switches back to their email application after interacting with the
      Google search page.
    - The user types into a search box 'how to pre-freeze cupcakes' within the 'Baking
      Tips' tab.
    - The agent adds 'fresh herbs' to the grocery list after the user inputs the request.
    - The user consults a plant-based cookbook provided by the agent to create a new
      recipe.
    - The agent diagnoses a problem with the smart thermometer and instructs the user
      on how to resolve it.
    - The user receives a Slack notification from the 'Work Projects' channel about
      updated deadlines.
    - The agent sets a reminder for the user to organize receipts later in the afternoon.
    - The user polishes their kitchen knives using a sharpening tool.
    - The agent opens a web browser to check the 'Wine Pairing' suggestions for a
      new recipe.
    theme: Cozy Kitchen Baking
  user:
    description: Chloe, a 45-year-old high school teacher, skilled at organizing and
      crafting, enjoys baking and meal prepping in her cozy kitchen with the help
      of an AI assistant.
    goal: Bake cupcakes and prep meals for the week.
- environment:
    agent_ops:
    - text.analyze(content:string):string
    - image.analyze(image_path:string):string
    - image.send_and_analyze(image_data:bytes):string
    - text.generate(prompt:string, context:dict|null=none):string
    - text.translate(content:string, target_language:string):string
    - terminal.execute_command(command:string):string
    - file.read(file_path:string):string
    - file.save(file_path:string, content:string):bool
    - browser.open_url(url:string):string
    - browser.search(query:string):list
    - diy_suggest_materials(task:string):list
    - diy_step_by_step_guide(task:string):string
    - weather.check_forecast(location:string, date:string):string
    description: John Miller, an IT consultant and intermediate DIY enthusiast, is
      spending his Saturday morning working on home repairs in his cozy two-story
      suburban house. The tasks include fixing wall cracks in the living room and
      performing maintenance on the roof to prevent leaks.
    entities:
    - Toolbox with various hand tools
    - Joint compound and putty knife
    - Sturdy aluminum ladder
    - Paint and brushes
    - Safety gear including hard hat and gloves
    - Living room furniture
    - Garden tools
    - Electrical wiring
    - DIY blogs and Youtube channels
    - Local hardware store
    - Social media platforms
    - Neighbor Carl Thompson
    - Weather forecast service
    events_example:
    - The agent suggests the best type of joint compound for wall crack repairs.
    - The agent searches for the best deals on asphalt shingles.
    - The agent reads the text from a tutorial webpage for fixing wall cracks.
    - The agent opens the file `project_list.docx` and updates the status of tasks.
    - The agent checks the weather forecast for the user's location today.
    - The user scrolls and types 'how to use a caulking gun' in the Google search
      box.
    - The user switches to the 'To-Do List' app and marks 'clean gutters' as completed.
    - User opens the 'Weather Forecast' app and checks today's weather.
    - The agent interprets an image of a wall crack uploaded by the user.
    - The user receives a notification from the Slack app, highlighting a new message
      in the DIY channel.
    - The agent generates a step-by-step guide for replacing shingles.
    - The user switches back to the Google homepage in the web browser.
    - The agent opens the browser and searches for videos on 'DIY roof maintenance'.
    - The agent translates an electrical guide from English to French.
    - The user inputs 'ctrl+s' to save a document in a text editor.
    - The agent reads an email from the hardware store with promotional offers visible
      on a sale of DIY materials.
    - The user clicks and scrolls through a webpage looking for eco-friendly paint
      options.
    - The agent opens the file `house_layout.png` and identifies critical areas for
      maintenance.
    - User receives an SMS notification about an upcoming appointment with the local
      hardware store.
    - The agent analyzes an image of the roof for potential damage spots using computer
      vision.
    - The user scrolls the mouse, clicks, and types 'eco-friendly sealant' in a search
      bar.
    - The agent executes a terminal command to check the system's resource usage while
      running DIY software.
    - The user switches between tabs in the web browser, searching for reviews of
      different joint compounds.
    - The agent opens the user's purchased materials list and updates with new items
      bought.
    - The user receives a calendar notification about a meeting with a roofing contractor.
    - The agent generates text recommendations on safely using a step ladder.
    - The user scrolls and types 'best types of paint for living room' in a browser
      search.
    - The agent opens and reads a PDF guide on fixing cracked tiles.
    - The agent suggests safety equipment to wear for today's roof work.
    - The user inputs 'ctrl_l' and switches to the 'Shopping List' document in a text
      editor.
    theme: DIY Home Repair
  user:
    description: John Miller is a 38-year-old IT consultant with a passion for DIY
      projects. He enjoys working on home improvement tasks during weekends, focusing
      on sustainable and cost-effective solutions. John is organized and likes to
      document his progress, often sharing his projects on social media.
    goal: Perform home repairs including fixing wall cracks and maintaining the roof.
- environment:
    agent_ops:
    - vision.identify(object)
    - vision.highlight_area(image, area)
    - vision.analyze_leak(image)
    - give.instruction(task_step)
    - diagnose.issue(symptom)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - voice.listen_and_act(command)
    - voice.provide_update(status_request)
    - send.notification(message, medium)
    - log.activity(task, detail)
    - shopping.suggest_items(task)
    - shopping.create_list(items)
    description: 'Alan Thompson, a 42-year-old software developer, is in his bright
      and airy kitchen, kneeling in front of the under-sink cabinet trying to locate
      the source of a persistent drip. Tools are spread out on the floor: wrenches,
      screwdrivers, plumber''s tape. The sink area has towels and buckets arranged
      to catch drips. Alan repeatedly checks the instruction manual and a DIY app
      for guidance but seems uncertain about his next steps.'
    entities:
    - Faucet and Sink Assembly
    - Under-Sink Cabinet
    - Tools
    - Replacement Parts
    - Instruction Manual and Tablet
    - Kitchen Floor and Surrounding Area
    - Water Supply
    - Family Members
    - Online DIY Community and Influencers
    - Manufacturers and Support Guides
    - Home Automation System
    - Household Responsibilities and Time Constraints
    - Weekend Schedule
    events_example:
    - The agent opens the file 'kitchen_sink_manual.pdf' and locates the troubleshooting
      section.
    - The user receives a notification from the 'DIY Community' app, a new tutorial
      on faucet repairs is available.
    - The user holds a wrench and attempts to loosen the nut under the faucet.
    - The agent identifies a worn-out washer from the uploaded image and recommends
      replacement.
    - The user opens the 'Home Improvement' YouTube channel and watches a video on
      'fixing a leaking kitchen faucet.'
    - The agent diagnoses the dripping issue based on the user's description and suggests
      checking the O-ring.
    - The user scrolls through the instruction manual and highlights the step for
      removing the faucet cartridge.
    - The agent highlights the area around the faucet base in the user-uploaded image
      to show potential sources of the leak.
    - The user turns off the water supply valve under the sink.
    - The agent sends a notification to the user's tablet, reminding them to double-check
      the replacement parts list.
    - The user types 'faucet parts' into a Google search box and clicks on a link
      to a plumbing supplies store.
    - "The agent listens to the command 'what\u2019s the next step?' and responds\
      \ with detailed instructions."
    - The user places a towel under the sink area to catch any dripping water.
    - "The agent suggests using plumber\u2019s tape on threaded connections to ensure\
      \ a tight seal."
    - The user clicks on an email notification from a hardware store promotion for
      discounted plumbing tools.
    - The agent opens a browser and searches for local hardware stores with the required
      parts in stock.
    - The user verifies the part number on the replacement cartridge against the faucet
      model listed in the manual.
    - The user scrolls through a parts catalog on the 'Plumbing Mart' website.
    - The agent analyzes a new image uploaded by the user and confirms the correct
      installation of the washer.
    - The user checks their phone for a tutorial video link sent by the agent for
      visual guidance.
    - "The agent logs the completed faucet diagnostic task into the user\u2019s home\
      \ maintenance journal."
    - The user inputs 'faucet repair steps' into a search engine and scans through
      the results.
    - "The agent reads the latest entries in the user\u2019s DIY project list and\
      \ identifies related tasks."
    - The agent opens the Amazon shopping app and compares prices for faucet repair
      kits.
    - The user receives a notification from the 'Home Hub' app about a pending maintenance
      reminder.
    theme: Fixing a Leaking Faucet
  user:
    description: Alan Thompson, a 42-year-old software developer with basic DIY skills,
      is attempting to fix a persistent drip from the kitchen faucet. He enjoys hands-on
      activities and prefers to work independently but appreciates timely and efficient
      assistance when needed. Alan frequently refers to online resources and DIY communities
      for guidance.
    goal: Fixing a leaking faucet in the kitchen
- environment:
    agent_ops:
    - vision.identify(object)
    - vision.highlight_area(image, area)
    - give.instruction(task_step)
    - diagnose.issue(symptom)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - voice.listen_and_act(command)
    - voice.provide_update(status_request)
    - send.notification(message, medium)
    - log.activity(task, detail)
    - shopping.suggest_items(task)
    - shopping.create_list(items)
    description: Alan Thompson is in his hallway, standing on a step ladder, attempting
      to replace ceiling light bulbs with smart bulbs. He has a variety of bulbs at
      hand but seems unsure which one is the appropriate replacement. Every few minutes,
      he glances at his smartphone, searching for confirmation.
    entities:
    - Ceiling Light Fixture
    - Step Ladder
    - Smart Light Bulbs
    - Smartphone
    - Toolbox
    - Home Automation System
    - Instruction Manual
    - Family Members
    - Online DIY Community and Influencers
    - Manufacturers and Support Guides
    - Household Responsibilities and Time Constraints
    - Weekend Schedule
    events_example:
    - The agent opens the file 'smart_bulb_manual.pdf' and locates the installation
      section.
    - The user receives a notification from the 'DIY Community' app, a new tutorial
      on installing smart bulbs is available.
    - The user holds a smart bulb and attempts to screw it into the ceiling fixture.
    - The agent identifies the correct smart bulb model from the uploaded image and
      confirms compatibility.
    - The user opens the 'Home Improvement' YouTube channel and watches a video on
      'installing smart light bulbs.'
    - The agent diagnoses the issue of the light not turning on and suggests checking
      the wiring.
    - The user scrolls through the instruction manual and highlights the step for
      connecting the smart bulb to the home automation system.
    - The agent highlights the area around the light fixture in the user-uploaded
      image to show potential issues.
    - The user turns off the power supply to the light fixture.
    - The agent sends a notification to the user's tablet, reminding them to double-check
      the bulb specifications.
    - The user types 'smart light bulbs' into a Google search box and clicks on a
      link to a smart home supplies store.
    - "The agent listens to the command 'what\u2019s the next step?' and responds\
      \ with detailed instructions."
    - The user places a ladder under the light fixture to reach it safely.
    - The agent suggests using a voltage tester to ensure the power is off before
      proceeding.
    - The user clicks on an email notification from a smart home store promotion for
      discounted smart bulbs.
    - The agent opens a browser and searches for local stores with the required smart
      bulbs in stock.
    - The user verifies the model number on the smart bulb against the fixture requirements
      listed in the manual.
    - The user scrolls through a parts catalog on the 'Smart Home Mart' website.
    - The agent analyzes a new image uploaded by the user and confirms the correct
      installation of the smart bulb.
    - The user checks their phone for a tutorial video link sent by the agent for
      visual guidance.
    - "The agent logs the completed smart bulb installation task into the user\u2019\
      s home maintenance journal."
    - The user inputs 'smart bulb installation steps' into a search engine and scans
      through the results.
    - "The agent reads the latest entries in the user\u2019s DIY project list and\
      \ identifies related tasks."
    - The agent opens the Amazon shopping app and compares prices for smart light
      bulbs.
    - The user receives a notification from the 'Home Hub' app about a pending smart
      home upgrade reminder.
    theme: Installing Smart Light Bulbs
  user:
    description: Alan Thompson, a 42-year-old software developer with basic DIY skills,
      is attempting to replace ceiling light bulbs with smart bulbs. He enjoys hands-on
      activities and prefers to work independently but appreciates timely and efficient
      assistance when needed. Alan frequently refers to online resources and DIY communities
      for guidance.
    goal: Installing smart light bulbs in the hallway
- environment:
    agent_ops:
    - action: socialmedia_post
      description: Publishes the content on the specified social media platform.
      parameters:
        content: str
        platform: str
    - action: socialmedia_schedule
      description: Schedules a post to be published on the specified platform at the
        given time.
      parameters:
        content: str
        platform: str
        time: str
    - action: socialmedia_respond
      description: Posts a response to a specific comment on a social media platform.
      parameters:
        comment_id: str
        platform: str
        response: str
    - action: socialmedia_message
      description: Sends a direct message to a specified user.
      parameters:
        message: str
        user_id: str
    - action: image_create
      description: Generates an image based on the given description.
      parameters:
        description: str
    - action: image_edit
      description: Applies specified edits to a provided image.
      parameters:
        edits: dict
        image: binary
    - action: analytics_fetch_data
      description: Retrieves specified metrics data from a social media platform for
        the given time range.
      parameters:
        metrics: list of str
        platform: str
        time_range: str
    - action: analytics_analyze_data
      description: Analyzes the specified data and provides insights and recommendations.
      parameters:
        data: dict
    - action: web_browser_open
      description: Opens a web browser and navigates to the specified URL.
      parameters:
        url: str
    - action: web_scrape_content
      description: Scrapes specified content from a website.
      parameters:
        target: str
        url: str
    - action: file_open
      description: Opens a file and returns its content.
      parameters:
        file_path: str
    - action: file_save
      description: Saves the provided content to a specified file.
      parameters:
        content: str/binary
        file_path: str
    description: Emma Carter, a digital marketing specialist, is working from her
      cozy home office. The room is well-organized with a large desk, dual monitors,
      and a comfortable chair. It is mid-morning, and Emma is focused on updating
      her personal social media status across multiple platforms while interacting
      with friends and colleagues online.
    entities:
    - Laptop
    - Smartphone
    - Desk Setup
    - Social Media Platforms (LinkedIn, Twitter, Instagram)
    - Scheduling Tools (Hootsuite)
    - Analytics Software (Google Analytics, Socialbakers)
    - Industry Influencers
    - Online Communities
    - Competitors
    - Coffee Mug
    - Inspiration Board
    events_example:
    - The agent opens the LinkedIn platform and drafts a new update.
    - The agent schedules a tweet for later in the day using Hootsuite.
    - The user receives a notification from the 'Slack' desktop app, a new message
      in the 'Marketing' channel.
    - The user opens Adobe Photoshop and begins designing a graphic for an Instagram
      story.
    - The agent fetches social media engagement data from Instagram for the past 30
      days.
    - The agent reads the content of a recent LinkedIn comment and generates a response.
    - The user receives a notification from the Calendar app for an upcoming team
      meeting.
    - The user clicks on a LinkedIn notification about a connection's new post.
    - The agent opens the Google Analytics dashboard and retrieves recent engagement
      metrics.
    - The user briefly opens a new tab in the browser but does not perform any specific
      actions.
    - The agent opens the file 'marketing_report.docx' and highlights the recent changes.
    - "The user clicks 'Like' on a friend\u2019s Instagram post about their recent\
      \ vacation."
    - The agent scrapes the latest industry news articles from a marketing news site.
    - The user scrolls through the Twitter feed, reading posts but not interacting.
    - The agent sends a direct message to a LinkedIn connection asking for a catch-up
      meeting.
    - The user opens the 'Zoom' desktop app and checks for upcoming meetings.
    - The agent reads the content of a blog article and summarizes the main points.
    - The user receives a notification from the 'Outlook' app, titled 'Project Update
      from Sarah'.
    - The agent generates an image of a modern workspace with a laptop and coffee
      cup.
    - The user logs into the Instagram app and posts a short video clip to their story.
    - The agent recommends the best times to post on LinkedIn based on recent analytics.
    - The user does not perform any specific actions in the 'Hootsuite' application.
    - The user receives a notification from the 'Twitter' web application, a direct
      message from a follower.
    - The agent opens a web browser and navigates to the latest digital marketing
      trends page.
    - The user clicks and scrolls through the Google search results page for 'social
      media best practices'.
    - The agent creates a new file named 'content_strategy.txt' and saves the initial
      draft.
    - The user receives a notification from the 'Facebook' app about an upcoming event.
    - The user switches to the 'Photoshop' window but does not perform any further
      actions.
    - The agent generates a professional LinkedIn post about a recent webinar.
    - The user receives a notification from the 'Instagram' app, a friend tagged them
      in a post.
    theme: dailyassistant
  user:
    description: Emma Carter is a 34-year-old digital marketing specialist with expertise
      in social media management, content creation, and data analytics. She works
      from her home office, focusing on maintaining an active and engaging social
      media presence while interacting with her professional network and friends.
    goal: Update personal social media status and interact with friends.
- environment:
    agent_ops:
    - file.open(file_path)
    - file.save(file_path, content)
    - file.organize(directory_path, criteria)
    - image.recognize_text(file_path)
    - browser.open(url)
    - browser.fill_form(url, form_data)
    - browser.download(url, file_path)
    - guide.step_by_step(task, details)
    - error.check_document(file_path, criteria)
    - feedback.provide_advice(task, context)
    - message.send(email, subject, body)
    - calendar.add_event(date, title, details)
    - notification.create(description, priority)
    description: "John Harrison is preparing and submitting his annual tax returns\
      \ in his home study. The room is organized with dual monitors, a desktop computer,\
      \ and neatly arranged financial documents. It\u2019s mid-March, and John is\
      \ focused on ensuring accuracy in his tax filing process."
    entities:
    - Tax Preparation Software
    - Financial Spreadsheets
    - Receipts and Documents
    - Dual Monitors
    - Financial Websites/Forums
    - IRS Website
    - AI Assistant
    events_example:
    - The agent opens the tax preparation software and loads John's 2022 tax return
      document.
    - The agent performs an error check on Emily's expense report and identifies missing
      fields.
    - The user scrolls through a PDF document of healthcare expenses on their desktop.
    - The agent accesses the IRS website to download the latest Form 1099 for Raj's
      cryptocurrency transactions.
    - The user inputs their W-2 information into the tax software and saves the document.
    - The agent reads received emails in Linda's inbox and flags receipts for business
      expenses.
    - The user receives a notification from their calendar app reminding them to file
      taxes by the end of the week.
    - The agent uses OCR to extract text from a scanned charitable donation receipt
      for Carlos.
    - The user clicks and interacts with a browser tab to view a tutorial on claiming
      home office deductions.
    - The agent submits a filled online tax filing form on Emily's behalf using her
      accounting software.
    - The user switches to an Excel spreadsheet to update investment income details.
    - The agent creates a system notification to remind John of pending investment
      documents.
    - The user navigates to a financial forum and posts a question about new tax laws
      affecting freelance work.
    - The agent downloads a summary report of Raj's 403(b) retirement contributions
      from his financial institution's website.
    - The user scrolls through and categorizes digital receipts in a folder on their
      desktop.
    - The agent generates and saves a summary document for Linda's business expense
      deductions.
    - The user switches to an email client to find donation receipts for charitable
      contributions.
    - The agent opens a browser and searches for the latest tax deduction rules for
      educators.
    - "The user types text into a Google search box within the \u2018freelance tax\
      \ tips - search\u2019 tab."
    - The agent sends an email to Raj, reminding him to finalize his tax return details
      by the due date.
    - The user clicks and selects multiple files in a directory of tax-related documents.
    - The agent organizes all scanned receipts in Carlos's receipts folder by date
      and type.
    - The user scrolls and reads through a webpage about tax incentives for small
      businesses.
    - The agent performs multiple scrolls and tabs through Linda's payroll records
      to verify wage entries.
    - The user clicks and interacts with a Google search result linking to an IRS
      publication on claiming medical expenses.
    - The agent creates a new calendar event for John to review his tax documents
      two days before the filing deadline.
    - The user receives a notification from the 'Slack' desktop app, about discussions
      in the 'Tax Tips' channel.
    - The agent checks a downloaded PDF of Emily's tax return for common errors.
    - The user inputs investment income details in their tax software and saves the
      file.
    - The agent accesses and fills a Google form based on John's tax information.
    - The user clicks and scrolls through a webpage about cryptocurrency tax regulations.
    - The agent opens a browser and searches for information on student loan interest
      deductions.
    - The user switches between multiple tabs and windows while checking tax law updates.
    - "The agent reads and retrieves relevant information from Emily\u2019s digital\
      \ records of business-related trips."
    - "The user interacts with a \u2018ChatGPT\u2019 chat tab by typing queries related\
      \ to tax filing."
    theme: Tax Filing
  user:
    description: John Harrison, a 35-year-old financial analyst, is focused on filing
      his taxes accurately. He is tech-savvy, organized, and uses various digital
      tools to manage his financial documents and ensure compliance with tax regulations.
    goal: Preparing and submitting annual tax returns.
- environment:
    agent_ops:
    - file.open(file_path)
    - file.save(file_path, content)
    - file.organize(directory_path, criteria)
    - image.recognize_text(file_path)
    - browser.open(url)
    - browser.fill_form(url, form_data)
    - browser.download(url, file_path)
    - guide.step_by_step(task, details)
    - error.check_document(file_path, criteria)
    - feedback.provide_advice(task, context)
    - message.send(email, subject, body)
    - calendar.add_event(date, title, details)
    - notification.create(description, priority)
    description: Emily Walker, a freelance graphic designer, is organizing her tax
      documents in her home office. She uses cloud-based software to manage invoices
      and expenses, ensuring all business-related costs are accurately recorded for
      tax deductions.
    entities:
    - Invoicing/Accounting Software
    - Digital Receipts Archive
    - Design Hardware/Software Receipts
    - Home Office Equipment
    - Client Emails/Contracts
    - Tax Consultant Contact
    events_example:
    - The agent opens the tax preparation software and loads John's 2022 tax return
      document.
    - The agent performs an error check on Emily's expense report and identifies missing
      fields.
    - The user scrolls through a PDF document of healthcare expenses on their desktop.
    - The agent accesses the IRS website to download the latest Form 1099 for Raj's
      cryptocurrency transactions.
    - The user inputs their W-2 information into the tax software and saves the document.
    - The agent reads received emails in Linda's inbox and flags receipts for business
      expenses.
    - The user receives a notification from their calendar app reminding them to file
      taxes by the end of the week.
    - The agent uses OCR to extract text from a scanned charitable donation receipt
      for Carlos.
    - The user clicks and interacts with a browser tab to view a tutorial on claiming
      home office deductions.
    - The agent submits a filled online tax filing form on Emily's behalf using her
      accounting software.
    - The user switches to an Excel spreadsheet to update investment income details.
    - The agent creates a system notification to remind John of pending investment
      documents.
    - The user navigates to a financial forum and posts a question about new tax laws
      affecting freelance work.
    - The agent downloads a summary report of Raj's 403(b) retirement contributions
      from his financial institution's website.
    - The user scrolls through and categorizes digital receipts in a folder on their
      desktop.
    - The agent generates and saves a summary document for Linda's business expense
      deductions.
    - The user switches to an email client to find donation receipts for charitable
      contributions.
    - The agent opens a browser and searches for the latest tax deduction rules for
      educators.
    - "The user types text into a Google search box within the \u2018freelance tax\
      \ tips - search\u2019 tab."
    - The agent sends an email to Raj, reminding him to finalize his tax return details
      by the due date.
    - The user clicks and selects multiple files in a directory of tax-related documents.
    - The agent organizes all scanned receipts in Carlos's receipts folder by date
      and type.
    - The user scrolls and reads through a webpage about tax incentives for small
      businesses.
    - The agent performs multiple scrolls and tabs through Linda's payroll records
      to verify wage entries.
    - The user clicks and interacts with a Google search result linking to an IRS
      publication on claiming medical expenses.
    - The agent creates a new calendar event for John to review his tax documents
      two days before the filing deadline.
    - The user receives a notification from the 'Slack' desktop app, about discussions
      in the 'Tax Tips' channel.
    - The agent checks a downloaded PDF of Emily's tax return for common errors.
    - The user inputs investment income details in their tax software and saves the
      file.
    - The agent accesses and fills a Google form based on John's tax information.
    - The user clicks and scrolls through a webpage about cryptocurrency tax regulations.
    - The agent opens a browser and searches for information on student loan interest
      deductions.
    - The user switches between multiple tabs and windows while checking tax law updates.
    - "The agent reads and retrieves relevant information from Emily\u2019s digital\
      \ records of business-related trips."
    - "The user interacts with a \u2018ChatGPT\u2019 chat tab by typing queries related\
      \ to tax filing."
    theme: Freelance Tax Management
  user:
    description: Emily Walker, a 42-year-old freelance graphic designer, is focused
      on organizing her business expenses and income for tax filing. She uses cloud-based
      tools to manage her finances and occasionally consults a tax professional for
      complex queries.
    goal: Preparing and submitting annual tax returns.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - schedule.add_event(title, datetime)
    - speech_to_text(audio)
    - text_to_speech(text)
    - recognize_image(image)
    - generate_text(prompt)
    - course.play(video_url)
    - course.pause()
    - course.rewind(seconds)
    - note.take(content)
    - note.review(note_id)
    - forum.post(message, forum_url)
    - task.list()
    - task.complete(task_id)
    description: A scene where users engage in online courses and workshops to learn
      new skills such as programming and painting, utilizing various digital tools
      and platforms.
    entities:
    - Computer and Dual Monitors
    - Art Supplies
    - Notebook/Planner
    - Smartphone
    - Online Learning Platforms
    - Voice Assistant
    events_example:
    - The agent opens the browser and searches for tutorials for Python basics.
    - The agent opens the file `notes.txt` and saves a summarized version of today's
      painting lesson.
    - The agent plays an online video on watercolors from YouTube.
    - The agent pauses the video at the 15-minute mark for the user to take notes.
    - The user downloads a PDF guide on acrylic painting techniques from the browser.
    - 'The agent detects and reads an email notification from Outlook titled ''New
      Course Registration: Python 101''.'
    - The agent posts a question about an error message on the Python community forum.
    - The agent adds the 'Python Basics' course start date to the user's calendar
      with a reminder.
    - The agent rewinds the coding tutorial video by 30 seconds.
    - The user receives a notification from the 'Canvas' app about a new painting
      assignment.
    - The user opens a new browser tab, the title of the page is 'New Tab'.
    - The user scrolls through an article on 'Top Digital Art Techniques' on a web
      page.
    - The user receives a notification from the 'Slack' app about a message from a
      colleague.
    - The user types 'beginner Arduino projects' into the browser search bar and hits
      enter.
    - The agent sets a timer for 45 minutes to focus on a watercolor painting session.
    - The user scrolls and copies text using 'Ctrl+C' from a coding tutorial.
    - The user receives a notification from the 'Google Calendar' app, reminding them
      of a creative writing workshop.
    - The agent generates a summary of key points from the completed JavaScript course
      module.
    - The user receives an alert from the 'Trello' app, marking a task as due for
      'Digital Art Practice'.
    - The user interacts with the 'ChatGPT' chat tab by typing a query about blending
      techniques in digital art.
    - The user copies a coding snippet using 'Ctrl+C' from a Python guide.
    - The agent bookmarks a webpage on 'Mixed Media Art' techniques for later review.
    - The agent opens the browser and performs a search for 'how to set up an Arduino
      board'.
    - The agent opens a new document for note-taking and titles it 'Watercolor Techniques'.
    - The agent detects and reads aloud a notification from the 'Fitbit' app about
      reaching the daily step goal.
    - The user receives a notification from 'Zoom' about an upcoming online workshop.
    - The agent translates a French painting tutorial to English and displays it.
    - The agent detects and reads an email from 'Code Academy' with a subject 'Weekly
      Coding Challenges'.
    - The user receives a notification from the 'YouTube' app, the channel 'Art Basics'
      uploaded a new video.
    - The user opens another tab in the browser, the title of the page is 'Python
      Forum'.
    - The agent runs a terminal command to update the list of installed Python packages.
    - The user performs a search query for 'best digital drawing tablets' from the
      web browser.
    - The agent bookmarks a forum thread on common Arduino beginner mistakes.
    - The agent checks for and reads a notification from 'Instagram' that a friend
      tagged the user in a post.
    - The user copies an image URL from a digital art resource page.
    - The user receives a notification from the 'LinkedIn' app about a new connection
      request.
    - The agent recognizes and saves text from an image of painting instructions.
    - The user types 'how to optimize painting workspace' into the browser search
      bar.
    - The agent schedules a reminder to attend an 'Intermediate Python' workshop next
      week.
    - The user opens the 'To-Do List' application but does not perform any specific
      actions.
    - The agent searches for interactive learning platforms for coding projects.
    - The agent generates a list of tips for balancing work and learning schedules.
    - The user receives a notification from 'Microsoft Teams' about a scheduled meeting.
    - The agent pauses a digital painting video and jots down timestamps for complex
      steps.
    - The user highlights text on a webpage about 'improving JavaScript skills' and
      copies it.
    - The agent translates an error message from the Arduino IDE into layman terms.
    - The user interacts with an online community chat to ask for advice on coding
      errors.
    - The agent opens a web browser and retrieves the latest video lectures from a
      painting course.
    - The user opens a new document in their word processor titled 'Art Project Ideas'.
    - The agent reads a message notification from 'WhatsApp' on the user's desktop.
    theme: Learning and Creativity
  user:
    description: The user is engaged in learning new skills through online platforms,
      balancing their time between structured courses and self-guided tutorials. They
      utilize various digital tools and resources to enhance their knowledge and creativity,
      often multitasking between different learning activities.
    goal: Attend online courses or workshops to learn new skills such as programming
      or painting.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a given command in the terminal and returns the output
        as a string.
      parameters:
        command: A string representing the command to be executed.
      return_value: The result of the command execution as a string, including any
        error messages.
    - action: file.open
      description: Opens a file located at the specified path and returns its content
        as a string.
      parameters:
        file_path: A string representing the path to the file.
      return_value: The contents of the file as a string.
    - action: file.save
      description: Saves the provided content to a file at the specified path.
      parameters:
        content: A string representing the content to be saved in the file.
        file_path: A string representing the path to the file where the content will
          be saved.
      return_value: None
    - action: browser.open
      description: Opens the specified URL in the web browser.
      parameters:
        url: A string representing the URL to open.
      return_value: None
    - action: browser.scrape
      description: Navigates to the specified URL and scrapes the content based on
        the specified data type.
      parameters:
        data_type: A string indicating the type of data to scrape.
        url: A string representing the URL to scrape.
      return_value: The scraped content as a string or a list of strings.
    - action: browser.fill_form
      description: Opens a provided URL, fills out a form specified by the keys and
        values in form_data, and submits the form.
      parameters:
        form_data: A dictionary where keys are the form field names and values are
          the input data.
        submit_button: A string representing the identifier of the form's submit button.
        url: A string representing the URL where the form is located.
      return_value: None
    - action: text.generate_prompt
      description: Generates a coherent and contextually appropriate response based
        on a provided prompt.
      parameters:
        prompt: A string representing the initial prompt or question.
      return_value: A string representing the generated text response.
    - action: text.summarize
      description: Summarizes the provided content into a concise form.
      parameters:
        content: A string containing the text to be summarized.
      return_value: A string representing the summarized version of the content.
    - action: text.compare
      description: Takes a list of stock data dictionaries, compares them, and generates
        a comparative analysis.
      parameters:
        stock_data: A list of dictionaries where each dictionary contains data about
          a single stock.
      return_value: A string providing a comparative analysis of the provided stock
        data.
    - action: image.extract_text
      description: Extracts and returns text from an image located at the specified
        path.
      parameters:
        image_path: A string representing the path to the image file.
      return_value: The extracted text as a string.
    - action: image.analyze_chart
      description: Analyzes a chart or graph from an image and returns relevant data
        points or trends as a dictionary.
      parameters:
        image_path: A string representing the path to the image file.
      return_value: A dictionary representing the analyzed data points or trends from
        the chart.
    description: Alex Thompson, a financial analyst, is working in their home office
      equipped with dual monitors, investment software, financial reports, and a whiteboard.
      The setting is designed for detailed market analysis and investment decision-making,
      with a focus on green energy stocks and long-term growth investments.
    entities:
    - Dual Monitors
    - Investment Software
    - Financial Reports and Books
    - Whiteboard and Corkboard
    - Investment Account
    - Financial Networks and Forums
    - Employer's Client Portfolios
    - Personal Financial Goals
    - Market Trends and Economic Indicators
    - Stock Analysts and Financial Advisors
    - News Outlets and Financial Media
    - Family and Friends
    events_example:
    - The agent opens the browser and searches for tutorials on 'fundamental analysis
      for stocks.'
    - The agent opens the file 'portfolio_analysis.xlsx' and identifies discrepancies
      in the performance data.
    - The agent reads received meeting notes from email and schedules a follow-up
      meeting for the user.
    - The user performs multiple scroll actions and types 'latest stock market trends'
      among others, navigating through a search page titled 'market trends 2023' on
      Google.
    - The user receives a notification from the 'Bloomberg' web application, market
      news alert on tech stock surge.
    - The user opens the 'Investment Tracker' application and does not perform any
      specific actions.
    - The user switches back to the Yahoo Finance homepage in the web browser.
    - The user does not perform any specific actions in the Web Browser.
    - The user scrolls and copies text using 'cmd+c' on a web page about renewable
      energy investments.
    - The user receives a notification from the 'Reuters' web application, breaking
      news on economic indicators.
    - The user receives a notification from the Calendar app, reminding them of a
      scheduled investment webinar.
    - The user clicks and scrolls through the Google search results page for 'best
      ETFs of 2023' in Chrome.
    - The user browses through additional pages about 'stock market forecasting' from
      Bing search results.
    - The user inputs 'ctrl_l' with mouse interactions, clicks in an investment research
      application.
    - The user receives a notification from the 'Slack' desktop app, a new message
      in the 'Finance Team' channel.
    - The agent opens a new tab in the browser; the title of the page is 'stock performance
      analysis tools'.
    - The user interacts with the 'ChatGPT' chat tab by clicking, scrolling, and typing
      queries about investment strategies.
    - The user scrolls and types 'cmdv' repeatedly while pasting stock performance
      data onto a spreadsheet.
    - The agent downloads an earnings report file from a financial news website.
    - The user inputs 'ctrl_f' and types 'Q4 earnings' searching within an open financial
      report document.
    - The agent generates a current market summary and displays it on the right monitor.
    - The user interacts with the 'Google Sheets' application, updating values in
      an 'Annual Return' column.
    - The agent analyzes a chart from an image file and extracts key financial metrics.
    - The user receives a reminder from the 'To-Do' list application about updating
      the investment portfolio.
    - The agent scrapes and summarizes the latest financial news from the 'CNN Business'
      website.
    - The user inputs 'cmd_t' to open a new tab and types 'NASDAQ index' searching
      for recent performance.
    - The agent generates a stock comparison analysis and saves it to 'comparison_report.txt'.
    - The user scrolls through a PDF report on quarterly earnings of multiple tech
      companies.
    - The agent opens a URL to a stock market forum and scrapes the latest discussions
      regarding green energy stocks.
    - The user inputs 'ctrl_s' and saves progress on the 'Investment Planning' document.
    - The user clicks on a financial news article link in an email from a market analysis
      newsletter.
    - The user interacts with the 'Yahoo Finance' tab, clicking and scrolling through
      different stock performance graphs.
    - The agent extracts text from an uploaded image of a paper report on market forecasts.
    - The user inputs 'cmd_t' to open a new tab and searches for 'investment simulation
      tools'.
    - The agent fills out an online form on a brokerage website to set up stock alerts
      for specific tickers.
    - The user receives a notification from the 'Twitter' web application, a popular
      finance analyst posted new market insights.
    theme: Investment Research and Decision-Making
  user:
    description: Alex Thompson, a 32-year-old financial analyst with 5 years of experience,
      is focused on researching and purchasing green energy stocks. Alex uses a variety
      of tools and resources to make informed investment decisions, aiming to maintain
      a dynamic and diversified portfolio aligned with personal and professional financial
      objectives.
    goal: Research and purchase suitable investment products or stocks.
- environment:
    agent_ops:
    - browser.open(url)
    - browser.search(query)
    - browser.extract_text(url, section)
    - text.analyze_sentiment(text)
    - text.generate_summary(text, length)
    - file.open(file_path)
    - file.save(file_path, content)
    - task.remind_user(time, message)
    - task.suggest_structure(document_type)
    description: A user is researching and writing a detailed article comparing features,
      pricing, and user reviews of three popular online grocery delivery services.
    entities:
    - Laptops/Tablets
    - Online Grocery Websites
    - Review Sites/Forums
    - Social Media
    - Stationery and Note-taking Tools
    - Digital Assistants and AI Tools
    - Grocery Delivery Service Representatives
    events_example:
    - The agent opens a browser and searches for 'top online grocery delivery services
      2023.'
    - The user types 'features of Instacart' into the Google search box within the
      'Google Search' tab.
    - The user clicks on a link to a detailed review of Shipt from the Google search
      results.
    - The agent reads and extracts key features from the Shipt review page.
    - The agent opens the browser and navigates to the Amazon Fresh official website.
    - The user inputs 'Amazon Fresh pricing structure' in the Google search box and
      examines the first few results.
    - The agent extracts user reviews from Trustpilot for Instacart.
    - The user copies key points about Shipt into a document named 'groceryComparison.md'
      in Visual Studio Code.
    - The agent saves the updated content to the file 'priceComparison.md' in the
      project 'GroceryDeliveryResearch' in Visual Studio Code.
    - The user scrolls through a Reddit discussion about the pros and cons of Amazon
      Fresh and reads several comments.
    - The agent analyzes the sentiment of user reviews collected from Trustpilot.
    - The user switches to the document 'AmazonFreshAnalysis.md' and writes Markdown
      notes about delivery times.
    - The agent sets a reminder to check for new user reviews in one week.
    - The user adds a bullet point section in the file 'ShiptComparison.md' to include
      delivery fees details.
    - The agent opens a new tab in the browser and searches for 'current promotions
      on Instacart.'
    - The user scrolls through and clicks on various discount offers for Shipt listed
      on Coupon websites.
    - The agent extracts pricing information from the Amazon Fresh website and summarizes
      it.
    - The user pastes summarized Amazon Fresh pricing into the document 'priceComparison.md'
      in Visual Studio Code.
    - The agent suggests an article structure template for the document 'groceryDeliveryArticle.md.'
    - The user visits the 'Instacart Features' page and takes screenshots of highlighted
      features.
    theme: Online Grocery Comparison
  user:
    description: The user is a tech-savvy individual with intermediate writing skills,
      researching online grocery services to create a comprehensive comparison article.
      They utilize various digital tools and platforms to gather and organize information
      efficiently.
    goal: Compare the features, pricing, and user reviews of three popular online
      grocery delivery services and write a detailed article.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.delete(file_path)
    - browser.open(url)
    - browser.search(query)
    - browser.download(url, destination)
    - text.extract_from_image(image_path)
    - text.generate_summary(text_content)
    - image.generate_visualization(data)
    description: A user is at home in their dedicated gym space, equipped with various
      fitness tools, preparing to create a structured weekly fitness plan. The environment
      is tech-enhanced with fitness apps and devices.
    entities:
    - Fitness Tracking App
    - Free Weights and Resistance Bands
    - Treadmill
    - Sound System
    - Personal Trainer
    - Friends and Family
    events_example:
    - The agent opens the browser and searches for new HIIT workout routines.
    - The agent opens the file `weekly_fitness_plan.xlsx` to review its contents.
    - The agent reads an e-mail about the latest fitness trends from a subscription
      service.
    - The agent schedules a reminder for the user to do a 30-minute cardio session
      tomorrow morning.
    - The user receives a notification from the 'Strava' mobile app about a new challenge
      starting this weekend.
    - The user scrolls and types `ctrl+c` repeatedly on a webpage about meal prepping
      tips.
    - The agent sets a timer for the user's 45-minute weightlifting session.
    - The user receives a notification from the 'Fitbit' app reminding them to log
      their daily water intake.
    - The agent opens the browser and downloads a PDF guide on mindfulness techniques.
    - The user interacts with the 'MyFitnessPal' app by clicking, scrolling, and logging
      their lunch meal.
    - The agent opens the file `progress_log.txt` to check the user's workout history.
    - The agent analyzes an image of a handwritten workout plan to extract text using
      OCR.
    - 'The user receives an email notification titled ''Weekly Fitness Tip: How to
      Improve Your Squats''.'
    - "The agent generates a visual graph displaying the user\u2019s weekly cardio\
      \ progress."
    - The user clicked on a YouTube video tutorial about proper deadlift form.
    - The agent searches for quick and healthy dinner recipes online.
    - The user scrolls through a fitness blog post about effective stretching routines.
    - The agent creates a new file `meal_plan_week_12.txt` with initial meal suggestions.
    - The user receives a notification from 'Apple Health' about completing their
      daily step goal.
    - The agent checks the user's workout equipment inventory spreadsheet for missing
      items.
    - The user clicks and scrolls through the 'Nike Training Club' app for workout
      inspiration.
    - The agent extracts text from an image of a nutrition label for analysis.
    - The user receives a reminder from the 'Google Calendar' app about their scheduled
      evening run.
    - The agent browses a fitness forum for best practices on integrating yoga into
      daily routines.
    - The user copies text from a webpage regarding effective kettlebell exercises.
    - The agent generates a summary of the user's monthly fitness progress.
    - The user inputs `ctrl+v` and pastes copied workout notes into a document.
    - The agent schedules an alert for the user's weekly rest day.
    - The user clicks and interacts with a webinar link about improving athletic performance.
    - The agent compiles a list of local fitness classes available for the coming
      week.
    theme: Home Fitness Planning
  user:
    description: Alex Parker, a 32-year-old graphic designer, is an intermediate fitness
      enthusiast who enjoys a balanced routine of cardio and strength training. Alex
      uses a mix of outdoor and gym workouts, tracks progress using fitness apps,
      and is keen on trying new workout techniques.
    goal: Create a weekly fitness plan including cardio and strength training.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.delete(file_path)
    - browser.open(url)
    - browser.search(query)
    - browser.download(url, destination)
    - text.extract_from_image(image_path)
    - text.generate_summary(text_content)
    - image.generate_visualization(data)
    description: A school teacher is integrating fitness into her busy schedule, involving
      her family in the process. The environment includes lightweight and portable
      fitness equipment and digital tools for tracking and planning.
    entities:
    - Jump Rope and Yoga Mat
    - Fitness Tracking Watch
    - Educational Tablets
    - Personal Planner
    - Family Members
    - School Community
    events_example:
    - The agent opens the browser and searches for new HIIT workout routines.
    - The agent opens the file `weekly_fitness_plan.xlsx` to review its contents.
    - The agent reads an e-mail about the latest fitness trends from a subscription
      service.
    - The agent schedules a reminder for the user to do a 30-minute cardio session
      tomorrow morning.
    - The user receives a notification from the 'Strava' mobile app about a new challenge
      starting this weekend.
    - The user scrolls and types `ctrl+c` repeatedly on a webpage about meal prepping
      tips.
    - The agent sets a timer for the user's 45-minute weightlifting session.
    - The user receives a notification from the 'Fitbit' app reminding them to log
      their daily water intake.
    - The agent opens the browser and downloads a PDF guide on mindfulness techniques.
    - The user interacts with the 'MyFitnessPal' app by clicking, scrolling, and logging
      their lunch meal.
    - The agent opens the file `progress_log.txt` to check the user's workout history.
    - The agent analyzes an image of a handwritten workout plan to extract text using
      OCR.
    - 'The user receives an email notification titled ''Weekly Fitness Tip: How to
      Improve Your Squats''.'
    - "The agent generates a visual graph displaying the user\u2019s weekly cardio\
      \ progress."
    - The user clicked on a YouTube video tutorial about proper deadlift form.
    - The agent searches for quick and healthy dinner recipes online.
    - The user scrolls through a fitness blog post about effective stretching routines.
    - The agent creates a new file `meal_plan_week_12.txt` with initial meal suggestions.
    - The user receives a notification from 'Apple Health' about completing their
      daily step goal.
    - The agent checks the user's workout equipment inventory spreadsheet for missing
      items.
    - The user clicks and scrolls through the 'Nike Training Club' app for workout
      inspiration.
    - The agent extracts text from an image of a nutrition label for analysis.
    - The user receives a reminder from the 'Google Calendar' app about their scheduled
      evening run.
    - The agent browses a fitness forum for best practices on integrating yoga into
      daily routines.
    - The user copies text from a webpage regarding effective kettlebell exercises.
    - The agent generates a summary of the user's monthly fitness progress.
    - The user inputs `ctrl+v` and pastes copied workout notes into a document.
    - The agent schedules an alert for the user's weekly rest day.
    - The user clicks and interacts with a webinar link about improving athletic performance.
    - The agent compiles a list of local fitness classes available for the coming
      week.
    theme: Family Fitness Integration
  user:
    description: Maria Gomez, a 45-year-old school teacher, is focused on developing
      a fitness routine that includes her family. She uses lightweight equipment and
      digital tools to track her progress and manage her time effectively.
    goal: Create a weekly fitness plan that fits into a busy teaching schedule.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> Dict'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.recognize_text(image_path: str) -> List[str]'
    - 'text.generate(prompt: str, length: int = 100) -> str'
    - 'recipe.suggest(ingredients: List[str], cuisine: str = None) -> List[str]'
    description: Emma Turner is planning an Italian-themed family dinner in her cozy
      suburban kitchen. The kitchen is filled with cookbooks and modern appliances,
      and she is focused on creating a menu featuring classic Italian dishes.
    entities:
    - Cookbooks
    - Kitchen Appliances
    - Dining Tableware
    - Family Members
    - Local Grocers
    - Wine Selection
    events_example:
    - The agent opens the web browser and searches for 'seasonal Italian recipes'
      on Google.
    - The agent reads an email from a family member with the subject 'Dietary Restrictions'
      and updates the grocery list accordingly.
    - The agent opens a new tab in the browser, the title of the page is 'Best Wine
      Pairings for Italian Cuisine.'
    - The agent identifies several errors in the seafood pasta recipe file and suggests
      corrections.
    - The agent reads a received notification from the 'Cooking Inspiration' app about
      a new recipe upload.
    - The agent performs multiple scroll actions and types 'quick BBQ side dishes'
      on a food blog.
    - The agent opens an online calendar and schedules the family dinner for Saturday
      evening.
    - The agent reads a message in the 'Family Chat' Slack channel about additional
      guests.
    - The agent opens the file titled 'Holiday Meal Plan.docx' and checks for missing
      details.
    - The agent interacts with an open tab 'Italian Cooking Forum' by clicking and
      typing a question about marinades.
    theme: Italian Family Gathering
  user:
    description: Emma Turner, a 35-year-old marketing manager, is an intermediate
      cook with a love for Italian cuisine. She is detail-oriented, creative, and
      enjoys hosting family dinners on weekends.
    goal: Plan an Italian-themed family dinner.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> Dict'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.analyze(content: Union[str, bytes]) -> Dict'
    - 'text.summarize(content: str, max_length: int = 50) -> str'
    - 'activity.plan(activity_type: str, attendees: int) -> Dict'
    description: Alex Johnson is hosting a BBQ gaming night in his chic city apartment.
      The open-plan kitchen and living area are set up with a high-end grill and a
      gaming station for guests.
    entities:
    - Grill
    - Gaming Setup
    - Bar Equipment
    - Neighbors
    - Local Breweries
    - Online Gaming Communities
    events_example:
    - The user opens a cookbook and browses through various pasta recipes.
    - The user receives a notification from the 'Cook Along' app about an upcoming
      live baking session.
    - The user navigates to the fridge and checks for the availability of essential
      ingredients.
    - The user opens a new tab in the browser, the title of the page is 'Italian Wine
      Selections.'
    - The user clicks on a YouTube video tutorial titled 'Making Homemade Focaccia
      Bread.'
    - The user receives an email notification from the 'Farmers' Market' app about
      fresh produce availability.
    - The user inputs 'ctrl_l' and types 'best grilling techniques for BBQ' in the
      search bar.
    - The user switches back to the 'Pinterest' homepage to look for table setting
      ideas.
    - The user navigates through 'Wine & Dine' magazine's website for pairing suggestions.
    - The user receives a notification from the 'Board Game Night' Facebook event
      about confirmed attendees.
    theme: BBQ Gaming Night
  user:
    description: Alex Johnson, a 29-year-old freelance graphic designer, is energetic
      and innovative. He enjoys grilling and gaming, and frequently hosts informal
      gatherings in his apartment.
    goal: Host a BBQ gaming night.
- environment:
    agent_ops:
    - 'terminal_run(command: str) -> Dict'
    - 'file.open(file_path: str) -> str'
    - 'file.save(file_path: str, content: str) -> None'
    - 'browser.open(url: str) -> None'
    - 'image.generate(description: str) -> bytes'
    - 'text.translate(content: str, target_language: str) -> str'
    - 'menu.generate(theme: str, dietary_restrictions: List[str] = None) -> Dict'
    description: Lisa Fernandez is organizing a family game night in her warm and
      welcoming home. The evening includes a variety of board games and craft activities
      for children.
    entities:
    - Board Games Collection
    - Craft Supplies
    - Cooking Supplies
    - Local Community Center
    - Parents of Students
    - "Children\u2019s Interests"
    events_example:
    - The agent opens a recipe file named 'Family BBQ Ideas.doc' and reads out loud
      the ingredients list.
    - The agent browses social media for trending family dinner themes.
    - The agent opens an email from a guest titled 'Allergy Info' and extracts relevant
      dietary constraints.
    - The agent identifies several typos in the dessert recipe note titled 'Lemon
      Tart.'
    theme: Family Game Night
  user:
    description: Lisa Fernandez, a 42-year-old elementary school teacher, is warm
      and nurturing. She enjoys crafting engaging activities and hosting family-friendly
      events.
    goal: Organize a family game night.
- environment:
    agent_ops:
    - text.read(file_path)
    - image.read(file_path)
    - text.extract_from_web(url)
    - image.analyze(url_or_file)
    - text.generate(prompt)
    - list.generate_shopping(recipes)
    - text.summarize(content)
    - terminal.run(command)
    - file.open(file_path, mode)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - alert.notify(message)
    - calendar.schedule_event(date, time, description)
    - nutrition.analyze(recipe)
    - recommend.recipes(existing_ingredients)
    description: Emma Parker, a full-time marketing manager and intermediate cook,
      plans her family's weekly menu. She balances kid-friendly meals with healthy
      options and uses a mix of cookbooks and digital tools.
    entities:
    - Cookbooks and Recipe Apps
    - Kitchen Appliances
    - Grocery List Notebook
    - Refrigerator and Pantry
    - Grocery Store Shelves
    - Family Members
    events_example:
    - The user opens the browser and searches for 'easy healthy recipes' on Google.
    - The agent extracts recipe ingredients from a webpage and summarizes them in
      a text document.
    - The user grabs a cookbook from the kitchen shelf and opens it to a bookmarked
      page.
    - The agent categorizes the items listed from a scanned grocery receipt into produce,
      dairy, and pantry staples.
    - The user opens the family calendar app to check for upcoming activities and
      events.
    - The agent reads the existing pantry inventory from a text file located at 'C:\Users\Emma\Documents\PantryList.txt'.
    - The user scrolls and types 'Mediterranean diet recipes' into the Google search
      box.
    - The agent organizes a shopping list based on the weekly menu plan into categories
      for easy grocery store navigation.
    - The user selects a recipe on their favorite food blog and reads through the
      ingredient list.
    - The agent saves the generated weekly menu into a file named 'WeeklyMenu_Emma.txt'
      in the '\Documents\MealPlans' directory.
    - The user opens an email notification from Amazon confirming the delivery of
      a new kitchen gadget.
    - The agent analyzes the nutritional content of a recipe provided by the user.
    - The user scrolls through a recipe app, clicking on different vegetarian dish
      options.
    - The agent reminds the user to start meal prep for Tuesday's dinner based on
      the set schedule.
    - The user types a grocery list into a note-taking app on their smartphone.
    - The agent opens the browser and searches for local farmer's markets near the
      user's location.
    - The user clicks and moves the mouse to interact with calendar events, checking
      for overlaps with meal prep times.
    - The agent generates a list of meal suggestions based on the vegetables available
      in the user's fridge.
    - The user receives a notification from a recipe app about a new recipe that fits
      their dietary preferences.
    - The agent retrieves and summarizes key points from an online article about the
      benefits of whole grains.
    - The user opens a new tab in the browser, the title of the page is 'Weekly Meal
      Planner.'
    - The agent reads and lists the main steps from a complex recipe found in a downloaded
      PDF.
    - The user receives a reminder from their smartphone about the need to buy groceries
      this evening.
    - The agent creates an event in the user's calendar labeled 'Grocery Shopping'
      for Saturday at 10 AM.
    - "The user logs into their meal planning app to update it with the week\u2019\
      s menu."
    - The agent fetches the cooking times for various recipes and adjusts the meal
      prep schedule accordingly.
    - The user scrolls through their Instagram feed for dinner presentation inspirations.
    - The agent links to a YouTube tutorial for a new cooking technique mentioned
      by the user.
    - The user receives a notification from their cooking app, suggesting they try
      a new soup recipe.
    - The agent checks an inventory file and notifies the user about low stock items
      like eggs and milk.
    - The user types and searches specific ingredient quantities needed for a recipe
      on Google.
    - The agent reads and categorizes scanned handwritten notes from the recipe notebook.
    - The user receives a notification from their fitness tracker app encouraging
      them to track their daily meals.
    - The agent generates and saves a detailed shopping list to a new file named 'GroceryList_09-2022.txt'.
    - The user clicks through multiple tabs in their web browser, researching nutritional
      information for various meals.
    - The agent retrieves and lists seasonal vegetables currently available from a
      local farmer's market website.
    - The user scrolls on a cooking blog, looking for photo instructions on how to
      create homemade pasta.
    - The agent identifies vegetarian options within a selection of recipes and highlights
      them.
    - The user marks selected recipes for the week in their meal planning software.
    - The agent sends a notification to the user's phone about a special sale on organic
      produce at a nearby store.
    theme: Family Meal Planning
  user:
    description: Emma Parker, a 35-year-old marketing manager, is an intermediate
      cook who enjoys experimenting with new recipes. She plans her family's meals
      over the weekend, ensuring a balance of healthy and kid-friendly options.
    goal: Plan the weekly family menu, list the weekly recipes, and prepare a shopping
      list.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a specified terminal command on the user's device.
      parameters:
      - command (string)
      return_values: Output or result of the terminal command.
    - action: file.open
      description: Opens a file located at the specified path.
      parameters:
      - file_path (string)
      return_values: Content of the file.
    - action: file.save
      description: Saves content to a specified file path, creating or overwriting
        as needed.
      parameters:
      - file_path (string)
      - content (string)
      return_values: Confirms success or failure of the save operation.
    - action: browser.open
      description: Opens a specified URL in the web browser.
      parameters:
      - url (string)
      return_values: None.
    - action: app.open
      description: Opens a specified application on the user's device.
      parameters:
      - app_name (string)
      return_values: None.
    - action: app.send_query
      description: Sends an inquiry or command to a specific application.
      parameters:
      - app_name (string)
      - query (string)
      return_values: Response or output of the query.
    - action: text.extract_info
      description: Extracts specific information from a text document.
      parameters:
      - document (string)
      return_values: Structured data or specific details extracted from the text.
    - action: text.generate_response
      description: Generates a relevant text response based on the input query.
      parameters:
      - query (string)
      return_values: Coherent and contextually relevant text response.
    - action: image.read_labels
      description: Reads and identifies labels or text from an image.
      parameters:
      - image_file (string)
      return_values: Text data identified from the image.
    - action: image.classify_item
      description: Classifies objects present in an image and returns identity.
      parameters:
      - image_file (string)
      return_values: List of identified objects with confidence scores.
    - action: task.schedule_reminder
      description: Schedules a reminder for a specified task at a designated time.
      parameters:
      - task_description (string)
      - time (datetime)
      return_values: Confirming successful scheduling.
    - action: task.manage_list
      description: Manages items in a specified list by adding or removing them.
      parameters:
      - list_name (string)
      - action (string)
      - item (string)
      return_values: Updated list status with confirmation of the action.
    description: Jessica Thompson, a 34-year-old graphic designer, is preparing her
      grocery list for the week. She is in her cozy downtown apartment on a Saturday
      morning, checking her pantry app and browsing recipe blogs. Jessica prefers
      organic and locally sourced products and uses various digital tools to optimize
      her shopping and meal planning.
    entities:
    - Digital Pantry App
    - Smartphone
    - Reusable Shopping Bags
    - Fridge and Pantry
    - Recipe Apps
    - Grocery List App
    - Local Farmers Market
    - Community Supported Agriculture (CSA)
    - Preferred Grocery Store
    - Friends and Social Media Followers
    events_example:
    - The user opens the pantry app on their smartphone to check the inventory.
    - The agent reads the received email regarding special offers at the local grocery
      store.
    - The user scrolls through recipes on a cooking blog and copies a recipe link
      using 'cmd+c'.
    - The user receives a notification from the 'Instacart' mobile app, a new discount
      on organic avocados.
    - The agent opens the grocery list app and updates the list according to the pantry
      inventory report.
    - The user receives a notification from the 'Slack' desktop app, a colleague shared
      a lunch recipe.
    - The agent opens the web browser and searches for 'best deals on quinoa'.
    - The user scrolls and types 'cmdc' repeatedly while browsing a kitchen appliances
      review site.
    - The agent reads labels from an image of a new product in the grocery store flyer.
    - The user clicked and scrolled through the Google search results page for 'healthy
      meal plans' in Chrome.
    - The agent opens the budgeting app and allocates funds for the upcoming grocery
      shopping.
    - The user interacts with the 'Whole Foods' app, adding organic dairy products
      to the cart.
    - The agent schedules a reminder to buy fresh produce from the farmers market
      at 10 AM.
    - The user receives a notification from the 'YouTube' app, a new cooking tutorial
      is available.
    - The agent opens the file 'MealPlan.txt' and updates it with new recipes found
      online.
    - The user receives a notification from the 'Fitbit' app, a recipe suggestion
      for post-workout nutrition.
    - The agent classifies items in an image uploaded from a recipe book and matches
      them with grocery needs.
    - The user clicked on a featured snippet about 'how to store fresh herbs' from
      a Google search result.
    - The agent opens the browser and accesses the website of a local CSA program.
    - The user receives a notification from the 'Pinterest' app, a new pin for meal
      prep ideas from a friend.
    - The agent sends a query to the meal planning app to suggest recipes with the
      current pantry contents.
    - The user interacted with the 'Amazon Fresh' app, searching for gluten-free snack
      options.
    - The agent identifies out-of-stock items from the grocery list and looks for
      alternative stores.
    - The user clicks and drags on the meal planner app to rearrange the meal schedule
      for the week.
    - The agent opens an image file and reads the nutritional information of a packaged
      food product.
    - The user receives a notification from the 'Zoom' desktop app, a family cooking
      session is about to start.
    - The agent opens the browser and locates nearby farmer markets using Google Maps.
    - The user receives a notification from the 'Facebook' app, a friend recommended
      a new recipe group.
    - The agent reads the text on a digital flyer image for sales at a grocery store.
    - The user scrolls through additional pages about 'saving money on groceries'
      from Bing search results.
    theme: Grocery Shopping and Meal Planning
  user:
    description: Jessica Thompson is a 34-year-old graphic designer who values healthy
      eating and sustainability. She uses various digital tools to plan her meals
      and grocery shopping efficiently, preferring organic and locally sourced products.
      Jessica is tech-savvy and enjoys discovering new recipes.
    goal: Buy groceries and daily necessities according to the shopping list, paying
      attention to special offers.
- environment:
    agent_ops:
    - action: terminal_run
      description: Executes a specified terminal command on the user's device.
      parameters:
      - command (string)
      return_values: Output or result of the terminal command.
    - action: file.open
      description: Opens a file located at the specified path.
      parameters:
      - file_path (string)
      return_values: Content of the file.
    - action: file.save
      description: Saves content to a specified file path, creating or overwriting
        as needed.
      parameters:
      - file_path (string)
      - content (string)
      return_values: Confirms success or failure of the save operation.
    - action: browser.open
      description: Opens a specified URL in the web browser.
      parameters:
      - url (string)
      return_values: None.
    - action: app.open
      description: Opens a specified application on the user's device.
      parameters:
      - app_name (string)
      return_values: None.
    - action: app.send_query
      description: Sends an inquiry or command to a specific application.
      parameters:
      - app_name (string)
      - query (string)
      return_values: Response or output of the query.
    - action: text.extract_info
      description: Extracts specific information from a text document.
      parameters:
      - document (string)
      return_values: Structured data or specific details extracted from the text.
    - action: text.generate_response
      description: Generates a relevant text response based on the input query.
      parameters:
      - query (string)
      return_values: Coherent and contextually relevant text response.
    - action: image.read_labels
      description: Reads and identifies labels or text from an image.
      parameters:
      - image_file (string)
      return_values: Text data identified from the image.
    - action: image.classify_item
      description: Classifies objects present in an image and returns identity.
      parameters:
      - image_file (string)
      return_values: List of identified objects with confidence scores.
    - action: task.schedule_reminder
      description: Schedules a reminder for a specified task at a designated time.
      parameters:
      - task_description (string)
      - time (datetime)
      return_values: Confirming successful scheduling.
    - action: task.manage_list
      description: Manages items in a specified list by adding or removing them.
      parameters:
      - list_name (string)
      - action (string)
      - item (string)
      return_values: Updated list status with confirmation of the action.
    description: Mark Robinson, a 45-year-old software engineer, is preparing his
      grocery list using automated tools. He is in his home office on a Saturday morning,
      programming his smart fridge and using web scraping tools to find the best deals.
      Mark enjoys cooking as a hobby and focuses on shopping for specific dietary
      needs.
    entities:
    - Smart Fridge
    - Web Scraping Tools
    - Family Meal Planner
    - Home Assistant
    - Organic Grocery Delivery Service
    - Family Members
    - Online Grocery Services
    - Health Food Brands
    - Coworkers
    events_example:
    - The user opens the pantry app on their smartphone to check the inventory.
    - The agent reads the received email regarding special offers at the local grocery
      store.
    - The user scrolls through recipes on a cooking blog and copies a recipe link
      using 'cmd+c'.
    - The user receives a notification from the 'Instacart' mobile app, a new discount
      on organic avocados.
    - The agent opens the grocery list app and updates the list according to the pantry
      inventory report.
    - The user receives a notification from the 'Slack' desktop app, a colleague shared
      a lunch recipe.
    - The agent opens the web browser and searches for 'best deals on quinoa'.
    - The user scrolls and types 'cmdc' repeatedly while browsing a kitchen appliances
      review site.
    - The agent reads labels from an image of a new product in the grocery store flyer.
    - The user clicked and scrolled through the Google search results page for 'healthy
      meal plans' in Chrome.
    - The agent opens the budgeting app and allocates funds for the upcoming grocery
      shopping.
    - The user interacts with the 'Whole Foods' app, adding organic dairy products
      to the cart.
    - The agent schedules a reminder to buy fresh produce from the farmers market
      at 10 AM.
    - The user receives a notification from the 'YouTube' app, a new cooking tutorial
      is available.
    - The agent opens the file 'MealPlan.txt' and updates it with new recipes found
      online.
    - The user receives a notification from the 'Fitbit' app, a recipe suggestion
      for post-workout nutrition.
    - The agent classifies items in an image uploaded from a recipe book and matches
      them with grocery needs.
    - The user clicked on a featured snippet about 'how to store fresh herbs' from
      a Google search result.
    - The agent opens the browser and accesses the website of a local CSA program.
    - The user receives a notification from the 'Pinterest' app, a new pin for meal
      prep ideas from a friend.
    - The agent sends a query to the meal planning app to suggest recipes with the
      current pantry contents.
    - The user interacted with the 'Amazon Fresh' app, searching for gluten-free snack
      options.
    - The agent identifies out-of-stock items from the grocery list and looks for
      alternative stores.
    - The user clicks and drags on the meal planner app to rearrange the meal schedule
      for the week.
    - The agent opens an image file and reads the nutritional information of a packaged
      food product.
    - The user receives a notification from the 'Zoom' desktop app, a family cooking
      session is about to start.
    - The agent opens the browser and locates nearby farmer markets using Google Maps.
    - The user receives a notification from the 'Facebook' app, a friend recommended
      a new recipe group.
    - The agent reads the text on a digital flyer image for sales at a grocery store.
    - The user scrolls through additional pages about 'saving money on groceries'
      from Bing search results.
    theme: Grocery Shopping and Meal Planning
  user:
    description: Mark Robinson is a 45-year-old software engineer who enjoys cooking
      as a hobby. He uses automated tools to optimize his grocery shopping and meal
      planning, focusing on specific dietary needs. Mark is tech-savvy and uses web
      scraping tools to find the best deals.
    goal: Buy groceries and daily necessities according to the shopping list, paying
      attention to special offers.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - calendar.add_event(title, date, time, details)
    - email.send(recipient, subject, body)
    description: Jake Turner, a 30-year-old startup founder with advanced technology
      skills, is working in his minimalist home office. It's 10:30 AM on a Tuesday,
      and he's been busy with client reports and strategic planning tasks. His desk
      is cluttered with open notebooks, a laptop, and a cup of coffee. The weather
      outside is clear, and sunlight is streaming in, creating a productive work environment.
    entities:
    - Laptop
    - Smartphone
    - Booking Platform
    - Digital Assistant
    - Team Members
    - Medical Practitioner
    - Calendar Integration
    - Client Projects
    - Health Apps
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: Tech-Savvy Entrepreneur's Home Office
  user:
    description: Jake Turner is a 30-year-old startup founder with advanced technology
      skills. He enjoys keeping up with tech trends and optimizing workflows. Jake
      values efficiency and prefers using digital tools to manage his schedule and
      health appointments.
    goal: Schedule a routine check-up with a general practitioner.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - phone.call(number)
    - calendar.update_event(event_id, new_date, new_time)
    description: Laura Hernandez, a 35-year-old marketing executive, is juggling her
      work and family responsibilities. She is currently at her office during lunch
      break, trying to book a pediatric check-up for her 6-year-old son. Her office
      is filled with marketing materials and a family calendar hangs in the kitchen
      at home.
    entities:
    - Office Computer
    - Phone
    - Physical Calendar
    - "Son\u2019s School Schedule"
    - Ex-Husband
    - Marketing Team
    - Work Deadlines
    - Fitness Routine
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: Busy Single Parent's Home and Office
  user:
    description: Laura Hernandez is a 35-year-old marketing executive and a busy single
      parent. She is skilled in digital marketing strategies and multitasking. Laura
      enjoys yoga and cooking, and she keeps a detailed family calendar to manage
      her responsibilities.
    goal: Book a pediatric check-up for her 6-year-old son.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - university_portal.login(username, password)
    - reminder.set(date, time, message)
    description: Kevin Li, a 21-year-old computer science major, is in his dorm room
      filled with textbooks and a laptop. It's mid-afternoon on a Wednesday, and he's
      taking a break between classes. His room is decorated with tech gadgets and
      gaming memorabilia.
    entities:
    - Laptop
    - Phone
    - Medical Appointment App
    - Textbooks
    - Roommate
    - University Health Center
    - Class Schedules
    - Grades/Assignments
    - Part-Time Job
    - Student Health and Wellness Programs
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: College Student's Dorm Room
  user:
    description: Kevin Li is a 21-year-old college student majoring in computer science.
      He is tech-savvy and uses various apps to manage his academic and personal life.
      Kevin is organized but sometimes struggles with managing appointments around
      his busy academic schedule.
    goal: Book an annual physical exam.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - health_portal.register(name, date_of_birth, contact_info)
    - information.search_medical_articles(query)
    description: Evelyn Brooks, a 68-year-old retired school principal, is sitting
      in her cozy living room filled with warm, earthy tones and bookshelves. It's
      early afternoon on a Friday, and she is sipping tea while reading a novel. Her
      tablet is propped up on a side table.
    entities:
    - Tablet
    - Landline Phone
    - Garden Tools
    - Volunteer Group
    - Family
    - Medical Facility
    - Health Conditions
    - Community Activities
    - "Friends\u2019 Recommendations"
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: Retiree's Cozy Living Room
  user:
    description: Evelyn Brooks is a 68-year-old retired school principal with basic
      tech skills. She enjoys gardening, volunteering, and early-morning strolls.
      Evelyn prefers the personal touch of phone calls but is open to trying online
      systems recommended by her friends.
    goal: Schedule a cardiology consultation.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - travel.update_itinerary(new_details)
    - health.sync_with_wearable(device_id, user_preferences)
    description: Mark Davis, a 45-year-old regional sales manager, is in his hotel
      room during a business trip. His travel laptop is open on the desk, and his
      smartwatch is on the bedside table. The room is modern and functional, with
      a detailed travel itinerary on the desk.
    entities:
    - Travel Laptop
    - Smartwatch
    - Travel Itinerary
    - Clients
    - Local Clinics
    - Hotel Concierge
    - Work Commitments
    - Family
    - Personal Health Goals
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: Traveling Salesperson's Hotel Room
  user:
    description: Mark Davis is a 45-year-old regional sales manager who frequently
      travels for work. He is skilled in sales strategies and client relationship
      management. Mark enjoys reading business books and fitness training, and he
      prefers to align his health appointments with his travel itinerary.
    goal: Book a health check-up while traveling.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - browser.open(url)
    - browser.search(query)
    - image.recognize_text(image_path)
    - blog.post(title, content)
    - reminder.book_appointment(date, time, clinic, confirmation)
    description: Dana Walker, a 32-year-old freelance copywriter, is working in her
      small but modern apartment. Her laptop is open on the desk, and a journal is
      nearby. The room is vibrant and creative, with bright colors and art pieces
      adorning the walls.
    entities:
    - Laptop
    - Journal
    - Dermatology Clinic Website
    - Freelance Clients
    - Blog Readers
    - Local Pharmacy
    - Writing Deadlines
    - Travel Plans
    - Health Concerns
    events_example:
    - The agent opens the browser and searches for 'nearest general practitioner available
      appointments.'
    - The agent opens the calendar application to view available time slots for the
      upcoming week.
    - The user receives an email notification from Outlook, titled 'Doctor's Appointment
      Reminder.'
    - The agent navigates to the university health portal and logs in using the provided
      credentials.
    - The agent reads a confirmation email for a doctor's appointment and updates
      the user's digital calendar.
    - The user interacts with the 'Hospital's Booking System' by clicking, scrolling,
      and selecting time slots.
    - The agent sends an email to a team member notifying them of a rescheduled meeting.
    - The user receives a notification from the 'To-Do List' app that a new task has
      been added.
    - The agent opens a text file and reads the content, which contains appointment
      preparation instructions.
    - The agent uses image recognition to read the text from a scanned health document.
    theme: Freelance Writer's Apartment
  user:
    description: Dana Walker is a 32-year-old freelance copywriter who enjoys blogging,
      traveling, and attending writing workshops. She is skilled in content creation
      and SEO, and she prefers managing her schedule and health through digital tools.
    goal: Book a dermatology consultation.
- environment:
    agent_ops:
    - terminal_run(command)
    - file.open(file_path)
    - file.save(file_path, content)
    - file.delete(file_path)
    - browser.open(url)
    - browser.search(query)
    - browser.scrape(url, element_selector)
    - text.read(file_path)
    - text.generate(summary, length)
    - text.extract(keywords)
    - image.read(image_path)
    - image.compare(image_path1, image_path2)
    description: 'The scene involves users evaluating and comparing features, pricing,
      and user reviews of three popular cloud storage services: Google Drive, Dropbox,
      and OneDrive. Users are utilizing various digital tools and resources to make
      informed decisions.'
    entities:
    - Laptop
    - Smartphone/Tablets
    - Cloud Service Apps
    - Collaboration Tools
    - Files and Documents
    - Client/Colleague Interactions
    - User Reviews and Blogs
    - Cost Comparison Platforms
    - Technical Guides and Tutorials
    - Security Advisories
    - Social Media Groups/Forums
    - Friends/Colleagues' Recommendations
    events_example:
    - The agent opens the web browser and searches for 'Google Drive vs Dropbox vs
      OneDrive feature comparison 2023.'
    - The agent reads and summarizes the latest user reviews of Dropbox from three
      different tech review websites.
    - The agent extracts the pricing plans of Google Drive, Dropbox, and OneDrive
      from their official websites.
    - The user opens a spreadsheet and starts typing the names of different cloud
      storage services.
    - The user navigates to a tech blog, scrolls through an article on the best cloud
      storage options for freelancers, and takes notes.
    - The user opens their email application and checks for any recent emails from
      potential clients.
    - The agent opens a text document titled 'Cloud Storage Evaluation.docx' and appends
      the latest findings.
    - The user downloads a comparison chart image of cloud storage services from a
      website and saves it to the local drive.
    - "The agent scrapes the pricing information section from Google Drive\u2019s\
      \ pricing webpage."
    - The user opens an Excel sheet and begins organizing data into columns labeled
      'Features,' 'Pricing,' and 'Reviews.'
    - The agent runs a terminal command to find the disk usage statistics of the current
      directory.
    - The agent reads and extracts relevant sections from a technical guide on setting
      up OneDrive integration with Office 365.
    - The user clicks on a YouTube video review of cloud storage services and watches
      it for 15 minutes.
    - The agent generates a summary of key features for each cloud storage service
      and saves it to a text file.
    - The user opens the Dropbox application on their smartphone to check available
      storage space.
    - The agent searches for 'best cloud storage for photographers' and retrieves
      the top three search results.
    - The agent reads security advisory reports on cloud storage vulnerabilities from
      an industry news website.
    - The user opens Microsoft Teams to discuss cloud storage options with colleagues.
    - The agent opens a shared folder in Google Drive and lists its contents.
    - "The user scrolls through the comments section of a tech forum discussing improvements\
      \ in OneDrive\u2019s latest update."
    - "The agent reads an image file with a comparison chart between Google Drive,\
      \ Dropbox, and OneDrive\u2019s user interfaces."
    - The user copies pricing information from the internet and pastes it into a Word
      document.
    - The agent opens a blog post on a tech website and scrapes user opinions on the
      reliability of Dropbox.
    - The user clicks on a Twitter link that leads to an article about cloud storage
      trends in 2023.
    - "The agent saves extracted text data about Google Drive\u2019s pros and cons\
      \ to a markdown file."
    - The user checks a calendar application to schedule a follow-up meeting with
      a client.
    - The agent reads a PDF document containing a detailed feature analysis of OneDrive
      integrations.
    - The user adjusts the column sizes in Excel to fit the text about cloud storage
      features more clearly.
    - The agent performs a web search for reviews on cloud storage performance under
      high load.
    - The user switches to a PowerPoint presentation and begins creating slides summarizing
      the findings.
    - The agent scrapes user reviews from a consumer feedback platform about Google
      Drive.
    - The user clicks through several comparison articles on a tech blog while deciding
      on the best cloud storage option.
    - The agent identifies and highlights keywords related to pricing and security
      from a text document.
    - The user uploads a large design project to Google Drive for client review.
    - The agent checks for the latest announcements on the Dropbox website.
    - The user logs into their OneDrive account and organizes files into folders for
      easier access.
    - The agent reads and compiles user feedback from various social media platforms
      on Google Drive's integration features.
    - The user prints out a summary document of cloud storage services to share during
      a client meeting.
    - The agent extracts headers and bullet points from an online tutorial document
      about using OneDrive for business.
    - The user takes a screenshot of a feature comparison table and saves it to the
      desktop for reference.
    - The agent reads text content from a PDF document comparing cloud storage security
      features.
    - The user edits the title of a document in Google Docs to reflect the latest
      comparison findings.
    - The agent runs a script to automate the extraction of pricing data from cloud
      storage websites.
    - The user copies technical specifications of Dropbox and pastes them into an
      Excel sheet.
    - The agent scrapes a table of contents from a tech review site focused on cloud
      storage services.
    - "The user navigates through an online forum discussing the user experiences\
      \ with OneDrive\u2019s mobile app."
    - The agent inputs extracted data into a pre-formatted template designed for comparing
      cloud storage solutions.
    - The user highlights key points in a text document summarizing cloud storage
      reviews for easy reference.
    - The agent reads and summarizes a long-form article on the future trends in cloud
      storage technology.
    - The user bookmarks several web pages containing in-depth analysis of cloud storage
      services for later review.
    theme: Cloud Storage Comparison
  user:
    description: The user is engaged in evaluating cloud storage options to determine
      the best service for their needs. They are using various digital tools and resources,
      such as laptops, smartphones, and cloud service apps, to gather information
      and make an informed decision. The user interacts with online reviews, pricing
      platforms, and technical guides to assess the suitability of Google Drive, Dropbox,
      and OneDrive.
    goal: Compare the features, pricing, and user reviews of three popular cloud storage
      services.
